<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>keep-async-await-from-blocking-execution</title>
      <link href="2020/11/24/web/js/keep-async-await-from-blocking-execution/"/>
      <url>2020/11/24/web/js/keep-async-await-from-blocking-execution/</url>
      
        <content type="html"><![CDATA[<p><code>Promises</code> are extremely powerful for handling asynchronous operations in JavaScript. <code>Async</code> functions make them easier to read and reason about. However, they also introduce some sneaky traps that can lead to slowdowns if we’re not careful.</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-todolist</title>
      <link href="2020/11/20/python/web/flask-todolist/"/>
      <url>2020/11/20/python/web/flask-todolist/</url>
      
        <content type="html"><![CDATA[<p><code>Flask</code> 是一个使用 Python 语言编写的 Web 框架，它可以让你高效的编写 Web 程序。我最近用<code>flask+vue</code>搭建一个简单的<code>todolist</code> 项目示例来学习，主要是参考<a href="https://github.com/greyli/flask-tutorial">flask-tutorial</a>，感兴趣的可以看看，<a href="https://github.com/jianchengwang/todo-python/raw/master/flask/todo-list">示例代码</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个项目比较简单，就是用户登录，然后有一个<code>todolist</code>列表，可以简单的增删改，前端界面使用<code>vue</code>框架，所以关于<code>flask template</code>涉及不多，感兴趣的可以自己去学习下。本系列基于<code>python3</code>版本，所以命令跟<code>python2</code>可能有些许出入。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="基础软件"><a href="#基础软件" class="headerlink" title="基础软件"></a>基础软件</h3><p>安装<code>python</code>，</p><p>编辑软件，一般文本软件软件即可，这个看个人习惯，我这边是用<code>vscode</code></p><p>安装<code>git</code>，window用户推荐使用<code>git bash</code> 内置了很多linux命令</p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class="language-shell" data-language="shell"><code class="language-shell">mkdir todo-listcd todo-listmkdir app serve</code></pre><p>我这边项目里面创建两个目录<code>app</code>（vue前端页面，这个这里不多做介绍），<code>serve</code>（flask后端服务），</p><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><pre class="language-shell" data-language="shell"><code class="language-shell">cd serve # 安装虚拟环境py -3 -m venv env  # Windows or python3 -m venv env # Linux 和 macOS# 激活虚拟环境env\Scripts\activate  # Windows. env&#x2F;bin&#x2F;activate  # Linux 或 macOS# 安装flask pip3 install flask</code></pre><p><code>env</code>这个名字不固定，你也可以使用<code>venv</code>，记得<code>.gitignore</code>忽略掉这个目录。</p><p>在激活虚拟环境后，无论操作系统和 Python 版本，都可以统一使用 <code>python</code> 和 <code>pip</code> 命令来调用当前虚拟环境内的 Python 和 pip 程序/二进制文件。此时执行 <code>python</code> 或 <code>pip</code> 命令指向的程序和激活脚本在同一个目录下，在 Windows 下所在目录为 <code>env\Scripts\</code>，Linux 和 macOS 下所在目录为 <code>env/bin/</code></p><h2 id="Hello-Flask"><a href="#Hello-Flask" class="headerlink" title="Hello Flask"></a>Hello Flask</h2><p><code>serve</code>根目录下创建<code>app.py</code></p><pre class="language-shell" data-language="shell"><code class="language-shell"># 创建app.pyvim app.py # app.py内容from flask import Flaskapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;&#39;)def hello():    return &#39;Welcome to My Watchlist!&#39;    # 启动flask run    </code></pre><p>现在打开浏览器，访问 <a href="http://localhost:5000/">http://localhost:5000</a> 即可访问我们的程序主页</p><h3 id="程序发现机制"><a href="#程序发现机制" class="headerlink" title="程序发现机制"></a>程序发现机制</h3><p>如果你把上面的程序保存成其他的名字，比如 hello.py，接着执行 <code>flask run</code> 命令会返回一个错误提示。这是因为 Flask 默认会假设你把程序存储在名为 <code>app.py</code> 或 <code>wsgi.py</code> 的文件中。如果你使用了其他名称，就要设置系统环境变量 <code>FLASK_APP</code> 来告诉 Flask 你要启动哪个程序。</p><pre class="language-shell" data-language="shell"><code class="language-shell">export FLASK_APP&#x3D;hello.py # Linux 或 macOS$Env:FLASK_APP&#x3D;hello.py # Window PowerShellset FLASK_APP&#x3D;hello.py # Window CMD</code></pre><h3 id="管理环境变量"><a href="#管理环境变量" class="headerlink" title="管理环境变量"></a>管理环境变量</h3><p>为了不用每次打开新的终端会话都要设置环境变量，我们安装用来管理系统环境变量的 <code>python-dotenv</code></p><pre class="language-shell" data-language="shell"><code class="language-shell">pip3 install python-dotenv</code></pre><p>当 <code>python-dotenv</code> 安装后，<code>Flask</code> 会从项目根目录的 <code>.flaskenv</code>和 <code>.env</code> 文件读取环境变量并设置。</p><pre class="language-shell" data-language="shell"><code class="language-shell">touch .env .flaskenv</code></pre><p><code>.flaskenv</code> 用来存储 Flask 命令行系统相关的公开环境变量；</p><p><code>.env</code> 则用来存储敏感数据，不应该提交进Git仓库，我们把文件名 <code>.env</code> 添加到 <code>.gitignore</code> 文件的结尾（新建一行）来让 Git 忽略它。</p><p>开启调试模式：</p><pre class="language-shell" data-language="shell"><code class="language-shell">vim .flaskenvFLASK_ENV&#x3D;development</code></pre><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><p>Web的核心功能，这个后面经常用，有个印象即可。</p><h3 id="Variable-Rules"><a href="#Variable-Rules" class="headerlink" title="Variable Rules"></a>Variable Rules</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;username>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user_profile</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># show the user profile for that user</span>    <span class="token keyword">return</span> <span class="token string">'User %s'</span> <span class="token operator">%</span> escape<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post/&lt;int:post_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_post</span><span class="token punctuation">(</span>post_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># show the post with the given id, the id is an integer</span>    <span class="token keyword">return</span> <span class="token string">'Post %d'</span> <span class="token operator">%</span> post_id<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/path/&lt;path:subpath>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_subpath</span><span class="token punctuation">(</span>subpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># show the subpath after /path/</span>    <span class="token keyword">return</span> <span class="token string">'Subpath %s'</span> <span class="token operator">%</span> escape<span class="token punctuation">(</span>subpath<span class="token punctuation">)</span></code></pre><p>注意用户输入可能包含恶意代码，所以最好用<code>escape</code>进行转义处理</p><h3 id="URL-Building"><a href="#URL-Building" class="headerlink" title="URL Building"></a>URL Building</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'index'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'login'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;username>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'&#123;&#125;\'s profile'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>escape<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> app<span class="token punctuation">.</span>test_request_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'profile'</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">'John Doe'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F;login&#x2F;login?next&#x3D;&#x2F;&#x2F;user&#x2F;John%20Doe</code></pre><h3 id="Redirects-and-Errors"><a href="#Redirects-and-Errors" class="headerlink" title="Redirects and Errors"></a>Redirects and Errors</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> abort<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    abort<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span>    this_is_never_executed<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page_not_found</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'page_not_found.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">404</span></code></pre><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    error <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> valid_login<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> log_the_user_in<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            error <span class="token operator">=</span> <span class="token string">'Invalid username/password'</span>    <span class="token comment"># the code below is executed if the request method</span>    <span class="token comment"># was GET or the credentials were invalid</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> error<span class="token operator">=</span>error<span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">searchword <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'the_file'</span><span class="token punctuation">]</span>        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'/var/www/uploads/'</span> <span class="token operator">+</span> secure_filename<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><h4 id="return-string"><a href="#return-string" class="headerlink" title="return string"></a>return string</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">return</span> <span class="token string">'hello world'</span></code></pre><h4 id="rerun-html"><a href="#rerun-html" class="headerlink" title="rerun html"></a>rerun html</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">return</span> <span class="token string">'&lt;hr>Hello World&lt;/hr>'</span></code></pre><h4 id="render-template"><a href="#render-template" class="headerlink" title="render template"></a>render template</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'error.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token comment"># or</span>resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">'error.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Something'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A value'</span><span class="token keyword">return</span> resp</code></pre><h4 id="return-json"><a href="#return-json" class="headerlink" title="return json"></a>return json</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/me"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">me_api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> get_current_user<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>        <span class="token string">"theme"</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>theme<span class="token punctuation">,</span>        <span class="token string">"image"</span><span class="token punctuation">:</span> url_for<span class="token punctuation">(</span><span class="token string">"user_image"</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>user<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">users_api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    users <span class="token operator">=</span> get_all_users<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">[</span>user<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>这边为了简单，使用<code>Sqlite</code></p><h3 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask-sqlalchemy"></a>flask-sqlalchemy</h3><p>为了简化数据库操作，我们将使用 <a href="https://www.sqlalchemy.org/">SQLAlchemy</a>——一个 Python 数据库工具（ORM，即对象关系映射）。借助 <code>SQLAlchemy</code>，你可以通过定义 Python 类来表示数据库里的一张表（类属性表示表中的字段 / 列），通过对这个类进行各种操作来代替写 SQL 语句。</p><p>Flask 有大量的第三方扩展，这些扩展可以简化和第三方库的集成工作。我们下面将使用一个叫做 <a href="http://flask-sqlalchemy.pocoo.org/2.3/">Flask-SQLAlchemy</a> 的官方扩展来集成 SQLAlchemy。</p><pre class="language-shell" data-language="shell"><code class="language-shell">pip3 install flask-sqlalchemy</code></pre><p>大部分扩展都需要执行一个“初始化”操作。你需要导入扩展类，实例化并传入 Flask 程序实例：</p><pre class="language-none"><code class="language-none">from flask_sqlalchemy import SQLAlchemy  # 导入扩展类app &#x3D; Flask(__name__)db &#x3D; SQLAlchemy(app)  # 初始化扩展，传入程序实例 app</code></pre><h3 id="数据库URL"><a href="#数据库URL" class="headerlink" title="数据库URL"></a>数据库URL</h3><p>为了设置 Flask、扩展或是我们程序本身的一些行为，我们需要设置和定义一些配置变量</p><p><a href="https://flask.palletsprojects.com/en/1.1.x/config/">Flask文档配置页面</a></p><p> <a href="http://flask-sqlalchemy.pocoo.org/2.1/config/">Flask-SQLAlchemy 文档的配置页面</a></p><ul><li><code>sqlite:////tmp/test.db</code></li><li><code>mysql://username:password@server/db</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyWIN <span class="token operator">=</span> sys<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'win'</span><span class="token punctuation">)</span><span class="token keyword">if</span> WIN<span class="token punctuation">:</span>  <span class="token comment"># 如果是 Windows 系统，使用三个斜线</span>    prefix <span class="token operator">=</span> <span class="token string">'sqlite:///'</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 否则使用四个斜线</span>    prefix <span class="token operator">=</span> <span class="token string">'sqlite:////'</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> prefix <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>root_path<span class="token punctuation">,</span> <span class="token string">'data.db'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 关闭对模型修改的监控</span><span class="token comment"># 在扩展类实例化前加载配置</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span></code></pre><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>我们这边就只有两个模型，一个用户模型，一个代办项目模型</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">,</span> UserMixin<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 表名将会是 user</span>    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password_hash <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'todo_item'</span> <span class="token comment"># 表名将会是 todo_item</span>    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 主键</span>    title <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 标题</span>    descs <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 描述</span></code></pre><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><p>注册命令，便于我们通过<strong>CLI</strong>对程序进行一些额外的数据处理，比如数据库建表，脚本初始化等</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 注册为命令</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--drop'</span><span class="token punctuation">,</span> is_flag<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Create after drop.'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置选项</span><span class="token keyword">def</span> <span class="token function">initdb</span><span class="token punctuation">(</span>drop<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Initialize the database."""</span>    <span class="token keyword">if</span> drop<span class="token punctuation">:</span>  <span class="token comment"># 判断是否输入了选项</span>        db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'Initialized database.'</span><span class="token punctuation">)</span>  <span class="token comment"># 输出提示信息</span></code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">flask initdb # 创建数据库flask initdb --drop # 清空数据库</code></pre><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">import</span> User<span class="token punctuation">,</span> TodoItem  <span class="token comment"># 导入模型类</span><span class="token operator">>></span><span class="token operator">></span> user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'wjc'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个 User 记录</span><span class="token operator">>></span><span class="token operator">></span> ti1 <span class="token operator">=</span> TodoItem<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'study'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个 TodoItem 记录</span><span class="token operator">>></span><span class="token operator">></span> ti2 <span class="token operator">=</span> TodoItem<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'game'</span><span class="token punctuation">)</span>  <span class="token comment"># 再创建一个 TodoItem 记录</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token comment"># 把新创建的记录添加到数据库会话</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ti1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ti2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 提交数据库会话，只需要在最后调用一次即可</span></code></pre><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><pre class="language-shell" data-language="shell"><code class="language-shell">&lt;模型类&gt;.query.&lt;过滤方法（可选）&gt;.&lt;查询方法&gt;</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> app <span class="token keyword">import</span> TodoItem  <span class="token comment"># 导入模型类</span><span class="token operator">>></span><span class="token operator">></span> todoItem <span class="token operator">=</span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取 Movie 模型的第一个记录（返回模型类实例）</span><span class="token operator">>></span><span class="token operator">></span> todoItem<span class="token punctuation">.</span>title  <span class="token comment"># 对返回的模型类实例调用属性即可获取记录的各字段数据</span><span class="token string">'study'</span><span class="token operator">>></span><span class="token operator">></span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取 TodoItem 模型的所有记录，返回包含多个模型类实例的列表</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>TodoItem <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>TodoItem <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取 Movie 模型所有记录的数量</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 获取主键值为 1 的记录</span><span class="token operator">&lt;</span>TodoItem <span class="token number">1</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'game'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取 title 字段值为 game 的记录</span><span class="token operator">&lt;</span>TodoItem <span class="token number">2</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>TodoItem<span class="token punctuation">.</span>title<span class="token operator">==</span><span class="token string">'game'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等同于上面的查询，但使用不同的过滤方法</span><span class="token operator">&lt;</span>TodoItem <span class="token number">2</span><span class="token operator">></span></code></pre><p><a href="https://docs.sqlalchemy.org/en/14/orm/query.html">sqlalchemy query</a></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> todoItem <span class="token operator">=</span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> todoItem<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'play ball'</span>  <span class="token comment"># 直接对实例属性赋予新的值即可</span><span class="token operator">>></span><span class="token operator">></span> todoItem<span class="token punctuation">.</span>descs <span class="token operator">=</span> <span class="token string">'玩球'</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 注意仍然需要调用这一行来提交改动</span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> todoItem <span class="token operator">=</span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>todoItem<span class="token punctuation">)</span>  <span class="token comment"># 使用 db.session.delete() 方法删除记录，传入模型实例</span><span class="token operator">>></span><span class="token operator">></span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 提交改动</span></code></pre><h3 id="Flask-Marshmallow"><a href="#Flask-Marshmallow" class="headerlink" title="Flask Marshmallow"></a>Flask Marshmallow</h3><p>因为<code>sqlalchemy</code>查询出来的数据不能直接序列化，所以一般要转成<code>dict</code>，这边引入<a href="https://flask-marshmallow.readthedocs.io/en/latest/">flask-marshmallow</a>来处理</p><pre class="language-shell" data-language="shell"><code class="language-shell">pip3 install  marshmallow-sqlalchemypip3 install flask-marshmallow</code></pre><p>引入</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_marshmallow <span class="token keyword">import</span> Marshmallowapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>ma <span class="token operator">=</span> Marshmallow<span class="token punctuation">(</span>app<span class="token punctuation">)</span></code></pre><p>定义</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TodoItemSchema</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span>SQLAlchemyAutoSchema<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> TodoItem</code></pre><p>使用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/todoItems'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    todoItems <span class="token operator">=</span> TodoItem<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    todoitems_schema <span class="token operator">=</span> TodoItemSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>result <span class="token operator">=</span> todoitems_schema<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>todoItems<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><h3 id="密码存储"><a href="#密码存储" class="headerlink" title="密码存储"></a>密码存储</h3><p><code>Flask</code> 的依赖 <code>Werkzeug</code> 内置了用于生成和验证密码散列值的函数，<code>werkzeug.security.generate_password_hash()</code> 用来为给定的密码生成密码散列值，而 <code>werkzeug.security.check_password_hash()</code> 则用来检查给定的散列值和密码是否对应</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>security <span class="token keyword">import</span> generate_password_hash<span class="token punctuation">,</span> check_password_hash<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 用户名</span>    password_hash <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 密码散列值</span>    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 用来设置密码的方法，接受密码作为参数</span>        self<span class="token punctuation">.</span>password_hash <span class="token operator">=</span> generate_password_hash<span class="token punctuation">(</span>password<span class="token punctuation">)</span>  <span class="token comment"># 将生成的密码保持到对应字段</span>    <span class="token keyword">def</span> <span class="token function">validate_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 用于验证密码的方法，接受密码作为参数</span>        <span class="token keyword">return</span> check_password_hash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>password_hash<span class="token punctuation">,</span> password<span class="token punctuation">)</span>  <span class="token comment"># 返回布尔值</span></code></pre><h3 id="flask-jwt-extended"><a href="#flask-jwt-extended" class="headerlink" title="flask-jwt-extended"></a>flask-jwt-extended</h3><p><a href="https://flask-jwt-extended.readthedocs.io/en/stable/">flask-jwt-extended</a></p><pre class="language-shell" data-language="shell"><code class="language-shell">pip3 install flask-jwt-extended</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask_jwt_extended <span class="token keyword">import</span> <span class="token punctuation">(</span>    create_access_token<span class="token punctuation">,</span>    jwt_required<span class="token punctuation">,</span>    get_jwt_identity<span class="token punctuation">)</span><span class="token comment"># 创建toekn</span>access_token <span class="token operator">=</span> create_access_token<span class="token punctuation">(</span>identity<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token comment"># 获取当前用户</span>current_user_name <span class="token operator">=</span> get_jwt_identity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 装饰器拦截接口</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/todoItem'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@jwt_required</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    todoItem <span class="token operator">=</span> TodoItem<span class="token punctuation">(</span>title <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> descs <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'descs'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>todoItem<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> utils<span class="token punctuation">.</span>result<span class="token punctuation">(</span>msg<span class="token operator">=</span> <span class="token string">'Item added.'</span><span class="token punctuation">)</span></code></pre><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>代码结构调整，待定。。。</p><h2 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h2><p>待定</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/greyli/flask-tutorial">flask-tutorial</a></p><p><a href="https://flask.palletsprojects.com/en/1.1.x/">flask 1.1</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="2020/11/13/linux/soft/docker/"/>
      <url>2020/11/13/linux/soft/docker/</url>
      
        <content type="html"><![CDATA[<p>Docker是一个开源的<strong>容器引擎</strong>，它可以帮助我们更快地交付应用。Docker可将应用程序和基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用Docker，可更快地打包、测试以及部署应用程序，并可<strong>减少从编写到部署运行代码的周期</strong>。</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>官网有详细的安装教程，然后配置下加速器即可，我这边使用<a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">阿里云的<code>docker</code>镜像加速器</a>。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 查询镜像docker search nginx# 下载镜像docker pull nginx# 列出镜像docker imagesdocker images javadocker images java:8docker images --digestsdocker images --filter &quot;dangling&#x3D;true&quot;   # 展示虚悬镜像# 删除本地镜像docker rmi hello-worlddocker rmi -f $(docker images)# 保存镜像docker save busybox &gt; busybox.tardocker save --output busybox.tar busybox# 加载镜像docker load &lt; busybox.tar.gzdocker load --input fedora.tar# 构建镜像docker build [OPTIONS] PATH | URL | -</code></pre><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><h5 id="新建并启动容器-重要"><a href="#新建并启动容器-重要" class="headerlink" title="新建并启动容器[重要]"></a>新建并启动容器[重要]</h5><p>使用以下<code>docker run</code> 命令即可新建并启动一个容器。该命令是我们最常用的命令了，它有很多选项，下面笔者列举一些常用的选项。</p><p>① -d选项：表示后台运行</p><p>② -P选项：随机端口映射</p><p>③ -p选项：指定端口映射，有以下四种格式。</p><p><code>ip:hostPort:containerPort</code></p><p><code>ip::containerPort</code></p><p><code>hostPort:containerPort</code></p><p><code>containerPort</code></p><p>④ –network选项：指定网络模式，该选项有以下可选参数：</p><p><code>–network=bridge</code>： 默认选项，表示连接到默认的网桥。</p><p><code>–network=host</code>：容器使用宿主机的网络。</p><p><code>–network=container:NAME_or_ID</code>：告诉Docker让新建的容器使用已有容器的网络配置。</p><p><code>–network=none</code>：不配置该容器的网络，用户可自定义网络配置。</p><p>示例1：</p><pre class="language-shell" data-language="shell"><code class="language-shell">docker run java &#x2F;bin&#x2F;echo &#39;Hello World&#39;</code></pre><p>这样终端会打印<code>Hello World</code>的字样，跟在本地直接执行<code>/bin/echo &#39;Hello World&#39;</code> 一样。</p><p>示例2：</p><pre class="language-shell" data-language="shell"><code class="language-shell">docker run -d -p 91:80 nginx</code></pre><p>这样就能启动一个<code>Nginx</code>容器。在本例中，我们为<code>docker run</code>添加了两个参数，含义如下：</p><pre class="language-shell" data-language="shell"><code class="language-shell">-d                           # 后台运行-p 宿主机端口:容器端口         # 开放容器端口到宿主机端口</code></pre><p>访问<a href="http://docker宿主机ip:91/">http://Docker宿主机IP:91/</a> </p><p><strong>TIPS</strong></p><p>需要注意的是，使用docker run命令创建容器时，会先检查本地是否存在指定镜像。如果本地不存在该名称的镜像，Docker就会自动从Docker Hub下载镜像并启动一个Docker容器。</p><h5 id="列出容器-重要"><a href="#列出容器-重要" class="headerlink" title="列出容器[重要]"></a>列出容器[重要]</h5><p>使用<code>docker ps</code> 命令即可列出运行中的容器。执行该命令后，可看到类似于如下的表格。</p><pre class="language-none"><code class="language-none">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES784fd3b294d7        nginx               &quot;nginx -g &#39;daemon off&quot;   20 minutes ago      Up 2 seconds        443&#x2F;tcp, 0.0.0.0:91-&gt;80&#x2F;tcp   backstabbing_archimedes</code></pre><p>如需列出所有容器（包括已停止的容器），可使用-a参数。</p><p>该表格包含了七列，含义如下：</p><p>① CONTAINER_ID：表示容器ID。</p><p>② IMAGE：表示镜像名称。</p><p>③ COMMAND：表示启动容器时运行的命令。</p><p>④ CREATED：表示容器的创建时间。</p><p>⑤ STATUS：表示容器运行的状态。Up表示运行中，Exited表示已停止。</p><p>⑥ PORTS：表示容器对外的端口号。</p><p>⑦ NAMES：表示容器名称。该名称默认由Docker自动生成，也可使用docker run命令的–name选项自行指定。</p><p>命令格式：</p><pre class="language-shell" data-language="shell"><code class="language-shell">docker ps [OPTIONS]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--all, -a</code></td><td align="left"><code>false</code></td><td align="left">列出所有容器，包括未运行的容器，默认只展示运行的容器</td></tr><tr><td align="left"><code>--filter, -f</code></td><td align="left"></td><td align="left">根据条件过滤显示内容</td></tr><tr><td align="left"><code>--format</code></td><td align="left"></td><td align="left">通过Go语言模板文件展示镜像</td></tr><tr><td align="left"><code>--last, -n</code></td><td align="left"><code>-1</code></td><td align="left">显示最近创建n个容器（包含所有状态）</td></tr><tr><td align="left"><code>--latest, -l</code></td><td align="left"><code>false</code></td><td align="left">显示最近创建的容器（包含所有状态）</td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left"><code>false</code></td><td align="left">不截断输出</td></tr><tr><td align="left"><code>--quiet, -q</code></td><td align="left"><code>false</code></td><td align="left">静默模式，只展示容器的编号</td></tr><tr><td align="left"><code>--size, -s</code></td><td align="left"><code>false</code></td><td align="left">显示总文件大小</td></tr></tbody></table><p>示例：</p><pre class="language-none"><code class="language-none">docker ps -n 5docker ps -a -q</code></pre><h5 id="停止容器-重要"><a href="#停止容器-重要" class="headerlink" title="停止容器[重要]"></a>停止容器[重要]</h5><p>使用<code>docker stop</code> 命令，即可停止容器。</p><p>命令格式：</p><pre class="language-none"><code class="language-none">docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--time, -t</code></td><td align="left"><code>10</code></td><td align="left">强制杀死容器前等待的时间，单位是秒</td></tr></tbody></table><p>示例：</p><pre class="language-none"><code class="language-none">docker stop 784fd3b294d7</code></pre><p>其中<code>784fd3b294d7</code> 是容器ID，当然也可使用<code>docker stop 容器名称</code> 来停止指定容器。</p><h5 id="强制停止容器-重要"><a href="#强制停止容器-重要" class="headerlink" title="强制停止容器[重要]"></a>强制停止容器[重要]</h5><p>可使用<code>docker kill</code> 命令停止一个或更多运行着的容器。</p><p>命令格式：</p><pre class="language-none"><code class="language-none">docker kill [OPTIONS] CONTAINER [CONTAINER...]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--signal, -s</code></td><td align="left"><code>KILL</code></td><td align="left">向容器发送一个信号</td></tr></tbody></table><p>例如：</p><pre class="language-none"><code class="language-none">docker kill 784fd3b294d7</code></pre><h5 id="启动已停止的容器-重要"><a href="#启动已停止的容器-重要" class="headerlink" title="启动已停止的容器[重要]"></a>启动已停止的容器[重要]</h5><p>使用<code>docker run</code> 命令，即可新建并启动一个容器。对于已停止的容器，可使用<code>docker start</code> 命令来启动。</p><p>命令格式：</p><pre class="language-none"><code class="language-none">docker start [OPTIONS] CONTAINER [CONTAINER...]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--attach, -a</code></td><td align="left"><code>false</code></td><td align="left">连接<code>STDOUT/STDERR</code>并转发信号</td></tr><tr><td align="left"><code>--checkpoint</code></td><td align="left"></td><td align="left">从该检查点还原</td></tr><tr><td align="left"><code>--checkpoint-dir</code></td><td align="left"></td><td align="left">使用自定义的检查点存储目录</td></tr><tr><td align="left"><code>--detach-keys</code></td><td align="left"></td><td align="left">覆盖断开容器的关键顺序</td></tr><tr><td align="left"><code>--interactive, -i</code></td><td align="left"><code>false</code></td><td align="left">连接容器的<code>STDIN</code></td></tr></tbody></table><p>例如：</p><pre class="language-none"><code class="language-none">docker start 784fd3b294d7</code></pre><h5 id="重启容器-重要"><a href="#重启容器-重要" class="headerlink" title="重启容器[重要]"></a>重启容器[重要]</h5><p>可使用<code>docker restart</code> 命令来重启容器。该命令实际上是先执行了<code>docker stop</code> 命令，然后执行了<code>docker start</code> 命令。</p><p>命令格式：</p><pre class="language-none"><code class="language-none">docker restart [OPTIONS] CONTAINER [CONTAINER...]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--time, -t</code></td><td align="left"><code>10</code></td><td align="left">关闭容器前等待的时间，单位是秒</td></tr></tbody></table><h5 id="进入容器-重要"><a href="#进入容器-重要" class="headerlink" title="进入容器[重要]"></a>进入容器[重要]</h5><p>某场景下，我们可能需要进入运行中的容器。</p><p>① 使用<code>docker attach</code> 命令进入容器。</p><p>例如：</p><pre class="language-none"><code class="language-none">docker attach 784fd3b294d7</code></pre><p>很多场景下，使用<code>docker attach</code> 命令并不方便。当多个窗口同时attach到同一个容器时，所有窗口都会同步显示。同理，如果某个窗口发生阻塞，其他窗口也无法执行操作。</p><p>② 使用<code>nsenter</code> 进入容器</p><p><code>nsenter</code>工具包含在<code>util-linux 2.23</code>或更高版本中。为了连接到容器，我们需要找到容器第一个进程的<code>PID</code>，可通过以下命令获取：</p><pre class="language-none"><code class="language-none">docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; $CONTAINER_ID</code></pre><p>获得<code>PID</code>后，就可使用<code>nsenter</code>命令进入容器了：</p><pre class="language-none"><code class="language-none">nsenter --target &quot;$PID&quot; --mount --uts --ipc --net --pid</code></pre><p>下面给出一个完整的例子：</p><pre class="language-none"><code class="language-none">[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES784fd3b294d7        nginx               &quot;nginx -g &#39;daemon off&quot;   55 minutes ago      Up 3 minutes        443&#x2F;tcp, 0.0.0.0:91-&gt;80&#x2F;tcp   backstabbing_archimedes[root@localhost ~]# docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; 784fd3b294d795492[root@localhost ~]# nsenter --target 95492 --mount --uts --ipc --net --pidroot@784fd3b294d7:&#x2F;#</code></pre><p>读者也可将以上两条命令封装成一个Shell，从而简化进入容器的过程。</p><p>③ docker exec</p><pre class="language-none"><code class="language-none">docker exec -it 容器id &#x2F;bin&#x2F;bash</code></pre><h5 id="删除容器-重要"><a href="#删除容器-重要" class="headerlink" title="删除容器[重要]"></a>删除容器[重要]</h5><p>使用<code>docker rm</code> 命令即可删除指定容器。</p><p>命令格式</p><pre class="language-none"><code class="language-none">docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--force, -f</code></td><td align="left"><code>false</code></td><td align="left">通过<code>SIGKILL</code>信号强制删除正在运行中的容器</td></tr><tr><td align="left"><code>--link, -l</code></td><td align="left"><code>false</code></td><td align="left">删除容器间的网络连接</td></tr><tr><td align="left"><code>--volumes, -v</code></td><td align="left"><code>false</code></td><td align="left">删除与容器关联的卷</td></tr></tbody></table><p>例1：删除指定容器。</p><pre class="language-none"><code class="language-none">docker rm 784fd3b294d7</code></pre><p>该命令只能删除已停止的容器，如需删除正在运行的容器，可使用-f参数。</p><p>例2：删除所有的容器。</p><pre class="language-none"><code class="language-none">docker rm -f $(docker ps -a -q)</code></pre><h5 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h5><p>将容器导出成一个压缩包文件。</p><p>命令格式：</p><pre class="language-none"><code class="language-none">docker export [OPTIONS] CONTAINER</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--output, -o</code></td><td align="left"></td><td align="left">将内容写到文件而非<code>STDOUT</code></td></tr></tbody></table><p>示例：</p><pre class="language-none"><code class="language-none">docker export red_panda &gt; latest.tardocker export --output&#x3D;&quot;latest.tar&quot; red_panda</code></pre><h5 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h5><p>使用<code>docker import</code> 命令即可从归档文件导入内容并创建镜像。</p><p>命令格式：</p><pre class="language-none"><code class="language-none">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code></pre><p>参数：</p><table><thead><tr><th align="left">Name, shorthand</th><th align="left">Default</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>--change, -c</code></td><td align="left"></td><td align="left">将<code>Dockerfile</code>指令应用到创建的镜像</td></tr><tr><td align="left"><code>--message, -m</code></td><td align="left"></td><td align="left">为导入的镜像设置提交信息</td></tr></tbody></table><p>示例：</p><pre class="language-none"><code class="language-none">docker import nginx2.tar nginx</code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><h5 id="ADD-复制文件"><a href="#ADD-复制文件" class="headerlink" title="ADD 复制文件"></a>ADD 复制文件</h5><p>ADD复制文件</p><p>格式为：</p><ul><li><code>ADD &lt;src&gt;... &lt;dest&gt;</code></li><li><code>ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p>从<code>src</code>目录复制文件到容器的<code>dest</code>。其中<code>src</code>可以是<code>Dockerfile</code>所在目录的相对路径，也可以是一个URL，还可以是一个压缩包。</p><p>除了要复制解压文件，一般不建议使用，使用<code>RUN</code>跟<code>COPY</code>命令就可以很好替代。</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ADD microservice-discovery-eureka-0.0.1-SNAPSHOT.jar app.jar</code></pre><h5 id="ARG-设置构建参数"><a href="#ARG-设置构建参数" class="headerlink" title="ARG 设置构建参数"></a>ARG 设置构建参数</h5><p>设置构建参数，类似于<code>ENV</code>。和<code>ENV</code>不同的是，<code>ARG</code>设置的是构建时的环境变量，在容器运行时是不会存在这些变量的。</p><p>格式为：</p><ul><li><code>ARG &lt;name&gt;[=&lt;default value&gt;]</code></li></ul><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ARG user1&#x3D;someuser</code></pre><h5 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h5><p>用于为执行容器提供默认值。每个<code>Dockerfile</code>只有一个<code>CMD</code>命令，如果指定了多个<code>CMD</code>命令，那么只有最后一条会被执行，如果启动容器的时候指定了运行的命令，则会覆盖掉<code>CMD</code>指定的命令。</p><p>支持三种格式：</p><p><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> (推荐使用，会解析成json数组，所以要记得要用<strong>双引号</strong>)</p><p><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (为<code>ENTRYPOINT</code>指令提供预设参数)</p><p><code>CMD command param1 param2</code> (在shell中执行)</p><p>示例：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD echo &quot;This is a test.&quot; | wc -</code></pre><h5 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h5><p>复制文件，格式为：</p><ul><li><code>COPY &lt;src&gt;... &lt;dest&gt;</code></li><li><code>COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p>复制本地端的<code>src</code>到容器的<code>dest</code>。<code>COPY</code>指令和<code>ADD</code>指令类似，<code>COPY</code>不支持URL和压缩包。</p><h5 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h5><p>格式为：</p><ul><li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li><li><code>ENTRYPOINT command param1 param2</code></li></ul><p><code>ENTRYPOINT</code>和<code>CMD</code>指令的目的一样，都是指定<code>Docker</code>容器启动时执行的命令，可多次设置，但只有最后一个有效。<code>ENTRYPOINT</code>不可被重写覆盖。</p><p><code>ENTRYPOINT</code>、<code>CMD</code>区别：<a href="http://blog.csdn.net/newjueqi/article/details/51355510">http://blog.csdn.net/newjueqi/article/details/51355510</a></p><h5 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h5><p>用于设置环境变量，格式为：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key&gt;=&lt;value&gt; ...</code></li></ul><p>示例：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV JAVA_HOME &#x2F;path&#x2F;to&#x2F;java</code></pre><h5 id="EXPOSE-声明暴露的端口"><a href="#EXPOSE-声明暴露的端口" class="headerlink" title="EXPOSE 声明暴露的端口"></a>EXPOSE 声明暴露的端口</h5><p>用于声明在运行时容器提供服务的端口，格式为：</p><ul><li><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code></li></ul><p>需要注意的是，这只是一个声明，运行时并不会因为该声明就打开相应端口。该指令的作用主要是帮助镜像使用者理解该镜像服务的守护端口；其次是当运行时使用随机映射时，会自动映射<code>EXPOSE</code>的端口。示例：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># 声明暴露一个端口示例EXPOSE port1# 相应的运行容器使用的命令docker run -p port1 image# 也可使用-P选项启动docker run -P image# 声明暴露多个端口示例EXPOSE port1 port2 port3# 相应的运行容器使用的命令docker run -p port1 -p port2 -p port3 image# 也可指定需要映射到宿主机器上的端口号  docker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image</code></pre><h5 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h5><p>指定基础镜像，<code>FROM</code>指令有点像<code>Java</code>里面的<code>extend</code>关键字。需要注意的是，<code>FROM</code>指令必须指定且需要写在其他指令之前。<code>FROM</code>指令后的所有指令都依赖于该指令所指定的镜像。</p><p>支持三种格式：</p><ul><li><code>FROM &lt;image&gt;</code></li><li><code>FROM &lt;image&gt;:&lt;tag&gt;</code></li><li><code>FROM &lt;image&gt;@&lt;digest&gt;</code></li></ul><h5 id="LABEL-为镜像添加元数据"><a href="#LABEL-为镜像添加元数据" class="headerlink" title="LABEL 为镜像添加元数据"></a>LABEL 为镜像添加元数据</h5><p>为镜像添加元数据。</p><p>格式为：</p><ul><li><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></li></ul><p>示例：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">LABEL &quot;com.example.vendor&quot;&#x3D;&quot;ACME Incorporated&quot;LABEL com.example.label-with-value&#x3D;&quot;foo&quot;LABEL version&#x3D;&quot;1.0&quot;LABEL description&#x3D;&quot;This text illustrates \that label-values can span multiple lines.&quot;</code></pre><h5 id="MAINTAINER-指定维护者的信息（已过时）"><a href="#MAINTAINER-指定维护者的信息（已过时）" class="headerlink" title="MAINTAINER 指定维护者的信息（已过时）"></a>MAINTAINER 指定维护者的信息（已过时）</h5><p>MAINTAINER指令用于指定维护者的信息，用于为<code>Dockerfile</code>署名。</p><p>格式为：</p><ul><li><code>MAINTAINER &lt;name&gt;</code></li></ul><p>示例：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">MAINTAINER 周立&lt;eacdy0000@126.com&gt;</code></pre><p>注：该指令已过时，建议使用如下形式：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">LABEL maintainer&#x3D;&quot;SvenDowideit@home.org.au&quot;</code></pre><h5 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h5><p>该指令支持两种格式：</p><ul><li><code>RUN &lt;command&gt;</code></li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li></ul><p><code>RUN &lt;command&gt;</code> 在<code>shell</code>终端中运行，在<code>Linux</code>中默认是<code>/bin/sh -c</code> ，在<code>Windows</code>中是 <code>cmd /s /c</code>，使用这种格式，就像直接在命令行中输入命令一样。<br><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> 使用exec执行，这种方式类似于函数调用。指定其他终端可以通过该方式操作，例如：<code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code> ，该方式必须使用双引号[“]而不能使用单引号[‘]，因为该方式会被转换成一个<code>JSON</code> 数组。</p><h5 id="USER-设置用户"><a href="#USER-设置用户" class="headerlink" title="USER 设置用户"></a>USER 设置用户</h5><p>该指令用于设置启动镜像时的用户或者<code>UID</code>，写在该指令后的<code>RUN</code>、<code>CMD</code>以及<code>ENTRYPOINT</code>指令都将使用该用户执行命令。</p><p>格式为：</p><ul><li><code>USER 用户名</code></li></ul><p>示例：</p><pre class="language-none"><code class="language-none">USER daemon</code></pre><h5 id="VOLUME-指定挂载点"><a href="#VOLUME-指定挂载点" class="headerlink" title="VOLUME 指定挂载点"></a>VOLUME 指定挂载点</h5><p>该指令使容器中的一个目录具有持久化存储的功能，该目录可被容器本身使用，也可共享给其他容器。当容器中的应用有持久化数据的需求时可以在<code>Dockerfile</code>中使用该指令。格式为：</p><ul><li><code>VOLUME [&quot;/data&quot;]</code></li></ul><p>示例：</p><pre class="language-none"><code class="language-none">VOLUME &#x2F;data</code></pre><p>使用示例：</p><pre class="language-none"><code class="language-none">FROM nginxVOLUME &#x2F;tmp</code></pre><p>当该<code>Dockerfile</code>被构建成镜像后，<code>/tmp</code>目录中的数据即使容器关闭也依然存在。如果另一个容器也有持久化的需求，并且想使用以上容器<code>/tmp</code>目录中的内容，则可使用如下命令启动容器：</p><pre class="language-none"><code class="language-none">docker run -volume-from 容器ID 镜像名称  # 容器ID是di一个容器的ID，镜像是第二个容器所使用的镜像。</code></pre><h5 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h5><p>格式为：</p><ul><li><code>WORKDIR /path/to/workdir</code></li></ul><p>切换目录指令，类似于<code>cd</code>命令，写在该指令后的<code>RUN</code>，<code>CMD</code>以及<code>ENTRYPOINT</code>指令都将该目录作为当前目录，并执行相应的命令。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p><code>Dockerfile</code>还有一些其他的指令，例如<code>STOPSINGAL</code>、<code>HEALTHCHECK</code>、<code>SHELL</code>等。由于并不是很常用，本书不作赘述。有兴趣的读者可前往<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a> 扩展阅读。</p><p><strong>CMD/ENTRYPOINT/RUN区别</strong></p><p>参考：<a href="https://segmentfault.com/q/1010000000417103">https://segmentfault.com/q/1010000000417103</a></p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.docker.com/">Docker官方网站</a></p><p><a href="https://github.com/docker/docker">Docker GitHub</a></p><p><a href="https://yeasy.gitbook.io/docker_practice">Docker 入门到实践</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> soft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-design-in-4-minutes</title>
      <link href="2020/11/12/web/css/web-design-in-4-minutes/"/>
      <url>2020/11/12/web/css/web-design-in-4-minutes/</url>
      
        <content type="html"><![CDATA[<p>如何在4分钟内设计一个好看的页面，<a href="https://jgthms.com/web-design-in-4-minutes/">原文地址</a></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web-design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2d-web</title>
      <link href="2020/11/12/web/live2d/live2d-web/"/>
      <url>2020/11/12/web/live2d/live2d-web/</url>
      
        <content type="html"><![CDATA[<p>萌萌哒的看板娘，以下资源来源于互联网，最底下会给出相关链接，<a href="https://github.com/jianchengwang/live2d_models">github示例</a></p><a id="more"></a><hr><h3 id="使用方法-moc"><a href="#使用方法-moc" class="headerlink" title="使用方法  moc"></a>使用方法  moc</h3><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 进入hexo根目录cd hexo-dir# 安装hexo-helper-live2dnpm install --save hexo-helper-live2d# 创建目录live2d_modelsmkdir live2d_models# 把模型文件放进创建目录live2d_models，比如我这边下载的是index模型cd live2d_models &amp;&amp; wget index #重命名模型文件中的json文件，比如我下载的模型是index，所以model.json -&gt; index.model.jsoncd index mv model.json index.model.json# 修改配置文件vim hexo-dir&#x2F;_config.yml live2d:   enable: true # 是否开启live2d   scriptFrom: local # 脚本从本地引入   pluginRootPath: live2dw&#x2F; # 插件在站点上的根目录(相对路径)   pluginJsPath: lib&#x2F; # 脚本文件相对与插件根目录路径   pluginModelPath: assets&#x2F; # 模型文件相对与插件根目录路径   tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中   debug: false # 调试, 是否在控制台输出日志   model:       use: index # 填写放进live2d_models文件夹中的模型文件夹名字       scale: 1 # canvas 模型与canvas的缩放   display:       width: 150 # 宽度       height: 300 # 高度       position: left # 显示位置       hOffset: 0 #水平偏移       vOffset: -20 #垂直偏移   mobile:       show: true # 手机端是否显示       scale: 0.5 # 移动设备上的缩放</code></pre><h4 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h4><p>下载<a href="https://github.com/Dreamer-Paul/Pio">保罗的看板娘插件</a>，并上传到你的插件目录（一般为 <code>usr/plugins</code>）。进入你的网站后台，在顶部的“控制台”下找到“插件” -&gt; Pio -&gt; 启用。启用之后我们就可以开始设置啦！</p><p><strong>引用模型</strong></p><p>插件默认提供两种方式引用模型，一个是读取插件指定目录下的模型，还有一个是另外引用。对于新手，我们比较推荐放在插件目录的 <code>model</code> 文件夹下。只要你在本站下载模型，都已经为这个插件专门做过一定的优化处理啦。</p><p><strong>显示不全？</strong></p><p>待我们放好模型之后可能会发现，模型显示不太齐全。这是由于高宽度设置不正确导致的~ 由于插件默认的模型是 <code>Pio</code>，而其他模型的比例和它不同，所以我们就需要在插件目录下手动设置它的宽度和高度啦！这样我们的模型就能正常显示出来了！</p><p><strong>遮住内容？</strong></p><p>如果你用的主题默认在左侧有侧边栏，发现模型遮住了菜单，那么我们就可以在插件设置里面修改它的位置，这样就可以遮住你的内容啦！</p><p>更多介绍详见：<a href="https://paugram.com/coding/add-poster-girl-with-plugin.html">给你的博客增加动态看板娘</a></p><h4 id="EmLog"><a href="#EmLog" class="headerlink" title="EmLog"></a>EmLog</h4><p>详见广树的文章 - <a href="https://www.wikimoe.com/?post=76">博客通用版 Live2D 伊斯特瓦尔发布</a></p><h4 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h4><p>其他平台可以通过修改插件或是修改模板的方式引用看板娘。这里的方法适用于 WordPress、EMLog、Z-Blog 甚至是静态网站。</p><blockquote><p>保罗的 <a href="https://docs.paul.ren/pio">插件文档</a> 里已经提供了完整的独立版使用教程，你可以在不使用插件的情况下正常食用看板娘。以下方法仅简单引用了看板娘，但并不包含交互功能。</p></blockquote><p>下载 <a href="https://github.com/journey-ad/live2d_src">来自玩水大佬的封装</a> 项目，我们会在 <code>src/lib</code> 目录下得到一个 <code>live2d.min.js</code> 。这个就是核心啦！</p><p>然后在你的网页上添加一个 <code>canvas</code> 画布，一般放在 <code>footer.php</code> 即页尾文件里面。一般写成这样：</p><pre class="language-none"><code class="language-none">&lt;canvas id&#x3D;&quot;paul&quot; width&#x3D;&quot;280&quot; height&#x3D;&quot;250&quot;&gt;&lt;&#x2F;canvas&gt;</code></pre><p>其中 <code>id</code> 部分负责让脚本获得画布的位置，<code>width</code> 和 <code>height</code> 分别是宽度和高度，在这里设置你的模型宽高。</p><p>然后我们就需要引用这个 JS 文件啦！方法也很简单，你把这个文件放在合适的位置，或是用 CDN 引用皆可。</p><pre class="language-none"><code class="language-none">&lt;script src&#x3D;&quot;live2d.min.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre><blockquote><p>注意：要确认画布放在 <code>&lt;script&gt;</code> 的前面！</p></blockquote><p>接着我们再通过一段简单的代码来开始引用我们的模型：</p><pre class="language-none"><code class="language-none">&lt;script&gt;loadlive2d(&#39;paul&#39;, &#39;模型路径&#x2F;model.json&#39;);&lt;&#x2F;script&gt;</code></pre><p>这样我们的网站上，就显示出自己的看板娘啦！</p><p>细心的你肯定会发现，看板娘被放在了正常的位置显示了出来，而不是 “悬挂” 在页面的某个位置。我们通过添加一段简单的 CSS 就可以做到了！</p><pre class="language-none"><code class="language-none">#paul&#123;    left: 0;    bottom: 0;    z-index: 520; &#x2F;* 如果模型被遮住可以把它改的更大 *&#x2F;    position: fixed;    pointer-events: none; &#x2F;* 防止遮住鼠标点击页面其他内容 *&#x2F;&#125;</code></pre><p>于是我们网站上就有了自己的看板娘啦！</p><hr><h3 id="使用方法-moc3"><a href="#使用方法-moc3" class="headerlink" title="使用方法 moc3"></a>使用方法 moc3</h3><p>参考</p><p><a href="https://github.com/HCLonely/Live2dV3">https://github.com/HCLonely/Live2dV3</a></p><p><a href="https://github.com/Yukariin/AzurLaneL2DViewer">https://github.com/Yukariin/AzurLaneL2DViewer</a></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!------ 位置可自定义 ------></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Canvas<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> 99999999</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>L2dCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Pollyfill script --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/core-js-bundle@3.6.1/minified.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Live2DCubismCore script --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Build script --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>./assets/js/live2dv3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!------ 加载Live2d模型 | Load Live2d model ------></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> l2dv<span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    l2dv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">L2dViewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'L2dCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        modelHomePath<span class="token operator">:</span> <span class="token string">'./assets/model/moc3/'</span><span class="token punctuation">,</span>        <span class="token comment">// modelHomePath: 'https://cdn.jsdelivr.net/gh/alg-wiki/AzurLaneL2DViewer@gh-pages/assets/',</span>        model<span class="token operator">:</span> <span class="token string">'yichui_2'</span><span class="token punctuation">,</span>        <span class="token comment">// bgImg: 'https://cdn.jsdelivr.net/gh/alg-wiki/AzurLaneL2DViewer@gh-pages/assets/bg/bg_church_jp.png',</span>        bgImg<span class="token operator">:</span> <span class="token string">'./assets/image/bg/bg_1.png'</span><span class="token punctuation">,</span>        width<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>        height<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>        autoMotion<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token function-variable function">_finishedLoadModel</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> motionDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"motionDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           motionDiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          l2dv<span class="token punctuation">.</span><span class="token function">getMotions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span>k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> motionName <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>motionName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'motions/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              motionName <span class="token operator">=</span> motionName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'motions/'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            motionName <span class="token operator">=</span> motionName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.motion3.json'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> bt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bt<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> motionName<span class="token punctuation">;</span>             bt<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'btnGenericText'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bt<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                          <span class="token comment">//绑定点击事件</span>              l2dv<span class="token punctuation">.</span><span class="token function">startMotion</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            motionDiv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">_onTap</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 点击canvas触发事件</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><hr><table><thead><tr><th align="center">参数</th><th align="center">类型</th><th align="center">描述</th><th align="center">默认</th></tr></thead><tbody><tr><td align="center"><code>el</code></td><td align="center">[必需] DOM 对象或 jQuery 对象</td><td align="center">要挂载Live2d模型的元素, 支持DOM选择器和jQuery选择器，例：<code>document.getElementById(&#39;L2dCanvas&#39;)</code>或<code>document.querySelector(&#39;#L2dCanvas&#39;)</code>或<code>$(&#39;#L2dCanvas&#39;)</code></td><td align="center"><code>null</code></td></tr><tr><td align="center"><code>modelHomePath</code></td><td align="center">[必需] String</td><td align="center">模型根目录</td><td align="center"><code>null</code></td></tr><tr><td align="center"><code>model</code></td><td align="center">[必需] String</td><td align="center">初始显示模型</td><td align="center"><code>null</code></td></tr><tr><td align="center"><code>bgImg</code></td><td align="center">[可选] String</td><td align="center">Canvas背景图片，有图片的话，Canvas的宽高会等于背景图片宽高</td><td align="center"><code>null</code></td></tr><tr><td align="center"><code>width</code></td><td align="center">[可选] Number</td><td align="center">Canvas宽度，单位: <code>px</code></td><td align="center"><code>500</code></td></tr><tr><td align="center"><code>height</code></td><td align="center">[可选] Number</td><td align="center">Canvas高度，单位: <code>px</code></td><td align="center"><code>300</code></td></tr><tr><td align="center"><code>autoMotion</code></td><td align="center">[可选] Boolean</td><td align="center">是否自动随机触发Motion</td><td align="center"><code>true</code></td></tr><tr><td align="center"><code>_finishedLoadModel</code></td><td align="center">[可选] Function</td><td align="center">模型加载完回调函数</td><td align="center"><code>null</code></td></tr><tr><td align="center"><code>_onTap</code></td><td align="center">[可选] Function</td><td align="center">点击模型触发函数，为空的话会默认触发随机Motion</td><td align="center"><code>null</code></td></tr></tbody></table><hr><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// L2dViewer 对外暴露的方法</span><span class="token comment">// 获取模型信息</span><span class="token keyword">public</span> <span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LAppModel <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 加载模型</span><span class="token keyword">public</span> <span class="token function">loadModel</span><span class="token punctuation">(</span><span class="token parameter">modelName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 触发模型 motion</span><span class="token keyword">public</span> <span class="token function">startMotion</span><span class="token punctuation">(</span><span class="token parameter">motionName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取模型 motion</span><span class="token keyword">public</span> <span class="token function">getMotions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>any<span class="token punctuation">,</span>any<span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置模型背景</span><span class="token keyword">public</span> <span class="token function">setBgImg</span><span class="token punctuation">(</span><span class="token parameter">bgImg<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><hr><p>当然，你感兴趣的话，并且有一定的前端基础，建议自己构建 <strong>live2dv3.js</strong>，可以下载官方提供的<a href="https://www.live2d.com/download/cubism-sdk/">Live2d Web Sdk</a>，里面已经包含一个简单示例了，</p><p><strong>lappdefine.ts</strong>  定义基本的参数<br><strong>lappdelegate.ts</strong> 初始化,释放资源,事件绑定<br><strong>lapplive2dmanager.ts</strong> 模型的管理类,进行模型生成和废弃,事件的处理,模型切换.<br><strong>lappmodel.ts</strong> 模型类,定义模型的基本属性<br><strong>lappal.ts</strong> 读取文件,抽象文件数据(算是工具类)<br><strong>lappsprite.ts</strong> 动画精灵类,(有h5游戏开发应该了解)<br><strong>lapptexturemanager.ts</strong> 纹理管理类,进行图像读取和管理的类<br><strong>lappview.ts</strong> 视图类,生成模型的图像被lapplive2dmanager管理<br><strong>main.ts</strong> 主程序启动程序<br><strong>touchmanager.ts</strong> 事件的管理类(比如移动鼠标,点击鼠标,触摸屏触碰等)</p><p>简单修改下就可以了，也可以参照我的<a href="https://github.com/jianchengwang/todo-web/raw/master/live2d-web">demo代码</a></p><h3 id="模型预览"><a href="#模型预览" class="headerlink" title="模型预览"></a>模型预览</h3><h4 id="梦象网站资源-moc"><a href="#梦象网站资源-moc" class="headerlink" title="梦象网站资源 moc"></a>梦象网站资源 moc</h4><h5 id="茵蒂克丝-index"><a href="#茵蒂克丝-index" class="headerlink" title="茵蒂克丝 index"></a>茵蒂克丝 index</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/index.jpg" loading="lazy"></p><p>动漫《魔法禁书目录》中女主角。有着银色的长发、绿色的眼瞳、雪白的肌肤，年龄约十四五岁，却有着可爱的幼儿体型。</p><p>模型作者：未知<br>模型出处：网络搜集</p><hr><h5 id="尤莉-youri"><a href="#尤莉-youri" class="headerlink" title="尤莉 youri"></a>尤莉 youri</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/youri.jpg" loading="lazy"></p><p>尤莉是由 つくみず 创作的漫画《少女终末旅行》及其衍生作品中的登场角色。性格极度乐观，非常喜欢吃东西。</p><p>模型作者：罐装猫粮君<br>模型出处：<a href="https://www.bilibili.com/video/av17779694">【Live2D工房】Vol.1 Part2 尤 脸扁再来一份 《少女终末旅行》</a></p><hr><h5 id="雪未来-snow-miku"><a href="#雪未来-snow-miku" class="headerlink" title="雪未来 snow_miku"></a>雪未来 snow_miku</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/snow_miku.jpg" loading="lazy"></p><p>雪未来是 Crypton 旗下虚拟歌手初音未来的二次创作系列造型，民间有时称其为 “雪初音” 或 “雪 MIKU”。自 2010 年被确立为日本北海道札幌冰雪节的应援角色。自 2012 年起，每年会以网络征集投票的形式决定新的雪未来人物形象。</p><p>模型作者：未知<br>模型出处：网络搜集</p><p>推荐设置：</p><p>宽度：300<br>高度：300</p><hr><h5 id="凉风青叶-aoba"><a href="#凉风青叶-aoba" class="headerlink" title="凉风青叶 aoba"></a>凉风青叶 aoba</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/aoba.jpg" loading="lazy"></h5><p>来自 New Game! 的凉风青叶和你见面啦！</p><p>推荐设置：</p><p>高度：250<br>宽度：200</p><hr><h5 id="工作中的血小板-platelet"><a href="#工作中的血小板-platelet" class="headerlink" title="工作中的血小板 platelet"></a>工作中的血小板 platelet</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/platelet.jpg" loading="lazy"></p><p>模型作者：Neko_KK<br>模型出处：Live2DViewer 创意工坊</p><hr><h5 id="干物妹小埋-umaru"><a href="#干物妹小埋-umaru" class="headerlink" title="干物妹小埋 umaru"></a>干物妹小埋 umaru</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/umaru.jpg" loading="lazy"></p><p>模型作者：未知<br>模型出处：未知</p><p>推荐设置：</p><p>高度：300<br>宽度：100</p><h5 id="和泉纱雾-sagiri"><a href="#和泉纱雾-sagiri" class="headerlink" title="和泉纱雾 sagiri"></a>和泉纱雾 sagiri</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/sagiri.jpg" loading="lazy"></p><p>模型作者：oukaitou<br>模型出处：Live2DViewer 创意工坊</p><p>推荐设置：</p><p>高度：500<br>宽度：默认</p><h5 id="康娜-kanna"><a href="#康娜-kanna" class="headerlink" title="康娜 kanna"></a>康娜 kanna</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/kanna.jpg" loading="lazy"></p><p>模型作者：oukaitou<br>模型出处：Live2DViewer 创意工坊</p><hr><h5 id="时崎狂三-kurumi"><a href="#时崎狂三-kurumi" class="headerlink" title="时崎狂三 kurumi"></a>时崎狂三 kurumi</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/kurumi.jpg" loading="lazy"></p><p>模型作者：未知<br>模型出处：约会大作战手游官网</p><hr><h5 id="雷姆-rem"><a href="#雷姆-rem" class="headerlink" title="雷姆 rem"></a>雷姆 rem</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/rem.jpg" loading="lazy"></p><p>提取自 <a href="https://github.com/eeg1412/Live2dRem">广树的项目</a>。</p><p>推荐设置：</p><p>高度：275<br>宽度：230</p><p>高度：335<br>宽度：280</p><hr><h5 id="香风智乃-chino"><a href="#香风智乃-chino" class="headerlink" title="香风智乃 chino"></a>香风智乃 chino</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/chino.jpg" loading="lazy"></p><p>香风智乃，漫画《请问您今天要来点兔子吗？》中及其衍生作品中女主角之一。咖啡店 Rabbit House 老板的孙女，13 岁的初中生。身形娇小却意外地能干，店内杂务也几乎由她一手包办，个性冷静又沉默寡言，但其实是在人际交往上有点笨拙。</p><p>模型作者：Hernes_VR<br>模型出处：FaceRig 创意工坊</p><hr><h5 id="鹿目圆-madoka"><a href="#鹿目圆-madoka" class="headerlink" title="鹿目圆 madoka"></a>鹿目圆 madoka</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/madoka.jpg" loading="lazy"></p><p>鹿目圆是原创动画《魔法少女小圆》及其衍生作品中主角。就读于市立见泷原中学二年级的一位普通初中生。个头小巧可爱，性格温柔且为朋友着想。因为本身的潜质，而成为魔法少女。后成为神，消失在世界上。</p><p>模型作者：未知<br>模型出处：网络搜集</p><p>推荐设置：</p><p>高度：300<br>宽度：230</p><hr><h5 id="22-娘全身版"><a href="#22-娘全身版" class="headerlink" title="22 娘全身版"></a>22 娘全身版</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/22.jpg" loading="lazy"></p><p>22 娘是娱乐向弹幕视频站点 Bilibili 的吉祥物。阳光元气娘，火拼有精神。对人热情、热心，但有些冒失。</p><p>模型作者：未知<br>模型出处：网络搜集</p><p>推荐设置：</p><p>高度：400<br>宽度：150</p><hr><h5 id="涅普迪努-neptune"><a href="#涅普迪努-neptune" class="headerlink" title="涅普迪努 neptune"></a>涅普迪努 neptune</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/neptune.jpg" loading="lazy"></p><p>涅普迪努，又称 “涅普顿”。是《超次元游戏：海王星》等海王星系列游戏中紫色大陆 Planeptune 的守护女神。性格乐天、天真浪漫，很擅长调节气氛。有时会从女神的工作中翘班，经常懒懒的，但因为天生的性格原因，仍然受到周围人的欢迎。</p><p>模型作者：未知<br>模型出处：网络搜集</p><hr><h4 id="Eikanya提取-moc3"><a href="#Eikanya提取-moc3" class="headerlink" title="Eikanya提取 moc3"></a>Eikanya提取 moc3</h4><p>这个大佬提取了很多，所以这里只列出我喜欢的部分模型，<a href="https://jianchengwang.github.io/live2d_models/">在线预览</a></p><h5 id="yichui-2"><a href="#yichui-2" class="headerlink" title="yichui_2"></a>yichui_2</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/yichui_2.jpg" loading="lazy"></p><hr><h5 id="dujiaoshou-6"><a href="#dujiaoshou-6" class="headerlink" title="dujiaoshou_6"></a>dujiaoshou_6</h5><p><img src="https://github.com/jianchengwang/live2d_models/raw/main/_model_images/dujiaoshou_6.jpg" loading="lazy"></p><hr><h3 id="资源来源"><a href="#资源来源" class="headerlink" title="资源来源"></a>资源来源</h3><p><a href="https://www.live2d.com/zh-CHS/">Live2d官网</a></p><p><a href="https://mx.paugram.com/">梦象 Live2D 模型站</a></p><p><a href="https://github.com/Eikanya/Live2d-model">Eikanya/Live2d-model</a></p><p><a href="https://l2d.alg-wiki.com/">Azur Lane Live2D Viewer</a></p><p><a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> live2d </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas</title>
      <link href="2020/11/11/python/da/pandas/"/>
      <url>2020/11/11/python/da/pandas/</url>
      
        <content type="html"><![CDATA[<p> <a href="http://pandas.pydata.org/"><em>pandas</em></a> 是一种列存数据分析 API。它是用于处理和分析输入数据的强大工具，很多机器学习框架都支持将 <em>pandas</em> 数据结构作为输入。 虽然全方位介绍 <em>pandas</em> API 会占据很长篇幅，但它的核心概念非常简单，我们会在下文中进行说明。有关更完整的参考，请访问 <a href="http://pandas.pydata.org/pandas-docs/stable/index.html"><em>pandas</em> 文档网站</a>，其中包含丰富的文档和教程资源。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>首先安装一下 module，可以配置下pip源，或者 加参数<code>-i</code>提高下载速度</p><pre class="language-shell" data-language="shell"><code class="language-shell">mkdir ~&#x2F;.pipvim ~&#x2F;.pip&#x2F;pip.conf[global]index-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">pip3 install pandas -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simplepip3 install matplotlib -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple # 如果需要绘制图表</code></pre><p><em>pandas</em> 中的主要数据结构被实现为以下两类：</p><ul><li>**<code>DataFrame</code>**，您可以将它想象成一个关系型数据表格，其中包含多个行和已命名的列。</li><li>**<code>Series</code>**，它是单一列。<code>DataFrame</code> 中包含一个或多个 <code>Series</code>，每个 <code>Series</code> 均有一个名称。</li></ul><p>数据框架是用于数据操控的一种常用抽象实现形式。<a href="https://spark.apache.org/">Spark</a> 和 <a href="https://www.r-project.org/about.html">R</a> 中也有类似的实现。</p><p>创建<code>Series</code></p><pre class="language-python" data-language="python"><code class="language-python">city_names <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'San Francisco'</span><span class="token punctuation">,</span> <span class="token string">'San Jose'</span><span class="token punctuation">,</span> <span class="token string">'Sacramento'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>population <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">852469</span><span class="token punctuation">,</span> <span class="token number">1015785</span><span class="token punctuation">,</span> <span class="token number">485199</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>创建<code>DataFrame</code>，通过<code>Series</code></p><pre class="language-pyt" data-language="pyt"><code class="language-pyt">pd.DataFrame(&#123; &#39;City name&#39;: city_names, &#39;Population&#39;: population &#125;)</code></pre><p>更多时候，一般装载整个文件</p><pre class="language-python" data-language="python"><code class="language-python">california_housing_dataframe <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span></code></pre><p>当然，也可以通过复制表格内容</p><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_clipboard<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"some_data.csv"</span><span class="token punctuation">)</span></code></pre><p><code>DataFrame</code> 常用方法</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 显示统计信息</span>california_housing_dataframe<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 显示前几个记录</span>california_housing_dataframe<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 绘制图表 </span>california_housing_dataframe<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token string">'housing_median_age'</span><span class="token punctuation">)</span></code></pre><h2 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h2><p>您可以使用熟悉的 Python dict/list 指令访问 <code>DataFrame</code> 数据：</p><pre class="language-python" data-language="python"><code class="language-python">cities <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">'City name'</span><span class="token punctuation">:</span> city_names<span class="token punctuation">,</span> <span class="token string">'Population'</span><span class="token punctuation">:</span> population <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>cities<span class="token punctuation">[</span><span class="token string">'City name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cities<span class="token punctuation">[</span><span class="token string">'City name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>cities<span class="token punctuation">[</span><span class="token string">'City name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cities<span class="token punctuation">[</span><span class="token string">'City name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p> 此外，<strong>pandas</strong> 针对高级<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html">索引和选择</a>提供了极其丰富的 API（数量过多，此处无法逐一列出）。</p><h2 id="操控数据"><a href="#操控数据" class="headerlink" title="操控数据"></a>操控数据</h2><p>您可以向 <code>Series</code> 应用 Python 的基本运算指令。例如：</p><pre class="language-python" data-language="python"><code class="language-python">population <span class="token operator">/</span> <span class="token number">1000</span></code></pre><p><a href="http://www.numpy.org/">NumPy</a> 是一种用于进行科学计算的常用工具包。<em>pandas</em> <code>Series</code> 可用作大多数 NumPy 函数的参数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npnp<span class="token punctuation">.</span>log<span class="token punctuation">(</span>population<span class="token punctuation">)</span></code></pre><p>对于更复杂的单列转换，您可以使用 <code>Series.apply</code>。像 Python <a href="https://docs.python.org/2/library/functions.html#map">映射函数</a>一样，<code>Series.apply</code> 将以参数形式接受 <a href="https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions">lambda 函数</a>，而该函数会应用于每个值。</p><p>下面的示例创建了一个指明 <code>population</code> 是否超过 100 万的新 <code>Series</code>：</p><pre class="language-python" data-language="python"><code class="language-python">population<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> val<span class="token punctuation">:</span> val <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">)</span></code></pre><p><code>DataFrames</code> 的修改方式也非常简单。例如，以下代码向现有 <code>DataFrame</code> 添加了两个 <code>Series</code>：</p><pre class="language-python" data-language="python"><code class="language-python">cities<span class="token punctuation">[</span><span class="token string">'Area square miles'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">46.87</span><span class="token punctuation">,</span> <span class="token number">176.53</span><span class="token punctuation">,</span> <span class="token number">97.92</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cities<span class="token punctuation">[</span><span class="token string">'Population density'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cities<span class="token punctuation">[</span><span class="token string">'Population'</span><span class="token punctuation">]</span> <span class="token operator">/</span> cities<span class="token punctuation">[</span><span class="token string">'Area square miles'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cities<span class="token punctuation">)</span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><code>Series</code> 和 <code>DataFrame</code> 对象也定义了 <code>index</code> 属性，该属性会向每个 <code>Series</code> 项或 <code>DataFrame</code> 行赋一个标识符值。</p><p>默认情况下，在构造时，<em>pandas</em> 会赋可反映源数据顺序的索引值。索引值在创建后是稳定的；也就是说，它们不会因为数据重新排序而发生改变。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>city_names<span class="token punctuation">.</span>index<span class="token punctuation">)</span></code></pre><p>调用 <code>DataFrame.reindex</code> 以手动重新排列各行的顺序。例如，以下方式与按城市名称排序具有相同的效果：</p><pre class="language-python" data-language="python"><code class="language-python">cities<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>重建索引是一种随机排列 <code>DataFrame</code> 的绝佳方式。在下面的示例中，我们会取用类似数组的索引，然后将其传递至 <code>NumPy</code> 的 <code>random.permutation</code> 函数，该函数会随机排列其值的位置。如果使用此重新随机排列的数组调用 <code>reindex</code>，会导致 <code>DataFrame</code> 行以同样的方式随机排列。 尝试多次运行以下单元格！</p><pre class="language-python" data-language="python"><code class="language-python">cities<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>cities<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>推荐使用 <a href="https://colab.research.google.com/">https://colab.research.google.com/</a> 练习，可以直接导入<code>ipynb</code>，练习库<code>github</code>上面有很多，这里不多赘述，底下相关链接也有列出。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://colab.research.google.com/notebooks/mlcc/intro_to_pandas.ipynb">colab intro to pandas</a> </p><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html">user guide</a></p><p><a href="https://github.com/guipsamora/pandas_exercises">guipsamora/pandas_exercises</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> da </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data analysis </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink</title>
      <link href="2020/11/03/java/middleware/flink/"/>
      <url>2020/11/03/java/middleware/flink/</url>
      
        <content type="html"><![CDATA[<p><strong>Apache Flink</strong> 是一个在无界和有界数据流上进行状态计算的框架和分布式处理引擎.Flink 已经可以在所有常见的集群环境中运行,并以 in-memory 的速度和任意的规模进行计算.</p><p>可以类比 <strong>spring batch</strong> 或者<strong>spark</strong>进行学习,基本流程就是<strong>source-&gt;computer/transformation-&gt;sink</strong></p><p>本文章的大部分文字都来源于互联网,最底下会附上链接.</p><a id="more"></a><h3 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h3><h4 id="搭建执行环境"><a href="#搭建执行环境" class="headerlink" title="搭建执行环境"></a>搭建执行环境</h4><p>这边通过 <strong>docker-compose</strong> 构建,当然也可以直接下载编译好的二进制版本了,<a href="https://flink.apache.org/downloads.html">download</a></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">jobmanager</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> flink    <span class="token key atrule">expose</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6123"</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8081:8081"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> jobmanager    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JOB_MANAGER_RPC_ADDRESS=jobmanager  <span class="token key atrule">taskmanager</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> flink    <span class="token key atrule">expose</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6121"</span>      <span class="token punctuation">-</span> <span class="token string">"6122"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> jobmanager    <span class="token key atrule">command</span><span class="token punctuation">:</span> taskmanager    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"jobmanager:jobmanager"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JOB_MANAGER_RPC_ADDRESS=jobmanager</code></pre><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>这里根据创建一个<code>WordCount</code>应用</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">buildscript <span class="token punctuation">&#123;</span>    repositories <span class="token punctuation">&#123;</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this applies only to the Gradle 'Shadow' plugin</span>    <span class="token punctuation">&#125;</span>    dependencies <span class="token punctuation">&#123;</span>        classpath <span class="token string">'com.github.jengelman.gradle.plugins:shadow:2.0.4'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>plugins <span class="token punctuation">&#123;</span>    id <span class="token string">'java'</span>    id <span class="token string">'application'</span>    <span class="token comment">// shadow plugin to produce fat JARs</span>    id <span class="token string">'com.github.johnrengelman.shadow'</span> version <span class="token string">'2.0.4'</span><span class="token punctuation">&#125;</span>configurations <span class="token punctuation">&#123;</span>    flinkShadowJar <span class="token comment">// dependencies which go into the shadowJar</span>    <span class="token comment">// always exclude these (also from transitive dependencies) since they are provided by Flink</span>    flinkShadowJar<span class="token punctuation">.</span>exclude group<span class="token punctuation">:</span> <span class="token string">'org.apache.flink'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'force-shading'</span>    flinkShadowJar<span class="token punctuation">.</span>exclude group<span class="token punctuation">:</span> <span class="token string">'com.google.code.findbugs'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jsr305'</span>    flinkShadowJar<span class="token punctuation">.</span>exclude group<span class="token punctuation">:</span> <span class="token string">'org.slf4j'</span>    flinkShadowJar<span class="token punctuation">.</span>exclude group<span class="token punctuation">:</span> <span class="token string">'org.apache.logging.log4j'</span><span class="token punctuation">&#125;</span>ext <span class="token punctuation">&#123;</span>    javaVersion <span class="token operator">=</span> <span class="token string">'1.8'</span>    flinkVersion <span class="token operator">=</span> <span class="token string">'1.11.2'</span>    scalaBinaryVersion <span class="token operator">=</span> <span class="token string">'2.12'</span>    slf4jVersion <span class="token operator">=</span> <span class="token string">'1.7.15'</span>    log4jVersion <span class="token operator">=</span> <span class="token string">'2.12.1'</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    compile <span class="token string gstring">"org.apache.flink:flink-streaming-java_<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>scalaBinaryVersion<span class="token punctuation">&#125;</span></span>:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>flinkVersion<span class="token punctuation">&#125;</span></span>"</span>    compile <span class="token string gstring">"org.apache.flink:flink-clients_<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>scalaBinaryVersion<span class="token punctuation">&#125;</span></span>:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>flinkVersion<span class="token punctuation">&#125;</span></span>"</span>    compile <span class="token string gstring">"org.apache.flink:flink-connector-kafka_<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>scalaBinaryVersion<span class="token punctuation">&#125;</span></span>:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>fflinkVersion<span class="token punctuation">&#125;</span></span>"</span>    compile <span class="token string">'org.slf4j:slf4j-simple:1.7.21'</span><span class="token punctuation">&#125;</span><span class="token comment">// make compileOnly dependencies available for tests:</span>sourceSets <span class="token punctuation">&#123;</span>    main<span class="token punctuation">.</span>compileClasspath <span class="token operator">+=</span> configurations<span class="token punctuation">.</span>flinkShadowJar    main<span class="token punctuation">.</span>runtimeClasspath <span class="token operator">+=</span> configurations<span class="token punctuation">.</span>flinkShadowJar    test<span class="token punctuation">.</span>compileClasspath <span class="token operator">+=</span> configurations<span class="token punctuation">.</span>flinkShadowJar    test<span class="token punctuation">.</span>runtimeClasspath <span class="token operator">+=</span> configurations<span class="token punctuation">.</span>flinkShadowJar    javadoc<span class="token punctuation">.</span>classpath <span class="token operator">+=</span> configurations<span class="token punctuation">.</span>flinkShadowJar<span class="token punctuation">&#125;</span>run<span class="token punctuation">.</span>classpath <span class="token operator">=</span> sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>runtimeClasspathjar <span class="token punctuation">&#123;</span>    manifest <span class="token punctuation">&#123;</span>        attributes <span class="token string">'Built-By'</span><span class="token punctuation">:</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'user.name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'Build-Jdk'</span><span class="token punctuation">:</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'java.version'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>shadowJar <span class="token punctuation">&#123;</span>    configurations <span class="token operator">=</span> <span class="token punctuation">[</span>project<span class="token punctuation">.</span>configurations<span class="token punctuation">.</span>flinkShadowJar<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取本地执行环境</span>        <span class="token keyword">final</span> <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置并行数量</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取数据流</span>        <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转换算子处理数据流并输出结果</span>        stream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"Flink Streaming Java API Skeleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Tokenizer</span> <span class="token keyword">implements</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringList <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> stringList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用out.collect方法向下游发送数据</span>                out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果是在<strong>IDEA</strong>本地运行的话,记得引入依赖<code>flink-clients</code></p><pre class="language-shell" data-language="shell"><code class="language-shell">nc -lk 9999</code></pre><p>如果，已经搭建好了 <strong>Flink WebUI</strong> 运行环境,上传提交编译好的jar包 <strong>JobGraph</strong> 即可,或者通过命令行运行</p><pre class="language-shell" data-language="shell"><code class="language-shell">flink run -c todo.lib.flink.WordCount WordCount.jar</code></pre><h3 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h3><h4 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h4><h5 id="内置数据源"><a href="#内置数据源" class="headerlink" title="内置数据源"></a>内置数据源</h5><h6 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h6><p>从数组或者集合，一般本地调试使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"hello Flink"</span><span class="token punctuation">,</span> <span class="token string">"Second Line"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromElements</span><span class="token punctuation">(</span>elementInput<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="File"><a href="#File" class="headerlink" title="File"></a>File</h6><p>可以使用 <code>readTextFile</code> 方法直接读取文本文件, 这种方式可以用来监控一下 <strong>log</strong> 日志文件, 也可以使用 <code>readFile</code> 方法通过指定 <code>InputFormat</code> 来读取特定数据类型的文件, <code>InputFormat</code>可以是内置类,如 <code>CsvInputFormat</code> 或者用户自定义 <code>InputFormat</code> 接口类.</p><p>在 <code>readFile()</code> 方法中有一项参数为 <code>WatchType</code>, 共有两种模式 (<code>PROCESS_CONTINUOUSLY </code>/ <code>PROCESS_ONCE</code>). 在 <code>PROCESS_CONTINUOUSLY</code> 模式下, 检测到文件变动就会将文件全部内容加载在 <strong>flink</strong>, 在 <code>PROCESS_ONCE</code> 模式下, 只会将文件变动的那部分加载到 <strong>flink</strong>.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加文件源</span><span class="token comment">// 直接读取文本文件</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取csv</span><span class="token class-name">CsvInputFormat</span> csvInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowCsvInputFormat</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>csvPath<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token comment">// 文件路径</span>    <span class="token keyword">new</span> <span class="token class-name">TypeInformation</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 字段类型</span>    <span class="token string">"\n"</span><span class="token punctuation">,</span>                                             <span class="token comment">// 行分隔符</span>    <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">// 字段分隔符</span>csvInput<span class="token punctuation">.</span><span class="token function">setSkipFirstLineAsHeader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定 CsvInputFormat, 监控csv文件(两种模式), 时间间隔是10ms</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>csvInput<span class="token punctuation">,</span> csvPath<span class="token punctuation">,</span> <span class="token class-name">FileProcessingMode</span><span class="token punctuation">.</span>PROCESS_CONTINUOUSLY<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加Socket作为数据输入源</span><span class="token comment">// 4个参数 -> (hostname:Ip地址, port:端口, delimiter:分隔符, maxRetry:最大重试次数)</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="外部数据源"><a href="#外部数据源" class="headerlink" title="外部数据源"></a>外部数据源</h5><p>外部数据源是重头戏, 一般来说项目中均是使用外部数据源作为数据的源头.</p><h6 id="第三方数据源"><a href="#第三方数据源" class="headerlink" title="第三方数据源"></a>第三方数据源</h6><p>flink 通过实现 <code>SourceFunction</code> 定义了非常丰富的第三方数据连接器.对于第三方数据源, flink的支持分为三种,有<strong>只读型</strong>(Twitter Streaming API / Netty ), <strong>只写型</strong>( Cassandra / Elasticsearch / hadoop FileSystem), 支持<strong>读写</strong>(Kafka / Amazon Kinesis / RabbitMQ)</p><ul><li>Apache Kafka (Source / Sink)</li><li>Apache Cassandra (Sink)</li><li>Amazon Kinesis Streams (Source / Sink)</li><li>Elasticsearch (Sink)</li><li>Hadoop FileSystem (Sink)</li><li>RabbitMQ (Source / Sink)</li><li>Apache NiFI (Source / Sink)</li><li>Twitter Streaming API (Source)</li><li>Apache Bahir 中的连接器:</li><li>Apache ActiveMQ (Source / Sink)</li><li>Apache Flume (Sink)</li><li>Redis (Sink)</li><li>Akka (Sink)</li><li>Netty (Source)</li></ul><p><strong>以Kafka 为例 做演示</strong></p><p>我这边是远程服务器上<strong>docker-compose</strong>启动<strong>kafka</strong>,主要注意下面的<strong>EN_IP</strong>表示外网的IP地址</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 一个 kafka节点 就是一个 broker。一个集群由多个 broker 组成。一个 broker可以容纳多个 topic</span><span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token comment"># 配置zookeeper管理kafka的路径</span><span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span><span class="token number">2181</span> <span class="token comment"># 把kafka的地址端口注册给zookeeper，若远程访问要改成外网IP,千万注意是外网IP</span><span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//$<span class="token punctuation">&#123;</span>EN_IP<span class="token punctuation">&#125;</span><span class="token punctuation">:</span><span class="token number">9092</span> <span class="token comment"># 配置kafka的监听端口</span><span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">9092</span>  </code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"EN_IP:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> dataStream <span class="token operator">=</span> env    <span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">docker exec -it kafka_container_id bashcd &#x2F;opt&#x2F;kafka&#x2F;bin&#x2F;&#x2F; 生产数据.&#x2F;kafka-console-producer.sh --broker-list EN_IP:9092 --topic flink-test&#x2F;&#x2F; 消费数据.&#x2F;kafka-console-consumer.sh --bootstrap-server EN_IP:9092 --topic flink-test --from-beginning</code></pre><h6 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h6><p>用户也可以自己定义连接器, 通过实现 <code>SourceFunction</code> 定义单个线程的接入的数据连接器, 也可以通过实现<code>ParallelSourceFunction</code> 接口或者继承 <code>RichParallelSourceFunction</code> 类定义并发数据源接入器.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SourceFromMySQL</span> <span class="token keyword">extends</span> <span class="token class-name">RichSourceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SourceContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>                resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h4><h5 id="基本转换算子"><a href="#基本转换算子" class="headerlink" title="基本转换算子"></a>基本转换算子</h5><p>基本转换算子会针对流中的每一个单独的事件做处理,也就是说每一个输入数据会产生一个输出数据.单值转换,数据的分割,数据的过滤,都是基本转换操作的典型例子.这个有个概念就行,可以跳过.</p><h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> filteredReadings <span class="token operator">=</span> readings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span>temperature <span class="token operator">>=</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="map"><a href="#map" class="headerlink" title="map"></a>map</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sensorIds <span class="token operator">=</span> filteredReadings<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> splitIds <span class="token operator">=</span> sensorIds    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>             <span class="token punctuation">(</span>id<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span> id<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// provide result type because Java cannot infer return type of lambda function</span>    <span class="token comment">// 提供结果的类型，因为Java无法推断匿名函数的返回值类型</span>    <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token class-name">Types</span><span class="token punctuation">.</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="richFunction"><a href="#richFunction" class="headerlink" title="richFunction"></a>richFunction</h6><p>在函数处理数据之前,需要做一些初始化的工作;或者需要在处理数据时可以获得函数执行上下文的一些信息;以及在处理完数据时做一些清理工作</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFlatMap</span> <span class="token keyword">extends</span> <span class="token class-name">RichFlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> subTaskIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> subTaskIndex <span class="token operator">=</span> getRuntimeContext<span class="token punctuation">.</span>getIndexOfThisSubtask<span class="token punctuation">;</span>    <span class="token comment">// 做一些初始化工作</span>    <span class="token comment">// 例如建立一个和HDFS的连接</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> in<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> subTaskIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subTaskIndex<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 清理工作，断开和HDFS的连接。</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="键控流转换算子"><a href="#键控流转换算子" class="headerlink" title="键控流转换算子"></a>键控流转换算子</h5><p>很多流处理程序的一个基本要求就是要能对数据进行分组,分组后的数据共享某一个相同的属性.<strong>DataStream API</strong>提供了一个叫做<code>KeyedStream</code>的抽象,此抽象会从逻辑上对DataStream进行分区,分区后的数据拥有同样的<code>Key</code>值,分区后的流互不相关.</p><h6 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> keyed <span class="token operator">=</span> readings<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h6><p>通过将最后一个文件夹流与当前记录组合来推出 KeyedStream.它会发回数据流.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">KeyedStream</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FoldFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fold</span><span class="token punctuation">(</span><span class="token class-name">String</span> accumulator<span class="token punctuation">,</span> <span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> accumulator <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h6 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h6><p>滚动聚合算子由<code>KeyedStream</code>调用,并生成一个聚合以后的DataStream.</p><p>滚动聚合算子只能用在滚动窗口,不能用在滑动窗口.</p><p>滚动聚合操作会对每一个key都保存一个状态。因为状态从来不会被清空，所以我们在使用滚动聚合算子时只能使用在含有有限个key的流上面。</p><p>常见的滚动聚合算子: sum,min,max,minBy,maxBy</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> resultStream <span class="token operator">=</span> inputStream    <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// key on first field of the tuple</span>    <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// sum the second field of the tuple in place</span></code></pre><h6 id="window"><a href="#window" class="headerlink" title="window"></a>window</h6><p>允许按时间或其他条件对现有 KeyedStream 进行分组.以下是以 10 秒的时间窗口聚合:</p><pre class="language-java" data-language="java"><code class="language-java">inputStream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inputStream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">windowAll</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="window-join"><a href="#window-join" class="headerlink" title="window join"></a>window join</h6><p>我们可以通过一些 key 将同一个 window 的两个数据流 join 起来.</p><p>以下示例是在 5 秒的窗口中连接两个流,其中第一个流的第一个属性的连接条件等于另一个流的第二个属性</p><pre class="language-java" data-language="java"><code class="language-java">inputStream<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>inputStream1<span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>apply <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JoinFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="split"><a href="#split" class="headerlink" title="split"></a>split</h6><p>此功能根据条件将流拆分为两个或多个流.当您获得混合流并且您可能希望单独处理每个数据流时,可以使用此方法.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SplitStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> split <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputSelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            output<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"even"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            output<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"odd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="select"><a href="#select" class="headerlink" title="select"></a>select</h6><p>此功能允许您从拆分流中选择特定流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SplitStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> split<span class="token punctuation">;</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> even <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"even"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> odd <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"odd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"even"</span><span class="token punctuation">,</span><span class="token string">"odd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="project"><a href="#project" class="headerlink" title="project"></a>project</h6><p>Project 函数允许您从事件流中选择属性子集,并仅将所选元素发送到下一个处理流.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple4</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> in <span class="token operator">=</span> <span class="token comment">// [...] </span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> out <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><p>reduce函数可以通过实现接口ReduceFunction来创建一个类.ReduceFunction接口定义了<code>reduce()</code>方法,此方法接收两个输入事件,输入一个相同类型的事件.</p><p>reduce作为滚动聚合的泛化实现,同样也要针对每一个key保存状态.因为状态从来不会清空,所以我们需要将reduce算子应用在一个有限key的流上.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> maxTempPerSensor <span class="token operator">=</span> keyed    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span>temperature <span class="token operator">></span> r2<span class="token punctuation">.</span>temperature<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> r1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> r2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="多流转换算子"><a href="#多流转换算子" class="headerlink" title="多流转换算子"></a>多流转换算子</h5><p>许多应用需要摄入多个流并将流合并处理,还可能需要将一条流分割成多条流然后针对每一条流应用不同的业务逻辑.</p><h6 id="union"><a href="#union" class="headerlink" title="union"></a>union</h6><p>合流的方式为FIFO方式,合并流类型要一致.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> parisStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> tokyoStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> rioStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> allCities <span class="token operator">=</span> parisStream  <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>tokyoStream<span class="token punctuation">,</span> rioStream<span class="token punctuation">)</span></code></pre><h6 id="connect-comap-coflatmap"><a href="#connect-comap-coflatmap" class="headerlink" title="connect,comap,coflatmap"></a>connect,comap,coflatmap</h6><p>两个流的数据类型可以不同,会对两个流中的数据应用不同的处理方法.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> one <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> two <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// keyBy two connected streams</span><span class="token class-name">ConnectedStreams</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> keyedConnect1 <span class="token operator">=</span> one  <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key both input streams on first attribute</span><span class="token comment">// alternative: connect two keyed streams</span><span class="token class-name">ConnectedStreams</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> keyedConnect2 <span class="token operator">=</span> one  <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>two<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="分布式转换算子"><a href="#分布式转换算子" class="headerlink" title="分布式转换算子"></a>分布式转换算子</h5><p>定义了事件如何分配到不同的任务中去</p><p>当我们使用DataStream API来编写程序时,系统将自动的选择数据分区策略,然后根据操作符的语义和设置的并行度将数据路由到正确的地方去.有些时候,我们需要在应用程序的层面控制分区策略,或者自定义分区策略</p><h6 id="random"><a href="#random" class="headerlink" title="random"></a>random</h6><p>随机数据交换由<code>DataStream.shuffle()</code>方法实现。shuffle方法将数据随机的分配到下游算子的并行任务中去</p><h6 id="round-robin"><a href="#round-robin" class="headerlink" title="round-robin"></a>round-robin</h6><p><code>rebalance()</code>方法使用Round-Robin负载均衡算法将输入流平均分配到随后的并行运行的任务中去</p><h6 id="rescale"><a href="#rescale" class="headerlink" title="rescale"></a>rescale</h6><p><code>rescale()</code>方法使用的也是round-robin算法,但只会将数据发送到接下来的并行运行的任务中的一部分任务中.本质上,当发送者任务数量和接收者任务数量不一样时,rescale分区策略提供了一种轻量级的负载均衡策略.如果接收者任务的数量是发送者任务的数量的倍数时,rescale操作将会效率更高.</p><p><code>rebalance()</code>和<code>rescale()</code>的根本区别在于任务之间连接的机制不同.<code>rebalance()</code>将会针对所有发送者任务和所有接收者任务之间建立通信通道,而<code>rescale()</code>仅仅针对每一个任务和下游算子的一部分子并行任务之间建立通信通道</p><h6 id="broadcast"><a href="#broadcast" class="headerlink" title="broadcast"></a>broadcast</h6><p><code>broadcast()</code>方法将输入流的所有数据复制并发送到下游算子的所有并行任务中去.</p><h6 id="global"><a href="#global" class="headerlink" title="global"></a>global</h6><p><code>global()</code>方法将所有的输入流数据都发送到下游算子的第一个并行任务中去.这个操作需要很谨慎,因为将所有数据发送到同一个task,将会对应用程序造成很大的压力.</p><h6 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h6><p>当Flink提供的分区策略都不适用时,我们可以使用<code>partitionCustom()</code>方法来自定义分区策略.这个方法接收一个<code>Partitioner</code>对象,这个对象需要实现分区逻辑以及定义针对流的哪一个字段或者key来进行分区.</p><h4 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h4><p>Flink没有类似于spark中foreach方法,让用户进行迭代的操作.所有对外的输出操作都要利用Sink完成.最后通过类似如下方式完成整个任务最终输出操作.</p><pre class="language-java" data-language="java"><code class="language-java">stream<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySink</span><span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>官方提供了一部分的框架的sink.除此以外,需要用户自定义实现sink.</p><h5 id="第三方sink"><a href="#第三方sink" class="headerlink" title="第三方sink"></a>第三方sink</h5><h6 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h6><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-kafka_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;flink.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> union <span class="token operator">=</span> high  <span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span>temperature<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>union<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer011</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>    <span class="token string">"localhost:9092"</span><span class="token punctuation">,</span>    <span class="token string">"test"</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h6><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.bahir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-redis_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSink_</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FlinkJedisPoolConfig</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlinkJedisPoolConfig</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyRedisSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRedisSink</span> <span class="token keyword">implements</span> <span class="token class-name">RedisMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getKeyFromData</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValueFromData</span><span class="token punctuation">(</span><span class="token class-name">User</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">RedisCommandDescription</span> <span class="token function">getCommandDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCommandDescription</span><span class="token punctuation">(</span><span class="token class-name">RedisCommand</span><span class="token punctuation">.</span>HSET<span class="token punctuation">,</span> <span class="token string">"flink-test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">docker exec -it redis_container_id redis-cliauth 123456keys keys flink-testhvals flink-test</code></pre><h6 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h6><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-connector-elasticsearch6_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;flink.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 可选依赖 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EsSink_</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpHost</span><span class="token punctuation">></span></span> httpHosts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpHosts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ElasticsearchSink</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> sensorReadingBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchSink</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>                httpHosts<span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token class-name">ElasticsearchSinkFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> runtimeContext<span class="token punctuation">,</span> requestIndexer<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">IndexRequest</span> indexRequest <span class="token operator">=</span> <span class="token class-name">Requests</span>                            <span class="token punctuation">.</span><span class="token function">indexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"flink-test"</span><span class="token punctuation">)</span> <span class="token comment">// 索引是flink-test，相当于数据库</span>                            <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token comment">// es6需要加这一句</span>                            <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                    requestIndexer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        sensorReadingBuilder<span class="token punctuation">.</span><span class="token function">setBulkFlushMaxActions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>sensorReadingBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="自定义sink"><a href="#自定义sink" class="headerlink" title="自定义sink"></a>自定义sink</h5><p>继承 RichSinkFunction 抽象类,重写 invoke 方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyJDBCSink</span> <span class="token keyword">extends</span> <span class="token class-name">RichSinkFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PreparedStatement</span> insertStmt<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PreparedStatement</span> updateStmt<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">User</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        updateStmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateStmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateStmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateStmt<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            insertStmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            insertStmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            insertStmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><h5 id="时间-time"><a href="#时间-time" class="headerlink" title="时间 time"></a>时间 time</h5><p>事件时间 <strong>Event Time</strong>,即事件实际发生的时间,可以处理乱序事件,一般都用这个;<br>摄入时间 <strong>Ingestion Time</strong>,事件进入流处理框架的时间;<br>处理时间 <strong>Processing Time</strong>,事件被处理的时间,执行操作算子的本地时间,与机器无关.统计某些延时非常高的日志.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置时间属性为 EventTime</span>env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer09</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyEvent</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> schema<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream    <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">-></span> event<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">hours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 这个方法中的 while 循环部分会从 eventTimeTimersQueue 中依次取出触发时间小于参数 time 的所有定时器，调用 triggerTarget.onEventTime() 方法进行触发。这就是 EventTime 从注册到触发的流程。</span><span class="token class-name">InternalTimeServiceImpl</span><span class="token punctuation">.</span>advanceWatermark。<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">advanceWatermark</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>   currentWatermark <span class="token operator">=</span> time<span class="token punctuation">;</span>   <span class="token class-name">InternalTimer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">></span></span> timer<span class="token punctuation">;</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timer <span class="token operator">=</span> eventTimeTimersQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> timer<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      eventTimeTimersQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      keyContext<span class="token punctuation">.</span><span class="token function">setCurrentKey</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      triggerTarget<span class="token punctuation">.</span><span class="token function">onEventTime</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="水位线-watermark"><a href="#水位线-watermark" class="headerlink" title="水位线 watermark"></a>水位线 watermark</h5><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p><strong>水印的出现是为了解决实时计算中的数据乱序问题，它的本质是 DataStream 中一个带有时间戳的元素</strong>。</p><p>如果 Flink 系统中出现了一个 WaterMark T,那么就意味着 EventTime &lt; T 的数据都已经到达,窗口的结束时间和 T 相同的那个窗口被<strong>触发</strong>进行计算了.</p><p>也就是说:水印是 Flink 判断迟到数据的标准,同时也是窗口触发的标记.</p><p>在程序并行度大于 1 的情况下,会有多个流产生水印和窗口,这时候 Flink 会选取时间戳最小的水印.</p><h6 id="使用水印"><a href="#使用水印" class="headerlink" title="使用水印"></a>使用水印</h6><p><strong>a. 在 Source Function 中 直接指定 Timestamps 和 Watermark</strong></p><p> 用户需要复写 SourceFunction 接口中 run( ) 方法实现数据逻辑, 同时调用 SourceContext 的 collectWithTimestamp( ) 方法生成 event time 时间戳, 调用 emitWatermark( ) 方法生成 watermark.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> text <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SourceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SourceContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> elementInput<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 切割每一条数据</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Long</span> timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 生成 event time 时间戳</span>                    ctx<span class="token punctuation">.</span><span class="token function">collectWithTimestamp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 调用 emitWatermark() 方法生成 watermark, 最大延迟设定为 2</span>                    ctx<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 设定默认 watermark</span>                ctx<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>b. 通过 Flink 自带的 Timestamp Assigner 指定 Timestamp 和 生成 watermark</strong></p><p><strong>b.1 使用 Ascending Timestamp Assigner 指定 Timestamps 和 Watermark</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> dataStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">fromCollection</span><span class="token punctuation">(</span>collectionInput<span class="token punctuation">)</span><span class="token punctuation">;</span>       dataStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span>               <span class="token punctuation">(</span><span class="token class-name">WatermarkStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">)</span> context <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">WatermarkGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">private</span> <span class="token keyword">long</span> maxTimestamp<span class="token punctuation">;</span>                   <span class="token keyword">private</span> <span class="token keyword">long</span> delay <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>                   <span class="token annotation punctuation">@Override</span>                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>                           <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> event<span class="token punctuation">,</span>                           <span class="token keyword">long</span> eventTimestamp<span class="token punctuation">,</span>                           <span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       maxTimestamp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxTimestamp<span class="token punctuation">,</span> event<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token annotation punctuation">@Override</span>                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPeriodicEmit</span><span class="token punctuation">(</span><span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>maxTimestamp <span class="token operator">-</span> delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>b.2 内置水印生成策略</strong></p><p><strong>b.2.1 固定延迟生成水印</strong></p><p>通过静态方法<code>forBoundedOutOfOrderness</code>提供,入参接收一个Duration类型的时间间隔，也就是我们可以接受的最大的延迟时间.使用这种延迟策略的时候需要我们对数据的延迟时间有一个大概的预估判断。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> maxOutOfOrderness<span class="token punctuation">)</span></code></pre><p>我们实现一个延迟3秒的固定延迟水印，可以这样做：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span> dataStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>dataStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>他的底层使用的WatermarkGenerator接口的一个实现类BoundedOutOfOrdernessWatermarks。我们看下源码中的这两个方法，是不是和我们上面自己写的很像.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">T</span> event<span class="token punctuation">,</span> <span class="token keyword">long</span> eventTimestamp<span class="token punctuation">,</span> <span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> maxTimestamp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxTimestamp<span class="token punctuation">,</span> eventTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPeriodicEmit</span><span class="token punctuation">(</span><span class="token class-name">WatermarkOutput</span> output<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>maxTimestamp <span class="token operator">-</span> outOfOrdernessMillis <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>b.2.2 单调递增生成水印</strong></p><p>通过静态方法<code>forMonotonousTimestamps</code>来提供.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token function">forMonotonousTimestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个也就是相当于上述的延迟策略去掉了延迟时间，以event中的时间戳充当了水印。</p><p>在程序中可以这样使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span> dataStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>dataStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token class-name">WatermarkStrategy</span><span class="token punctuation">.</span><span class="token function">forMonotonousTimestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它的底层实现是AscendingTimestampsWatermarks，其实它就是BoundedOutOfOrdernessWatermarks类的一个子类，没有了延迟时间，我们来看看具体源码的实现.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Public</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AscendingTimestampsWatermarks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">BoundedOutOfOrdernessWatermarks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/**  * Creates a new watermark generator with for ascending timestamps.  */</span> <span class="token keyword">public</span> <span class="token class-name">AscendingTimestampsWatermarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="event时间的获取"><a href="#event时间的获取" class="headerlink" title="event时间的获取"></a>event时间的获取</h6><p>上述我们讲了flink自带的两种水印生成策略，但是对于我们使用eventtime语义的时候，我们想从我们的自己的数据中抽取eventtime，这个就需要TimestampAssigner了.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Public</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TimestampAssigner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">,</span> <span class="token keyword">long</span> recordTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>使用的时候我们主要就是从我们自己的元素element中提取我们想要的eventtime。</p><p>使用flink自带的水印策略和eventtime抽取类，可以这样用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span> dataStream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>dataStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span>    <span class="token class-name">WatermarkStrategy</span>      <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">withTimestampAssigner</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token operator">-></span>event<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="处理空闲数据源"><a href="#处理空闲数据源" class="headerlink" title="处理空闲数据源"></a>处理空闲数据源</h6><p>在某些情况下，由于数据产生的比较少，导致一段时间内没有数据产生，进而就没有水印的生成，导致下游依赖水印的一些操作就会出现问题，比如某一个算子的上游有多个算子，这种情况下，水印是取其上游两个算子的较小值，如果上游某一个算子因为缺少数据迟迟没有生成水印，就会出现eventtime倾斜问题，导致下游没法触发计算。</p><p>所以filnk通过WatermarkStrategy.withIdleness()方法允许用户在配置的时间内（即超时时间内）没有记录到达时将一个流标记为空闲。这样就意味着下游的数据不需要等待水印的到来。</p><p>当下次有水印生成并发射到下游的时候，这个数据流重新变成活跃状态。</p><p>通过下面的代码来实现对于空闲数据流的处理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WatermarkStrategy</span>        <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withIdleness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="窗口简介-window"><a href="#窗口简介-window" class="headerlink" title="窗口简介 window"></a>窗口简介 window</h5><p>窗口是流式计算中非常重要的一个概念, 很多常见的功能都是通过各种窗口实现的, 比如每5分钟统计一下刚去1小时的热度. Flink DataStream API 将窗口独立成 Operator. 每个窗口算子包含了以下几个部分:</p><p><strong>Windows Assigner</strong></p><p>指定窗口的类型, 定义如何将数据流分配到一个或者多个窗口</p><p><strong>Windows Trigger</strong></p><p>指定窗口触发的时机, 定义窗口满足什么样的条件触发计算</p><p><strong>Evictor</strong></p><p>用户数据剔除</p><p><strong>Lateness</strong></p><p>标记是否处理迟到的数据, 当迟到数据到达窗口中是否触发计算</p><p><strong>Output Tag</strong></p><p>标记输出标签, 然后再通过 getSideOutput 将窗口中的数据根据标签输出</p><p><strong>Windows Function</strong></p><p>定义窗口上的数据处理的逻辑, 例如对数据进行sum</p><h5 id="Window-Assigner"><a href="#Window-Assigner" class="headerlink" title="Window Assigner"></a>Window Assigner</h5><p>首先最需要了解的就是 windows Assigner了, 我们想要一个什么样的窗口划分, 主要就是通过他来实现的.</p><p>根据 flink 上游的数据集是否为 KeyedStream 类型 来做分别的处理. 如果使用了keyBy( ) 则对应使用window( ) 来处理, 否则可以使用 windowAll( )来使用</p><p>Flink 可以支持两种类型的窗口, 分别是基于时间的窗口和基于数量的窗口.基于时间的意思就是按照时间去划分窗口,同理,基于数量的也是根据窗口中的数量来做切分的. 对应的分别就是 timeWindow() 和 countWindow() 来使用, 下面的示例主要使用 timeWindow() 来演示.</p><p>对于不同的 Window Assigner, 还可以把窗口划分为4大类, 分别是 滚动窗口(Tumbling Windows) / 滑动窗口(Sliding Window) / 会话窗口(Session Window) 和 全局窗口(Global Window).</p><h6 id="滚动窗口-Tumbling-Windows"><a href="#滚动窗口-Tumbling-Windows" class="headerlink" title="滚动窗口 Tumbling Windows"></a>滚动窗口 Tumbling Windows</h6><p>DataStream API 提供基于 EventTime 和 ProcessingTime 的两种类型的 Tumbling window.对应的 Assigner 分别是 TumblingEventTimeWindow 和 ProcessingEventTimeWindow . 举例如下,完整代码见Github.</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 使用ProcessTime的滚动时间窗口, 长度为10sstream.keyBy(x -&gt; x.f1)    .window(TumblingProcessingTimeWindows.of(Time.seconds(10))).process(...)&#x2F;&#x2F; 使用ProcessTime的滚动时间窗口, 长度为10sstream.keyBy(x -&gt;x.f1).window(TumblingEventTimeWindows.of(Time.seconds(10))).process(...)</code></pre><p>使用 window(TumblingProcessingTimeWindows.of(Time.seconds(10))) 的方法有点啰嗦, Flink 还提供了timeWindow( ) 的 API 来简化这一行代码.</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 直接使用 timeWindow API 便可实现滚动窗口的操作, 参数依旧是窗口的长度&#x2F;&#x2F; 窗口类型的时间由 time characteristic 确定, 如果指定为 event time,那么窗口也会自动用这个时间input.keyBy(x -&gt; x.f1).timeWindow(Time.seconds(10));</code></pre><h6 id="滑动窗口-Sliding-Window"><a href="#滑动窗口-Sliding-Window" class="headerlink" title="滑动窗口 Sliding Window"></a>滑动窗口 Sliding Window</h6><p>滑动窗口顾名思义就是一个在不断往后滑动的窗口, 比如说 每5分钟 统计一个 最近一小时的时间, 那么就需要用滑动窗口来做处理. 滑动窗口主要是依靠 window size 和 slide time 来确定. 与滚动窗口类似的, flink 也提供了对应不同时间的 Assigner API(SlidingEventTimeWindow / SlidingEventTimeWindow), 语法基本类似, 只是由原本的一个参数(窗口长度) 变为了两个参数(窗口长度和滑动时间), 同样的, 为了简化代码, 依然可以使用timeWindow() 来简化.</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 两个参数分别是 窗口长度 和 滑动时间, 窗口时间类型依旧通过time characteristic 确定input.keyBy(x -&gt; x.f1).timeWindow(Time.seconds(10), Time.seconds(1))</code></pre><h6 id="会话窗口-Session-Window"><a href="#会话窗口-Session-Window" class="headerlink" title="会话窗口 Session Window"></a>会话窗口 Session Window</h6><p>会话窗口主要是将某段时间内活跃度较高的数据聚合成一个窗口计算. 触发条件是 Session Gap. 在规定的时间内没有数据接入则认为这个窗口结束,然后触发窗口计算. Session Gap 除了固定间隔的方式, 也可以动态抽取.</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 创建 Session Window, 间隔为 3s        DataStream&lt;Tuple3&lt;String, Long, Integer&gt;&gt; aggregated &#x3D; source                .keyBy(0)                .window(EventTimeSessionWindows.withGap(Time.seconds(3L)))                .sum(2);</code></pre><h6 id="全局窗口-Global-Window"><a href="#全局窗口-Global-Window" class="headerlink" title="全局窗口 Global Window"></a>全局窗口 Global Window</h6><p>全局窗口将所有key的数据分配到单个窗口中计算结果.</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 创建 GlobalWindow        input.keyBy(1)                .window(GlobalWindows.create())                .sum(1);</code></pre><h5 id="Window-Function"><a href="#Window-Function" class="headerlink" title="Window Function"></a>Window Function</h5><p>Window Assigner 的作用是划分窗口的, 而 Window Function 就是对窗口内的数据做处理的一个过程</p><h6 id="ReduceFunction-增量"><a href="#ReduceFunction-增量" class="headerlink" title="ReduceFunction (增量)"></a>ReduceFunction (增量)</h6><p>对输入的两个相同类型的元素按照指定的计算方式进行聚合, 通过实现 ReduceFunction 接口就可以在reduce( ) 函数内部进行聚合操作了.</p><pre class="language-java" data-language="java"><code class="language-java">input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>f0 <span class="token operator">+</span> t2<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="AggregateFunction-增量"><a href="#AggregateFunction-增量" class="headerlink" title="AggregateFunction (增量)"></a>AggregateFunction (增量)</h6><p>AggregateFunction 相对于ReduceFunction更加灵活,但是实现起来也更复杂, AggregateFunction有 4 个需要复写的方法, 其中createAccumulator( ) 定义累加器, add( ) 定义数据的添加逻辑, getResult( ) 定义了根据 accumulator 计算结果的逻辑, merge()方法定义合并 accumulator 的逻辑.</p><pre class="language-java" data-language="java"><code class="language-java">input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span>f1<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 自定义一个AggregateFunciton, 将相同标号 f1 的数据的 f0字符串字段合并在一起</span>    <span class="token comment">// ("hello", 1L) + ("world", 1L) = ("hello world", 1L)</span>    <span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAggregateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过自定义的 MyAggregateFunction() 来实现 AggregateFunction 接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyAggregateFunction</span> <span class="token keyword">implements</span> <span class="token class-name">AggregateFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化累加器</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> t<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 输入数据与累加器的合并</span>            <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>t<span class="token punctuation">.</span>f0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 得到累加器的结果</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> acc1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 合并累加器</span>            <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> acc1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h6 id="FoldFunction-增量"><a href="#FoldFunction-增量" class="headerlink" title="FoldFunction (增量)"></a>FoldFunction (增量)</h6><p>FoldFunction定义了如何将窗口中的输入元素与外部的元素合并的逻辑</p><pre class="language-java" data-language="java"><code class="language-java">input<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string">"flink"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-></span>t<span class="token punctuation">.</span>f0 <span class="token operator">+</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>FoldFunction在新版本已经被标记@Deprecated了, 建议使用AggregateFunction代替</p><h6 id="ProcessWindowFunction-全量"><a href="#ProcessWindowFunction-全量" class="headerlink" title="ProcessWindowFunction (全量)"></a>ProcessWindowFunction (全量)</h6><p>ProcessWindowFunction 相较于其他的 Window Function, 可以实现一些更复杂的计算, 比如基于整个窗口做某些指标计算 或者需要操作窗口中的状态数据和窗口元数据. Flink 提供了 ProcessWindowFunction 这个抽象类, 继承此类就可以实现ProcessWindowFunction, 其中, 必须要实现 process( ) 方法, 这是处理窗口数据的主要方法.还在一下跟窗口数据相关的方法可以有选择的实现.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyProcessWindowFunction</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessWindowFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Long</span> s<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> elements<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 统计每个窗口内的所有数据的 f0字段加起来共有多少个单词</span>        <span class="token comment">// 也就做单个窗口的 wordcount</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">+=</span> element<span class="token punctuation">.</span>f0<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token string">"window: "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" word count: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Window-Join"><a href="#Window-Join" class="headerlink" title="Window Join"></a>Window Join</h5><p>Flink 中支持窗口上的多流合并, 需要保证的是输入的 stream 要构建在相同的 Window 上, 并使用相同类型的 Key 作为关联条件.</p><pre class="language-java" data-language="java"><code class="language-java">inputStream1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>inputStream2<span class="token punctuation">)</span><span class="token comment">// 指定inputStream1的关联key</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 指定inputStream2的关联key</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 指定 window Assigner</span><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">TumblingEventTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 指定窗口计算函数</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JoinFunction</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre><h5 id="处理迟到的元素"><a href="#处理迟到的元素" class="headerlink" title="处理迟到的元素"></a>处理迟到的元素</h5><p>迟到的元素是指当这个元素来到时,这个元素所对应的窗口已经计算完毕了(也就是说水位线已经没过窗口结束时间了).这说明迟到这个特性只针对事件时间.</p><p>DataStream API提供了三种策略来处理迟到元素</p><h6 id="直接抛弃"><a href="#直接抛弃" class="headerlink" title="直接抛弃"></a>直接抛弃</h6><p>抛弃迟到的元素是event time window operator的默认行为.也就是说一个迟到的元素不会创建一个新的窗口.</p><p>process function可以通过比较迟到元素的时间戳和当前水位线的大小来很轻易的过滤掉迟到元素.</p><h6 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h6><p>迟到的元素也可以使用侧输出(side output)特性被重定向到另外的一条流中去.迟到元素所组成的侧输出流可以继续处理或者sink到持久化设施中去.</p><h6 id="更新窗口计算结果"><a href="#更新窗口计算结果" class="headerlink" title="更新窗口计算结果"></a>更新窗口计算结果</h6><p>由于存在迟到的元素,所以已经计算出的窗口结果是不准确和不完全的.我们可以使用迟到元素更新已经计算完的窗口结果.</p><p>window operator API提供了方法来明确声明我们要等待迟到元素.当使用event-time window,我们可以指定一个时间段叫做<code>allowed lateness</code>.window operator如果设置了<code>allowed lateness</code>,这个window operator在水位线没过窗口结束时间时也将不会删除窗口和窗口中的状态.窗口会在一段时间内(allowed lateness设置的)保留所有的元素.</p><p>当迟到元素在<code>allowed lateness</code>时间内到达时,这个迟到元素会被实时处理并发送到触发器(trigger).当水位线没过了窗口结束时间+allowed lateness时间时,窗口会被删除,并且所有后来的迟到的元素都会被丢弃.</p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>官方文档有详细描述,这里不多赘述.</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/zh/dev/stream/state/state.html">https://ci.apache.org/projects/flink/flink-docs-release-1.11/zh/dev/stream/state/state.html</a></p><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p>Flink本身是批流统一的处理框架,所以Table API和SQL,就是批流统一的上层处理API.目前还在完善中,所以后面待完善.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">compileOnly <span class="token string gstring">"org.apache.flink:flink-table-api-java-bridge_<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>scalaBinaryVersion<span class="token punctuation">&#125;</span></span>:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>flinkVersion<span class="token punctuation">&#125;</span></span>"</span><span class="token comment">// 本地运行，线上lib已经包含，不需要引入</span>compileOnly <span class="token string gstring">"org.apache.flink:flink-table-planner-blink_<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>scalaBinaryVersion<span class="token punctuation">&#125;</span></span>:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>flinkVersion<span class="token punctuation">&#125;</span></span>"</span><span class="token comment">// 自定义函数，线上lib已经包含，不需要引入</span>compileOnly <span class="token string gstring">"org.apache.flink:flink-table-common:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>flinkVersion<span class="token punctuation">&#125;</span></span>"</span></code></pre><p><strong>未完待续…..</strong></p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/">apache flink</a></p><p><a href="https://github.com/apache/flink">github flink</a></p><p><a href="https://github.com/zhisheng17/flink-learning">github flink-learning</a></p><p><a href="https://github.com/CheckChe0803/flink-simple-tutorial">github flink-simple-tutorial</a></p><p><a href="https://confucianzuoyuan.github.io/flink-tutorial/">尚硅谷</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debian</title>
      <link href="2020/11/01/linux/dist/debian/"/>
      <url>2020/11/01/linux/dist/debian/</url>
      
        <content type="html"><![CDATA[<p>新公司配置的笔记本是 <code>Win</code> 系统，因为本人习惯 <code>Linux</code> 系统，所以就装了个 <code>Debian</code> 子系统玩一下。</p><p>最早之前用 <code>Deepin</code> 是基于 <code>Debian</code> 的，后面用 <code>Manjaro</code> 了，忘得差不多了，这里做个记录，方便以后查阅。</p><a id="more"></a><h3 id="wsl2"><a href="#wsl2" class="headerlink" title="wsl2"></a>wsl2</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># 开启window子系统dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart# 启用虚拟机dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart# 下载liux核心更新套件wget https:&#x2F;&#x2F;wslstorestorage.blob.core.windows.net&#x2F;wslblob&#x2F;wsl_update_x64.msi# 查看子系统的wsl版本wsl -l -v# 更改子系统的wsl版本wsl --set-version &lt;distribution name&gt; &lt;versionNumber&gt;# 将wsl2设置为默认版本wsl --set-default-version 2# 子系统迁移到非系统盘 https:&#x2F;&#x2F;github.com&#x2F;DDoSolitary&#x2F;LxRunOfflineLxRunOffline.exe move -n Debian -d D:\wsl2\Debian# 重启子系统net stop LxssManagernet start LxssManager# 进入子系统bash# 访问宿主机目录cd &#x2F;mnt</code></pre><h3 id="set-sources-list"><a href="#set-sources-list" class="headerlink" title="set sources.list"></a>set sources.list</h3><pre class="language-shell" data-language="shell"><code class="language-shell">mv &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.baksudo vim &#x2F;etc&#x2F;apt&#x2F;sources.listdeb http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian&#x2F; buster main non-free contribdeb http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian-security buster&#x2F;updates maindeb http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian&#x2F; buster-updates main non-free contribdeb http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian&#x2F; buster-backports main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian-security buster&#x2F;updates maindeb-src http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian&#x2F; buster main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian&#x2F; buster-updates main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;debian&#x2F; buster-backports main non-free contribsudo apt-get update</code></pre><h3 id="apt-get-amp-dpkg"><a href="#apt-get-amp-dpkg" class="headerlink" title="apt-get &amp; dpkg"></a>apt-get &amp; dpkg</h3><pre class="language-shell" data-language="shell"><code class="language-shell">apt-get update # update sourcesapt-get upgrade # update all installed packagesapt-get dist-upgrade # update systemapt-get install packagename # installapt-get remove packagename # keep configapt-get -purge remove packagename # delete configapt-get autoclean apt # clean deleted backup packagesapt-get clean # clean all backup packagesapt-get autoclean # clean deleted .debapt-cache show package</code></pre><h3 id="install-soft"><a href="#install-soft" class="headerlink" title="install soft"></a>install soft</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># sshsudo apt-get install openssh-serversudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config # 设置端口为2222，避免与宿主机端口冲突service ssh start&#x2F;etc&#x2F;init.d&#x2F;ssh start &#x2F;etc&#x2F;init.d&#x2F;ssh statusupdate-rc.d ssh enable # 开机自启update-rc.d ssh disabled# dev toolssudo apt-get install net-toolssudo apt-get install curlsudo apt-get install wgetsudo apt-get install git# 如果该项保持启用状态，由于行尾结束符的差异，此设置可能导致你未编辑的文件中出现了修改操作git config --global core.autocrlf false git config --global user.name &quot;jianchengwang&quot;git config --global user.email &quot;jiancheng_wang@yahoo.com&quot;# zshsudo apt-get install zshsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;chsh -s &#x2F;bin&#x2F;zsh# or fishsudo apt-add-repository ppa:fish-shell&#x2F;release-3sudo apt-get updatesudo apt-get install fishchsh -s &#x2F;bin&#x2F;fish# install oh-my-fishcurl -L https:&#x2F;&#x2F;get.oh-my.fish | fish# or install by git clonegit clone https:&#x2F;&#x2F;github.com&#x2F;oh-my-fish&#x2F;oh-my-fishcd oh-my-fishbin&#x2F;install --offline# omf command omf install clearanceomf theme sushi# neovimsudo apt-get install neovimvim .vimrcset mouse&#x3D;v # xshell vim鼠标右键无法复制问题# vscode wsl remotecode-insiders # javawget jdk-8u221-linux-x64.tar.gztar -zxvf jdk-8u221-linux-x64.tar.gzsudo vim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;home&#x2F;wjc&#x2F;lang&#x2F;jdk1.8.0_221export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jreexport CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;libexport PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$PATHsource &#x2F;etc&#x2F;profile# mysqlwget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-apt-config_0.8.13-1_all.debsudo dpkg -i mysql-apt-config_0.8.13-1_all.deb sudo apt-get updatesudo apt-get install mysql-serversudo service mysql startmysql -u root -pCREATE USER &#39;wjc&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;GRANT ALL PRIVILEGES ON *.* TO &#39;wjc&#39;@&#39;%&#39;;FLUSH PRIVILEGES;sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqlld.cnfbind-address    &#x3D; 0.0.0.0# dockersudo apt-get updatesudo apt-get upgrade -y  sudo apt install docker.iosudo service docker startsudo usermod -aG docker user-name # 添加用户到docker组# 配置镜像加速sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;ed47r0z0.mirror.aliyuncs.com&quot;]&#125;EOF# https:&#x2F;&#x2F;github.com&#x2F;WhitewaterFoundry&#x2F;Pengwin&#x2F;issues&#x2F;485# The docker installer uses iptables for nat. Unfortunately Debian uses a modified version of nftables. You can convert the entries over to nftables or just setup Debian to use the legacy iptables.sudo update-alternatives --set iptables &#x2F;usr&#x2F;sbin&#x2F;iptables-legacysudo update-alternatives --set ip6tables &#x2F;usr&#x2F;sbin&#x2F;ip6tables-legacy# 重启dockersudo dockerdsudo service docker restart </code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> dist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的this机制</title>
      <link href="2020/10/27/web/js/this-in-javascript/"/>
      <url>2020/10/27/web/js/this-in-javascript/</url>
      
        <content type="html"><![CDATA[<p>今天本来打算喵下 <code>ES6</code> ，然后发现 <code>js</code> 胖箭头函数 <code>=&gt;</code>  的 <code>this</code> 跟预期的不大一样，所以就翻阅下资料，这里做个记录，本文大部分内容都摘自互联网，哥哥只是个搬运工，底下会列出相关链接，感兴趣地可以去看下。</p><a id="more"></a><h2 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h2><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>浏览器中 <code>this</code> 默认绑定到 <code>window</code></p><p><strong>全局环境</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 全局环境</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// 函数独立调用</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// 被嵌套函数独立调用</span><span class="token comment">//虽然test()函数被嵌套在obj.foo()函数中，但test()函数是独立调用，而不是方法调用。所以this默认绑定到window</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token function-variable function">foo</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token comment">// IIFE(Imdiately Invoked Function Expression) 立即执行函数实际上是函数声明后直接调用执行</span><span class="token comment">// 等价于上一例被嵌套的函数独立调用， `IIFE` 严格来说，不算闭包</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo1<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">// 闭包</span><span class="token comment">// 由于闭包的this默认绑定到window对象，但又常常需要访问嵌套函数的this，</span><span class="token comment">// 所以常常在嵌套函数中使用`var that = this`，然后在闭包中使用that替代this，</span><span class="token comment">// 使用作用域查找的方法来找到嵌套函数的this值 </span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> test<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo2<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span></code></pre><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>一般地，被直接对象所包含的函数调用时，也称为方法调用，this隐式绑定到该直接对象</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo<span class="token punctuation">,</span>    obj2<span class="token operator">:</span><span class="token punctuation">&#123;</span>        a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        foo<span class="token operator">:</span>foo    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//foo()函数的直接对象是obj1，this隐式绑定到obj1</span>obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token comment">//foo()函数的直接对象是obj2，this隐式绑定到obj2</span>obj1<span class="token punctuation">.</span>obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span></code></pre><h3 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h3><p>隐式丢失是指被隐式绑定的函数丢失绑定对象，从而默认绑定到window。这种情况容易出错却又常见</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 函数别名</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo<span class="token punctuation">&#125;</span><span class="token comment">//把obj.foo赋予别名bar，造成了隐式丢失，因为只是把foo()函数赋给了bar，而bar与obj对象则毫无关系</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">//等价于</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">// 参数传递</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo<span class="token punctuation">&#125;</span><span class="token comment">//把obj.foo当作参数传递给bar函数时，有隐式的函数赋值fn=obj.foo。与上例类似，只是把foo函数赋给了fn，而fn与obj对象则毫无关系</span><span class="token function">bar</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">//等价于</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 内置函数，跟前一种情况一样，函数作为参数传递</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo<span class="token punctuation">&#125;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">//等价于</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">// 间接引用</span><span class="token comment">// 函数的"间接引用"一般都在无意间创建，最容易在赋值时发生，会造成隐式丢失</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> foo <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">//将o.foo函数赋值给p.foo函数，然后立即执行。相当于仅仅是foo()函数的立即执行</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>foo <span class="token operator">=</span> o<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> foo <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">//将o.foo函数赋值给p.foo函数，之后p.foo函数再执行，是属于p对象的foo函数的执行</span>p<span class="token punctuation">.</span>foo <span class="token operator">=</span> o<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">// 其他情况</span><span class="token comment">// 在javascript引擎内部，obj和obj.foo储存在两个内存地址，简称为M1和M2。</span><span class="token comment">// 只有obj.foo()这样调用时，是从M1调用M2，因此this指向obj。</span><span class="token comment">// 但是，下面三种情况，都是直接取出M2进行运算，然后就在全局环境执行运算结果（还是M2），</span><span class="token comment">// 因此this指向全局环境</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span></code></pre><h3 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h3><p>通过call()、apply()、bind()方法把对象绑定到this上，叫做显式绑定。</p><p>对于被调用的函数来说，叫做间接调用</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 普通显示绑定</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token comment">// 普通绑定无法解决隐式丢失问题</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token comment">// 硬绑定，是显示绑定的一种变种，使this不能再更改</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">bar</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在bar函数内部手动调用foo.call(obj)。因此，无论之后如何调用函数bar，它总会手动在obj上调用foo</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token comment">// Api</span><span class="token comment">// javascript中新增了许多内置函数，具有显式绑定的功能，</span><span class="token comment">// 如数组的5个[迭代方法]</span><span class="token comment">// map()、forEach()、filter()、some()、every()</span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'window'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token string">'fn'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1 "window" 2 "window" 3 "window"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1 "fn" 2 "fn" 3 "fn"</span></code></pre><h3 id="New绑定"><a href="#New绑定" class="headerlink" title="New绑定"></a>New绑定</h3><p>如果函数或者方法调用之前带有关键字new，它就构成构造函数调用。对于this绑定来说，称为new绑定</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 构造函数通常不使用return关键字，它们通常初始化新对象，</span><span class="token comment">// 当构造函数的函数体执行完毕时，它会显式返回。</span><span class="token comment">// 在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;a:2&#125;</span><span class="token comment">// 如果构造函数使用return语句但没有指定返回值，或者返回一个原始值，</span><span class="token comment">// 那么这时将忽略返回值，同时使用这个新对象作为调用结果</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;a:2&#125;</span><span class="token comment">// 如果构造函数显式地使用return语句返回一个对象，那么调用表达式的值就是这个对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;a:1&#125;</span><span class="token comment">// 尽管有时候构造函数看起来像一个方法调用，它依然会使用这个新对象作为this。</span><span class="token comment">// 也就是说，在表达式new o.m()中，this并不是o</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">m</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">o<span class="token punctuation">.</span>m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>obj <span class="token operator">===</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;&#125; false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> o<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 严格模式下，独立调用的函数的this指向undefined</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token string">'use strict'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在非严格模式下，使用函数的call()或apply()方法时，null或undefined值会被转换为全局对象。</span><span class="token comment">// 而在严格模式下，函数的this值始终是指定的值</span><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">displayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">displayColor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//red</span><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">displayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token string">'use strict'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">displayColor</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TypeError: Cannot read property 'color' of null</span></code></pre><p>this的四种绑定规则：默认绑定、隐式绑定、显式绑定和new绑定，</p><p>分别对应函数的四种调用方式：独立调用、方法调用、间接调用和构造函数调用。</p><p>分清这四种绑定规则不算难，比较麻烦的是需要练就火眼金睛，识别出隐式丢失的情况</p><p>说到底，javascript如此复杂的原因是因为函数过于强大。因为，函数是对象，所以<code>原型链</code>比较复杂；因为函数可以作为值被传递，所以<code>执行环境栈</code>比较复杂；同样地，因为函数具有多种调用方式，所以this的绑定规则也比较复杂</p><p>只有理解了函数，才算理解了javascript，所以后面会详细写一篇文章专门叙述函数相关的内容。</p><h2 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h2><ol><li>是否是new绑定？如果是，this绑定的是新创建的对象</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>是否是显式绑定？如果是，this绑定的是指定的对象</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>是否是隐式绑定？如果是，this绑定的是属于的对象</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ol start="4"><li>如果都不是，则使用默认绑定</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><code>ES6</code> 胖箭头函数 <code>=&gt;</code> 相信大家应该用的得心应手了，这里要说的是，箭头函数是根据当前的词法作用域而不是根据this机制顺序来决定this，所以箭头函数会继承外层函数调用的this绑定，而无论this绑定什么。</p><p>关于箭头函数的更多用法，我们会在<code>Lean ES6</code> 的文章中详细介绍，这里就不做多余笔墨。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//形式上等价于</span><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实质上等价于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> test<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span>foo<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.cnblogs.com/xiaohuochai/p/5735901.html">深入理解this机制</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-vue</title>
      <link href="2020/10/27/web/vue/electron-vue/"/>
      <url>2020/10/27/web/vue/electron-vue/</url>
      
        <content type="html"><![CDATA[<p>最近喵到一个开源项目 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> ，感觉还不错，顺便翻了下大佬的博客，发现有个实战系列<a href="%5Bhttps://molunerfinn.com/electron-vue-1/#%E5%89%8D%E8%A8%80%5D(https://molunerfinn.com/electron-vue-1/#%E5%89%8D%E8%A8%80)">Electron-vue开发实战</a>，于是趁机搞个<code>Todo</code>练练手，学习一波<a href="https://github.com/SimulatedGREG/electron-vue">Electron-vue</a>，以下大部分代码来自大佬的博客，所以感兴趣的去看下大佬的博客吧，我只是搬运工小弟。感觉如果有开发过<code>java swing</code>或其他<code>gui</code>的应该都大同小异。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-none"><code class="language-none"># 全局安装vue-clinpm install -g vue-cli# 然后使用vue-cli来安装electron-vue的模板vue init simulatedgreg&#x2F;electron-vue electron-vue-storage# 安装依赖cd electron-vue-storageyarn# 进入开发模式yarn run dev</code></pre><p>大概有一个粗略的认识。<code>electron</code>的开发其实包括了两个部分，一个是<code>main</code>进程的相关开发，一个是<code>renderer</code>进程的相关开发。对于<code>renderer</code>进程的开发对于大多数前端开发人员来说不难。<code>main</code>进程的相关开发，从需求出发，从工程本身的需要出发，那么只需要用到的时候再去学习即可。不过要对<code>Node.js</code>能做到的事有个概念——它并不是万能的。</p><h2 id="Main-amp-Renderer"><a href="#Main-amp-Renderer" class="headerlink" title="Main &amp; Renderer"></a>Main &amp; Renderer</h2><p>简单来说，<code>Main</code> 进程管理的是我们看到的这个<code>app窗口</code>(<a href="https://www.electronjs.org/docs/api/browser-window">browser-window</a>) ，<code>Renderer</code> 进程对应的就是我们属性的界面的<code>UI渲染</code> 。不过实际上，当然不仅如此，下面一张图能够把它们所支持、管理的<code>electron</code>或者原生的模块大致列出来：</p><p><img src="http://blog.res.jianchengwang.info/electron-vue/main_renderer.png" alt="Main&amp;Renderer process tree" loading="lazy"></p><h3 id="Main进程开发"><a href="#Main进程开发" class="headerlink" title="Main进程开发"></a>Main进程开发</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> app<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'electron'</span> <span class="token comment">// 从electron引入app和BrowserWindow</span><span class="token keyword">let</span> mainWindow<span class="token keyword">const</span> winURL <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span>  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:9080</span><span class="token template-punctuation string">`</span></span> <span class="token comment">// 开发模式的话走webpack-dev-server的url</span>  <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/index.html</span><span class="token template-punctuation string">`</span></span><span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建窗口</span>  <span class="token comment">/**   * Initial window options   */</span>  mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    height<span class="token operator">:</span> <span class="token number">563</span><span class="token punctuation">,</span>    useContentSize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    width<span class="token operator">:</span> <span class="token number">1000</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个窗口</span>  mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>winURL<span class="token punctuation">)</span> <span class="token comment">// 加载窗口的URL -> 来自renderer进程的页面</span>  mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span> <span class="token comment">// app准备好的时候创建窗口</span></code></pre><p>暂且先不管渲染进程里的页面长什么样，在<code>app</code>准备好的时候打开一个窗口只需要调用一个创建<code>BrowserWindow</code>的方法即可。</p><p><code>Main进程</code>里的开发有点当年写<code>jQuery</code>的样子，比较多的是<code>事件驱动型</code>的写法。</p><h4 id="app"><a href="#app" class="headerlink" title="app"></a>app</h4><p>首先需要注意的是<a href="https://electronjs.org/docs/api/app">app</a>的模块。这个模块是electron应用的骨架。它掌管着整个应用的生命周期钩子，以及很多其他事件钩子。</p><p>app的常用生命周期钩子如下：</p><ul><li><code>will-finish-launching</code> 在应用完成基本启动进程之后触发</li><li><code>ready</code> 当electron完成初始化后触发</li><li><code>window-all-closed</code> 所有窗口都关闭的时候触发，在windows和linux里，所有窗口都退出的时候<strong>通常</strong>是应用退出的时候</li><li><code>before-quit</code> 退出应用之前的时候触发</li><li><code>will-quit</code> 即将退出应用的时候触发</li><li><code>quit</code> 应用退出的时候触发</li></ul><p>而我们通常会在<code>ready</code>的时候执行创建应用窗口、创建应用菜单、创建应用快捷键等初始化操作。而在<code>will-quit</code>或者<code>quit</code>的时候执行一些清空操作，比如解绑应用快捷键。</p><p>特别的，在非<code>macOS</code>的系统下，通常一个应用的所有窗口都退出的时候，也是这个应用退出之时。所以可以配合<code>window-all-closed</code>这个钩子来实现。</p><p>这个需要用到哪些钩子函数，喵下官网文档吧，都差不多的东东，这里不多叙述。</p><h4 id="Browser-Window"><a href="#Browser-Window" class="headerlink" title="Browser Window"></a>Browser Window</h4><p>下面我们来看看创建一个BrowserWindow的常用配置：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> window<span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    height<span class="token operator">:</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token comment">// 高</span>    width<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token comment">// 宽</span>    show<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 创建后是否显示</span>    frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否创建frameless窗口</span>    fullscreenable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许全屏</span>    center<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否出现在屏幕居中的位置</span>    backgroundColor<span class="token operator">:</span> <span class="token string">'#fff'</span> <span class="token comment">// 背景色，用于transparent和frameless窗口</span>    titleBarStyle<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token comment">// 标题栏的样式，有hidden、hiddenInset、customButtonsOnHover等</span>    resizable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否允许拉伸大小</span>    transparent<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否是透明窗口（仅macOS）</span>    vibrancy<span class="token operator">:</span> <span class="token string">'ultra-dark'</span><span class="token punctuation">,</span> <span class="token comment">// 窗口模糊的样式（仅macOS）</span>    webPreferences<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      backgroundThrottling<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 当页面被置于非激活窗口的时候是否停止动画和计时器</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ... 以及其他可选配置</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> window <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>同<code>app</code> 一样，也有很多钩子函数，这里也是直接跳过。</p><h4 id="Tray"><a href="#Tray" class="headerlink" title="Tray"></a>Tray</h4><p>简单来说，就是不同系统任务栏里的图标组件了。</p><p>需要注意的是，<code>windows</code>和<code>macOS</code>里，图标的大小都是<code>16*16</code>px。<code>macOS</code>下顶部栏的图标通常都是走<code>黑白</code>路线，所以可以为两种系统分别准备不同的图标。<code>Tray</code> 生成代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createTray</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> menubarPic <span class="token operator">=</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">'darwin'</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__static<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/menubar.png</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__static<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/menubar-nodarwin.png</span><span class="token template-punctuation string">`</span></span>  tray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tray</span><span class="token punctuation">(</span>menubarPic<span class="token punctuation">)</span>  <span class="token keyword">const</span> contextMenu <span class="token operator">=</span> <span class="token comment">// ...菜单</span>  tray<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'right-click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 右键点击</span>    window<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 隐藏小窗口</span>    tray<span class="token punctuation">.</span><span class="token function">popUpContextMenu</span><span class="token punctuation">(</span>contextMenu<span class="token punctuation">)</span> <span class="token comment">// 打开菜单</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  tray<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 左键点击</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">'darwin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果是macOS</span>      <span class="token function">toggleWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 打开或关闭小窗口</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果是windows</span>      window<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 隐藏小窗口</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>settingWindow <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果主窗口不存在就创建一个</span>        <span class="token function">createSettingWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        settingWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果主窗口在，就显示并激活</span>        settingWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        settingWindow<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>注意上述代码里有一个<code>$&#123;__static&#125;</code>的变量。该变量是<code>electron-vue</code>为我们暴露出来的项目根目录下的<code>static</code>文件夹的路径。通过这个路径，在开发和生产阶段都能很好的定位你的静态资源所在的目录。是个很方便的变量。</p><p>当然<code>Tray</code>并不只是一个图标而无其他作用了。Tray支持很多有用的事件。其中最关键的两个是<code>click</code>和<code>right-click</code>。分别对应鼠标左键点击和鼠标右键点击事件。</p><h5 id="鼠标左键点击事件"><a href="#鼠标左键点击事件" class="headerlink" title="鼠标左键点击事件"></a>鼠标左键点击事件</h5><ul><li>在<code>macOS</code>系统下，鼠标左键点击<code>Tray</code>的<code>icon</code>可能会出现配置菜单，也有可能会出现应用窗口。</li><li>在<code>windows</code>下，鼠标左键点击<code>Tray</code>的<code>icon</code>通常会出现应用的窗口。</li></ul><h5 id="鼠标右键点击事件"><a href="#鼠标右键点击事件" class="headerlink" title="鼠标右键点击事件"></a>鼠标右键点击事件</h5><ul><li><p>在<code>macOS</code>系统下，鼠标右键点击<code>Tray</code>的<code>icon</code>通常会出现配置菜单。</p></li><li><p>在<code>windows</code>系统下，同上。</p><p>所以一般自己根据需要写监听事件。</p></li></ul><h4 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h4><p><code>electron</code>威力强大的<code>Menu</code>组件，既能够生成系统菜单项，也能实现绑定应用常用快捷键的功能。</p><p>主要分两种。</p><ul><li>第一种是<code>app的菜单</code>。对于macOS来说就是顶部栏左侧区域的菜单项。对于windows而言就是一个窗口的标题栏下方的菜单区。</li><li>第二种是类似于<code>右键菜单</code>的菜单。</li></ul><p>第一种菜单可以通过<code>Menu.setApplicationMenu()</code>来实现。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">createMenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>      label<span class="token operator">:</span> <span class="token string">'Edit'</span><span class="token punctuation">,</span>      submenu<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">'Undo'</span><span class="token punctuation">,</span> accelerator<span class="token operator">:</span> <span class="token string">'CmdOrCtrl+Z'</span><span class="token punctuation">,</span> selector<span class="token operator">:</span> <span class="token string">'undo:'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">'Redo'</span><span class="token punctuation">,</span> accelerator<span class="token operator">:</span> <span class="token string">'Shift+CmdOrCtrl+Z'</span><span class="token punctuation">,</span> selector<span class="token operator">:</span> <span class="token string">'redo:'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'separator'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">'Cut'</span><span class="token punctuation">,</span> accelerator<span class="token operator">:</span> <span class="token string">'CmdOrCtrl+X'</span><span class="token punctuation">,</span> selector<span class="token operator">:</span> <span class="token string">'cut:'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">'Copy'</span><span class="token punctuation">,</span> accelerator<span class="token operator">:</span> <span class="token string">'CmdOrCtrl+C'</span><span class="token punctuation">,</span> selector<span class="token operator">:</span> <span class="token string">'copy:'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">'Paste'</span><span class="token punctuation">,</span> accelerator<span class="token operator">:</span> <span class="token string">'CmdOrCtrl+V'</span><span class="token punctuation">,</span> selector<span class="token operator">:</span> <span class="token string">'paste:'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token string">'Select All'</span><span class="token punctuation">,</span> accelerator<span class="token operator">:</span> <span class="token string">'CmdOrCtrl+A'</span><span class="token punctuation">,</span> selector<span class="token operator">:</span> <span class="token string">'selectAll:'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          label<span class="token operator">:</span> <span class="token string">'Quit'</span><span class="token punctuation">,</span>          accelerator<span class="token operator">:</span> <span class="token string">'CmdOrCtrl+Q'</span><span class="token punctuation">,</span>          <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    menu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第二种菜单可以通过两个步骤来展示：</p><p><strong>1.</strong> 创建菜单：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> contextMenu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>2.</strong> 展示菜单：</p><pre class="language-js" data-language="js"><code class="language-js">tray<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'right-click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 右键点击tray的时候  tray.popUpContextMenu(contextMenu) // 弹出菜单&#125;)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> contextMenu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>     label<span class="token operator">:</span> <span class="token string">'关于'</span><span class="token punctuation">,</span>     <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         title<span class="token operator">:</span> <span class="token string">'PicGo'</span><span class="token punctuation">,</span>         message<span class="token operator">:</span> <span class="token string">'PicGo'</span><span class="token punctuation">,</span>         detail<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Version: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkg<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\nAuthor: Molunerfinn\nGithub: https://github.com/Molunerfinn/PicGo</span><span class="token template-punctuation string">`</span></span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     label<span class="token operator">:</span> <span class="token string">'打开详细窗口'</span><span class="token punctuation">,</span>     <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>settingWindow <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">createSettingWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         settingWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         settingWindow<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         settingWindow<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     label<span class="token operator">:</span> <span class="token string">'选择默认图床'</span><span class="token punctuation">,</span>     type<span class="token operator">:</span> <span class="token string">'submenu'</span><span class="token punctuation">,</span>     submenu<span class="token operator">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">&#123;</span>         label<span class="token operator">:</span> <span class="token string">'微博图床'</span><span class="token punctuation">,</span>         type<span class="token operator">:</span> <span class="token string">'radio'</span><span class="token punctuation">,</span>         checked<span class="token operator">:</span> db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'weibo'</span><span class="token punctuation">,</span>         <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">,</span> <span class="token string">'weibo'</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token punctuation">&#123;</span>         label<span class="token operator">:</span> <span class="token string">'七牛图床'</span><span class="token punctuation">,</span>         type<span class="token operator">:</span> <span class="token string">'radio'</span><span class="token punctuation">,</span>         checked<span class="token operator">:</span> db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'qiniu'</span><span class="token punctuation">,</span>         <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">,</span> <span class="token string">'qiniu'</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token punctuation">&#123;</span>         label<span class="token operator">:</span> <span class="token string">'腾讯云COS'</span><span class="token punctuation">,</span>         type<span class="token operator">:</span> <span class="token string">'radio'</span><span class="token punctuation">,</span>         checked<span class="token operator">:</span> db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'tcyun'</span><span class="token punctuation">,</span>         <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">,</span> <span class="token string">'tcyun'</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token punctuation">&#123;</span>         label<span class="token operator">:</span> <span class="token string">'又拍云图床'</span><span class="token punctuation">,</span>         type<span class="token operator">:</span> <span class="token string">'radio'</span><span class="token punctuation">,</span>         checked<span class="token operator">:</span> db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'upyun'</span><span class="token punctuation">,</span>         <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'picBed.current'</span><span class="token punctuation">,</span> <span class="token string">'upyun'</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     label<span class="token operator">:</span> <span class="token string">'打开更新助手'</span><span class="token punctuation">,</span>     type<span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>     checked<span class="token operator">:</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'picBed.showUpdateTip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">click</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">const</span> value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'picBed.showUpdateTip'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       db<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'picBed.showUpdateTip'</span><span class="token punctuation">,</span> <span class="token operator">!</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>     role<span class="token operator">:</span> <span class="token string">'quit'</span><span class="token punctuation">,</span>     label<span class="token operator">:</span> <span class="token string">'退出'</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> tray<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'right-click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   tray<span class="token punctuation">.</span><span class="token function">popUpContextMenu</span><span class="token punctuation">(</span>contextMenu<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>基本上有了上述的几个基本模块，我们的一个应用的骨架是基本搭建好了，拥有窗口、任务栏应用图标和菜单项。其他的Main进程的模块，并不是必须的，当会用到的时候将在之后的文章里逐步提及。下面我们将来看<code>renderer进程</code>的开发。</p><h3 id="Renderer进程开发"><a href="#Renderer进程开发" class="headerlink" title="Renderer进程开发"></a>Renderer进程开发</h3><p>对于<code>electron-vue</code>而言，renderer进程其实大部分就是在写我们平时常写的前端页面罢了。不过相对于平时在浏览器里写的页面，在electron里写页面的时候你还能用到不少非浏览器端的模块，比如<code>fs</code>，比如<code>electron</code>通过<code>remote</code>模块暴露给<code>renderer</code>进程的模块。接下去我们来看看<code>renderer</code>进程有哪些需要注意的地方。</p><h4 id="使用Hash模式"><a href="#使用Hash模式" class="headerlink" title="使用Hash模式"></a>使用Hash模式</h4><p>往常我们在写Vue的时候都比较喜欢开启路由的<code>history</code>模式，因为这样在浏览器的地址栏上看起来比较好看——没有hash的<code>#</code>号，就如同请求后端的url一般。然而需要注意的是，<code>history</code>模式需要后端服务器的支持。</p><p>可能很多朋友平时开发的时候没有感觉，那是因为vue-cli里在开发模式下启动的<code>webpack-dev-server</code>帮你实现了服务端的<code>history-fallback</code>的特性。所以在实际部署的时候，至少都需要在你的web服务器程序诸如<code>nginx</code>、<code>apache</code>等配置相关的规则，让前端路由返回给<code>vue-router</code>去处理。</p><p>而electron里也是如此。在开发模式下，由于使用的是<code>webpack-dev-server</code>开启的服务器，所以<code>BrowserWindow</code>加载的是来自于类似<code>http://localhost:9080</code>这样的地址的页面。而在生产模式下，却是使用的<code>file://</code>的协议，比如<code>file://$&#123;__dirname&#125;/index.html</code>来指定窗口加载的页面。</p><p>因此，从上面的表述你也能明白了。假如我有一个子路由地址为<code>child</code>。如果不启用Hash模式，在开发模式下没啥问题，<code>http://localhost:9080/child</code>，但是在生产模式下，<code>file://$&#123;__dirname&#125;/index.html/child</code>却是无法匹配的一条路径。因此在electron下，<code>vue-router</code>请不要使用<code>history</code>模式，而使用默认的<code>hash</code>模式。</p><p>那么上面的问题就迎刃而解，变为<code>file://$&#123;__dirname&#125;/index.html#child</code>即可。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> winURL <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span>  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:9080</span><span class="token template-punctuation string">`</span></span>  <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/index.html</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> settingWinURL <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span>  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:9080/#setting/upload</span><span class="token template-punctuation string">`</span></span>  <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/index.html#setting/upload</span><span class="token template-punctuation string">`</span></span></code></pre><h4 id="实现titlebar"><a href="#实现titlebar" class="headerlink" title="实现titlebar"></a>实现titlebar</h4><p>在上面讲<code>BrowserWindow</code>的时候，我说到有时为了应用的美观，并不想让我们的应用窗口采用系统默认的<code>titlebar</code>，而想用自己写的来实现。这样的话就在创建你的<code>BrowserWindow</code>的配置里加上一句</p><pre class="language-js" data-language="js"><code class="language-js">titleBarStyle<span class="token operator">:</span> <span class="token string">'hidden'</span></code></pre><p>这样就行了。然后你就可以自行在renderer进程的页面里模拟一个顶部的<code>titlebar</code>了，比如上面提到的<code>PicGo</code>的<code>titlebar</code>的样子。实际上代码也很简单：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fake-title-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      PicGo - &#123;&#123; version &#125;&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handle-bar<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>os === <span class="token punctuation">'</span>win32<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- 如果是windows系统 就加上模拟的操作按钮--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-minus<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minimizeWindow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-close<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeWindow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>然后把这个<code>titlebar</code>的<code>position</code>置顶即可。</p><p>不过在平时的使用中，我们要注意，一般我们鼠标按住<code>titleba</code>r的时候是可以拖动窗口的。但是如果我们在不加可拖拽的属性之前，我们自己写的<code>titlebar</code>是不具备这样的特性的。要加上这个特性也很简单：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.fake-title-bar</span> <span class="token punctuation">&#123;</span>  -webkit-app-region drag<span class="token punctuation">&#125;</span></code></pre><p>只需一条CSS，即可让你的titlebar可以拖拽。</p><p>不过在windows下，操作区的按钮（缩小、放大、关闭）长按应该是不能拖拽的，所以还需要：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.handle-bar</span> <span class="token punctuation">&#123;</span>  -webkit-app-region no-drag<span class="token punctuation">&#125;</span></code></pre><p>变成<code>no-drag</code>，这样就实现了我们自己生成应用的<code>titlebar</code>了。</p><h4 id="drag-amp-drop-的避免"><a href="#drag-amp-drop-的避免" class="headerlink" title="drag &amp; drop 的避免"></a>drag &amp; drop 的避免</h4><p>通常我们用<code>Chrome</code>的时候，有个特性是比如你往<code>Chrome</code>里拖入一个<code>pdf</code>，它就会自动用<code>内置的pdf阅读器</code>打开。你往<code>Chrome</code>里拖入一张图片，它就会打开这张图片。由于我们的<code>electron</code>应用的<code>BrowserWindow</code>其实内部也是一个浏览器，所以这样的特性依然存在。而这也是很多人没有注意的地方。也就是当你开发完一个<code>electron</code>应用之后，往里拖入一张图片，一个<code>pdf</code>等等，如果不是一个可拖拽区域，那么它就不应该打开这张图、这个<code>pdf</code>，而是将其排除在外。</p><p>所以我们将在全局监听<code>drag</code>和<code>drop</code>事件，当用户拖入一个文件但是又不是拖入可拖拽区域的时候，应该将其屏蔽掉。因为所有的页面都应该要有这样的特性，所以我写了一个<code>vue</code>的<code>mixin</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disableDragEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">disableDragEvent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragenter'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disableDrag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disableDrag<span class="token punctuation">)</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disableDrag<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">disableDrag</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> dropzone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'upload-area'</span><span class="token punctuation">)</span> <span class="token comment">// 这个是可拖拽的上传区</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dropzone <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>dropzone<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>effectAllowed <span class="token operator">=</span> <span class="token string">'none'</span>        e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">'none'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'dragenter'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disableDrag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disableDrag<span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disableDrag<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样在全局引入这个<code>mixin</code>即可。</p><h4 id="remote模块的使用"><a href="#remote模块的使用" class="headerlink" title="remote模块的使用"></a>remote模块的使用</h4><p><code>remote</code>模块是<code>electron</code>为了让一些原本在<code>Main</code>进程里运行的模块也能在<code>renderer</code>进程里运行而创建的。以下说几个我们会用到的。</p><p>在<code>electron-vue</code>里内置了<code>vue-electron</code>这个模块，可以在<code>vue</code>里很方便的使用诸如<code>this.$electron.remote.xxx</code>来使用<code>remote</code>的模块。</p><h5 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h5><p><code>shell</code>模块的官方说明是：<code>Manage files and URLs using their default applications.</code>也就是使用文件或者<code>URL</code>的默认应用。通常我们可以用其让默认图片应用打开一张图片、让默认浏览器打开一个<code>url</code>。</p><p>如果我们想在<code>renderer</code>进程里点击一个按钮然后在默认浏览器里打开一个<code>url</code>的话就可以这样：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openURL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">openURL</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$electron<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>shell<span class="token punctuation">.</span><span class="token function">openExternal</span><span class="token punctuation">(</span><span class="token string">'https://github.com/Molunerfinn/PicGo'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>更多请查看<a href="https://electronjs.org/docs/api/shell">文档</a></p><h5 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h5><p>有的时候我们会有打开原生的对话框的需求，比如软件说明啥的</p><pre class="language-js" data-language="js"><code class="language-js">s<span class="token function">openDialog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$electron<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token string">'PicGo'</span><span class="token punctuation">,</span>    message<span class="token operator">:</span> <span class="token string">'PicGo'</span><span class="token punctuation">,</span>    detail<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Version: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkg<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\nAuthor: Molunerfinn\nGithub: https://github.com/Molunerfinn/PicGo</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>更多请查看<a href="https://electronjs.org/docs/api/dialog">文档</a></p><h4 id="Menu-amp-Browser-Window的应用"><a href="#Menu-amp-Browser-Window的应用" class="headerlink" title="Menu &amp; Browser-Window的应用"></a>Menu &amp; Browser-Window的应用</h4><p>使用<code>Menu</code>可能很多人能够理解。但是为什么要使用<code>BrowserWindow</code>呢？因为需要定位你打开<code>Menu</code>的窗口。</p><p>在<code>PicGo</code>里，有一个点击按钮打开<code>Menu</code>的操作，大致如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">buildMenu</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>menu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">openDialog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">popup</span><span class="token punctuation">(</span>remote<span class="token punctuation">.</span>getCurrentWindow<span class="token punctuation">)</span> <span class="token comment">// 获取当前打开Menu的窗口</span>  <span class="token punctuation">&#125;</span></code></pre><p>这里的<code>menu.popup</code>就需要你指定一下打开这个<code>menu</code>的窗口。它将自动定位你点击的位置而弹出。</p><h4 id="Main-amp-Renderer通信"><a href="#Main-amp-Renderer通信" class="headerlink" title="Main &amp; Renderer通信"></a>Main &amp; Renderer通信</h4><h5 id="ipcMain-amp-ipcRenderer"><a href="#ipcMain-amp-ipcRenderer" class="headerlink" title="ipcMain &amp; ipcRenderer"></a>ipcMain &amp; ipcRenderer</h5><p>在<code>Vue</code>里，如果是非父子组件通信，很常用的是通过<code>Bus Event</code>来实现的。而electron里的不同进程间的通信其实也很类似，是通过<code>ipcMain</code>和<code>ipcRenderer</code>来实现的。其中<code>ipcMain</code>是在<code>main</code>进程里使用的，而<code>ipcRenderer</code>是在<code>renderer</code>进程里使用的。</p><p>官网的例子简洁明了</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// In main process.</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>ipcMain<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'asynchronous-message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>  <span class="token comment">// prints "ping"</span>  event<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'asynchronous-reply'</span><span class="token punctuation">,</span> <span class="token string">'pong'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'synchronous-message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>  <span class="token comment">// prints "ping"</span>  event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token string">'pong'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// In renderer process (web page).</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>ipcRenderer<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">sendSync</span><span class="token punctuation">(</span><span class="token string">'synchronous-message'</span><span class="token punctuation">,</span> <span class="token string">'ping'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// prints "pong"</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'asynchronous-reply'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token comment">// prints "pong"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'asynchronous-message'</span><span class="token punctuation">,</span> <span class="token string">'ping'</span><span class="token punctuation">)</span></code></pre><p>其中<code>ipcMain</code>只有监听来自<code>ipcRenderer</code>的某个事件后才能返回给<code>ipcRenderer</code>值。而<code>ipcRenderer</code>既可以收，也可以发。</p><p>那么问题就来了，如何让<code>ipcMain</code>主动发送消息呢？或者说让<code>Main进程</code>主动发送消息给<code>ipcRenderer</code>。</p><p>首先要明确的是，<code>ipcMain</code>无法主动发消息给<code>ipcRenderer</code>。因为<code>ipcMain</code>只有<code>.on()</code>方法没有<code>.send()</code>的方法。所以只能用其他方法来实现。有办法么？有的，用<code>webContents</code>。</p><h5 id="webContents"><a href="#webContents" class="headerlink" title="webContents"></a>webContents</h5><p><code>webContents</code>其实是<code>BrowserWindow</code>实例的一个属性。也就是如果我们需要在<code>Main进程</code>里给某个窗口某个页面发送消息，则必须通过<code>win.webContents.send()</code>方法来发送。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// In main process</span><span class="token keyword">let</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'img-files'</span><span class="token punctuation">,</span> imgs<span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// In renderer process</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'img-files'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intro to vue</title>
      <link href="2020/10/27/web/vue/intro-to-vue/"/>
      <url>2020/10/27/web/vue/intro-to-vue/</url>
      
        <content type="html"><![CDATA[<p>最近喵了下 <code>introducction to vue.js</code> 视频感觉还不错，如果感兴趣，<a href="https://frontendmasters.com/courses/vue/">请戳</a>。下面主要根据视频作者<code>Sarah Drasner</code> 的<code>ppt</code> 简单做下笔记，当然如果要系统过一遍的话还是推荐看官方文档。</p><a id="more"></a><h2 id="Directives-amp-Data-Rendering"><a href="#Directives-amp-Data-Rendering" class="headerlink" title="Directives &amp; Data Rendering"></a>Directives &amp; Data Rendering</h2><p>很多指令官方文档都有很详细的介绍，这里不多赘述。</p><table><thead><tr><th align="left">Name</th><th>Shortcut</th><th>Purpose</th><th>Example</th></tr></thead><tbody><tr><td align="left"><code>v-if,v-else-if,v-else</code></td><td>none</td><td>Conditional Rendering</td><td><code>&lt;g v-if=&quot;condition===&#39;A&#39;&quot; /&gt;&lt;g v-else-if=&quot;condition===&#39;B&#39;&quot; /&gt;&lt;g v-else /&gt;</code></td></tr><tr><td align="left"><code>v-bind</code></td><td><code>:</code></td><td>Bind attributes  dynamically or pass props</td><td><code>&lt;div :style=&quot;&#123;color: red&#125;&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td align="left"><code>v-on</code></td><td><code>@</code></td><td>Attaches an event listener to the element</td><td><code>&lt;button @click=&quot;&quot;&gt;&lt;/button&gt;</code></td></tr><tr><td align="left"><code>v-model</code></td><td>none</td><td>Creates two-way binding，like combian with<code>v-bind</code> and <code>v-on</code></td><td><code>&lt;input v-model=&quot;message&quot; /&gt;</code></td></tr><tr><td align="left"><code>v-pre</code></td><td>none</td><td>Skip compilling for raw content, can boost performance</td><td><code>&lt;div v-pre&gt;row content with not methods&lt;/div&gt;</code></td></tr><tr><td align="left"><code>v-show</code></td><td>none</td><td>Will show or hide the <code>component/element</code> based on state, but will leave it int the <code>DOM</code> without unmounting(unlike <code>v-if</code>)</td><td><code>&lt;child v-show=&quot;showComponent&quot;&gt;&lt;/child&gt;</code></td></tr><tr><td align="left"></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Methods-Computed-Watch"><a href="#Methods-Computed-Watch" class="headerlink" title="Methods, Computed, Watch"></a>Methods, Computed, Watch</h2><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><pre class="language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">addComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>newComment<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>newComment <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p><code>Computed</code> properties are calculations that will be<code> cached</code> and will only update when needed.Highly performant but use with understandin</p><pre class="language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">filteredFilms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterText<span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ratingsInfo<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p><code>Reactive programming</code> is programming with asynchronous data streams. (响应式编程)</p><p>Vue.js, MobX or Ractive.js all use a variation of <strong>getters/setters</strong>. (对象原型链get,set方法)</p><p>Vue takes the object, walks through its properties and converts them to <strong>getter/setters</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    counter<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>Vue</code> cannot detect property addition or deletion so we create this object to keep track</p><hr><ol><li><p>Each component has a <code>watcher instance</code>.</p></li><li><p>The <code>properties</code> touched by the <code>watcher</code> during the <code>render</code> are registered as dependencies</p></li><li><p>When the <code>setter</code> is triggered, it lets the <code>watcher</code> know, and causes the component to re-render.</p></li></ol><hr><p>The <code>Vue instance</code> is the middleman between the <code>DOM</code> and <code>the business logic</code></p><p><code>Watch</code> updates the <code>DOM</code> only if it’s required- performing calculations in JS is really performant but accessing the DOM is not. So we have a <code>Virtual DOM which</code> is like a copy, but parsed in JavaScript</p><p>It will only update the <code>DOM</code>for things that need to be changed, which is faster.</p><pre class="language-js" data-language="js"><code class="language-js">watch <span class="token punctuation">&#123;</span>    <span class="token function">counter</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The counter has changed'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>int the short, A collection of elements that are encapsulated into a group that can be accessed through one single element.(节点，功能的集合)</p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>Vue.js uses <code>HTML-based template syntax</code> to bind the Vue instance to the DOM, very useful for components.</p><p><code>Templates</code> are optional, you can also <a href="https://vuejs.org/v2/guide/render-function.html">write render functions</a> with optional <code>JSX</code> support.</p><h3 id="render-function"><a href="#render-function" class="headerlink" title="render function"></a>render function</h3><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>blogTitle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blogTitle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>用到的的时候喵下<code>createElement</code> 方法文档用法即可，</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// @returns &#123;VNode&#125;</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token comment">// &#123;String | Object | Function&#125;</span>  <span class="token comment">// 一个 HTML 标签名、组件选项对象，或者</span>  <span class="token comment">// resolve 了上述任何一种的一个 async 函数。必填项。</span>  <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token comment">// &#123;Object&#125;</span>  <span class="token comment">// 一个与模板中属性对应的数据对象。可选。</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// (详情见下一节)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// &#123;String | Array&#125;</span>  <span class="token comment">// 子级虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span>  <span class="token comment">// 也可以使用字符串来生成“文本虚拟节点”。可选。</span>  <span class="token punctuation">[</span>    <span class="token string">'先写一些文字'</span><span class="token punctuation">,</span>    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'一则头条'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">createElement</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        someProp<span class="token operator">:</span> <span class="token string">'foobar'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>Each <code>component instance</code>has its own <code>isolated scope</code>, so <code>data</code> must be a <code>function</code>.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        counter<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>Passing data down from the parent to the child.(父组件传参给子组件)</p><pre class="language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'prop1'</span><span class="token punctuation">,</span>    <span class="token string">'prop2'</span><span class="token punctuation">]</span></code></pre><p>or <code>props</code> have <code>type &amp; validation </code></p><pre class="language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  text<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> String<span class="token punctuation">,</span>        required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'hello mr. magoo'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>Objects and Arrays</code> need their <code>defaults</code> to be returned a <code>function</code></p><pre class="language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    text<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Object<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token string">'hello mr. magoo'</span> <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>use static value</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>child count<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span></code></pre><p>use the state of the parent, We use <code>v-bind</code>or<code> :</code> to dynamically bind props to data on the parent</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>child <span class="token operator">:</span>count<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span></code></pre><h3 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h3><p> The child is reporting it’s activity to the parent by <code>$emit</code> (子组件传值给父组件)</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">@myEvent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span></code></pre><pre class="language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">fireEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'myEvent'</span><span class="token punctuation">,</span> eventValueOne<span class="token punctuation">,</span> eventValueTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>插槽，相对灵活，简单来说，就是定义一块<code>html模板</code>，由父组件决定是否显示，该怎么显示。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childarea<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>It's a veritable slot machine<span class="token operator">!</span><span class="token operator">&lt;</span>br<span class="token operator">></span>     Ha ha aw<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>We can use slots to populate content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>This is slot number one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-child</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>This is slot number two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>I can put more info in, too!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>可以由默认插槽，匿名插槽</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>default slot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre><p>当然也可以有多个插槽，需要命名</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerinfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerinfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I will populate the headerinfo slot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>也可以传数据，当然数据只能是子组件内部的数据，父组件提供样式。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>可以使被包含的组件保留状态，或避免重新渲染</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- name 为 a 的组件将被缓存！ --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 除了name 为 a 的组件将被缓存！ --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><p>跟<code>router</code>结合，实现有的路由视图缓存，仅限单页面应用。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// routes 配置</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Home<span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      keepAlive<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 需要被缓存</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/:id'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'edit'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Edit<span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      keepAlive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 不需要被缓存</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 这里是会被缓存的视图组件，比如 Home！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre><h2 id="Filters-Mixins-Directive-amp-Plugin"><a href="#Filters-Mixins-Directive-amp-Plugin" class="headerlink" title="Filters, Mixins, Directive, &amp; Plugin"></a>Filters, Mixins, Directive, &amp; Plugin</h2><h3 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h3><p>The first thing to understand about filters is that they aren’t replacements for methods, computed values, or watchers, <strong>because filters don’t transform the data, just the output that the user sees.</strong>(过滤器不转换数据，只过滤输出)</p><p>Two ways to register a new filter:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//global</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'filterName'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token comment">// thing to transform</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//locally, like methods or computed</span>filters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">filterName</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token comment">// thing to transform</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// use</span><span class="token operator">:</span><span class="token operator">=</span><span class="token string">"data | filterA | filterB(arg1,arg2)"</span></code></pre><h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p>这是一种常见的情况:您有两个非常相似的组件，它们共享相同的基本功能，但是它们之间有足够多的不同之处，因此您面临一个十字路口:我要将这个组件分成两个不同的组件吗?或者我保留一个组件，但创建足够的变化与道具，我可以改变每一个。</p><p><code>mixin</code>允许您封装一项功能，以便可以在整个应用程序的不同组件中使用它。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//modal</span><span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">'#modal'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      isShowing<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    appChild<span class="token operator">:</span> Child  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//tooltip</span><span class="token keyword">const</span> Tooltip <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">'#tooltip'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      isShowing<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    appChild<span class="token operator">:</span> Child  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到冗余的代码片段可以封装起来，改写后如下，</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      isShowing<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">'#modal'</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>toggle<span class="token punctuation">]</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    appChild<span class="token operator">:</span> Child  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Tooltip <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">'#tooltip'</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>toggle<span class="token punctuation">]</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    appChild<span class="token operator">:</span> Child  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>默认情况下，<code>mixin</code> 将首先应用，然后应用<code>component</code>，这样我们就可以根据需要覆盖它。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//mixin</span><span class="token keyword">const</span> hi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//vue instance or component</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from Vue instance!'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Output in console</span><span class="token comment">//> hello from mixin!</span><span class="token comment">//> hello from Vue instance!</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//mixin</span><span class="token keyword">const</span> hi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//vue instance or component</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from Vue instance!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Output in console</span><span class="token comment">//> hello from Vue instance!</span><span class="token comment">//> hello from Vue instance!</span></code></pre><p><code>Global Mixins</code> 会应用于每一个组件，不过一般很少用到</p><pre class="language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h3><p><code>v-if</code>， <code>v-bind</code> 这些都是内置的指令，当然我们可以根据自己需要自定义指令</p><pre class="language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'tack'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'fixed'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-tack</span><span class="token punctuation">></span></span>I will now be tacked onto the page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>当然指令也可以接收参数值</p><p><code>v-example=&quot;string&quot;</code>， 这将使用字符串作为表达式。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stateExample<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I will show up if stateExample is true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>&lt;strong>this is an example of a string in some text&lt;/strong><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><code>v-example:arg=&quot;value&quot;</code>，这允许我们向指令传递一个参数。在下面的示例中，我们将绑定到一个类，并使用一个单独存储的对象对其进行样式设置。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someClassObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-example:arg.modifier=&quot;value&quot; </code>，这允许我们使用修饰符。下面的示例允许我们在单击事件上调用<code>preventDefault()</code>。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>传递一个参数</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">v-tack:</span>left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I'll now be offset from the left instead of the top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class="language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'tack'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'fixed'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg <span class="token operator">==</span> <span class="token string">'left'</span> <span class="token operator">?</span> <span class="token string">'left'</span> <span class="token operator">:</span> <span class="token string">'top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>传递多个参数</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-tack</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; top: <span class="token punctuation">'</span>40<span class="token punctuation">'</span>, left: <span class="token punctuation">'</span>100<span class="token punctuation">'</span> &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Stick me 40px from the top of thepage and 100px from the left of the page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class="language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'tack'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'fixed'</span><span class="token punctuation">;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ol><li>添加全局方法或者属性。如：<a href="https://github.com/karol-f/vue-custom-element">vue-custom-element</a></li><li>添加全局资源：指令/过滤器/过渡等。如 <a href="https://github.com/vuejs/vue-touch">vue-touch</a></li><li>通过全局混入来添加一些组件选项。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 <a href="https://github.com/vuejs/vue-router">vue-router</a></li></ol><p>使用</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 调用 `MyPlugin.install(Vue)`</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> someOption<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...组件选项</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>开发</p><pre class="language-js" data-language="js"><code class="language-js">MyPlugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 添加全局方法或属性</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">myGlobalMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 2. 添加全局资源</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 3. 注入组件选项</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 4. 添加实例方法</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">methodOptions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h2><p>使用构建工具，可以让我们更方便的编写组件，并且使用<code>es6</code> 等语法。</p><pre class="language-shell" data-language="shell"><code class="language-shell">yarn global add @vue&#x2F;cli @vue&#x2F;cli-service-globalvue create project or vue uicd projectyarnvue serve or yarn run dev</code></pre><p>简单的<code>.vue</code> 模板组件</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Write your <span class="token constant">HTML</span> <span class="token keyword">with</span> Vue <span class="token keyword">in</span> here <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// Write your Vue component logic here</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>  <span class="token comment">/* Write your styles for the component in here */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>引入组件</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token keyword">new</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">new</span><span class="token operator">></span><span class="token keyword">import</span> New <span class="token keyword">from</span> <span class="token string">'./components/New.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    New  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>也可以给组件取别名</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>app<span class="token operator">-</span><span class="token keyword">new</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span><span class="token keyword">new</span><span class="token operator">></span><span class="token keyword">import</span> New <span class="token keyword">from</span> <span class="token string">'./components/New.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    appNew<span class="token operator">:</span> New  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Vue-Router-amp-NUXT"><a href="#Vue-Router-amp-NUXT" class="headerlink" title="Vue Router &amp; NUXT"></a>Vue Router &amp; NUXT</h2><h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h3><p>官方文档很详细了，这里不多叙述</p><h3 id="NUXT"><a href="#NUXT" class="headerlink" title="NUXT"></a>NUXT</h3><p>服务端渲染</p><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>组件数量如果比较多，组件之间可能不存在父子组件的关系，这时候就要引入状态管理的机制了。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    counter<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//showing things, not mutating state</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">tripleCounter</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//mutating the state</span>  <span class="token comment">//mutations are always synchronous</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//showing passed with payload, represented as num</span>    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">//commits the mutation, it's asynchronous</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// showing passed with payload, represented as asynchNum (an object)</span>    <span class="token function-variable function">asyncIncrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> asyncNum</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//the asyncNum objects could also just be static amounts</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> asyncNum<span class="token punctuation">.</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> asyncNum<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> <span class="token function">actionA</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token keyword">async</span> <span class="token function">actionB</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span> <span class="token comment">// 等待 actionA 完成</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotOtherData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getOtherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在组件本身上，我们将<code>使用computed for getters</code>(这是有意义的，因为这个值已经为我们计算过了)，使用<code>commit</code>访问<code>mutations</code>的方法，以及使用<code>dispatch</code>访问<code>actions</code>的方法</p><pre class="language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>tripleCounter<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">asyncIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'asyncIncrement'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用<code>spred opetrator</code></p><pre class="language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">localComputed</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 使用对象展开运算符将此对象混入到外部对象中</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token comment">// map this.increment() to this.$store.commit('increment')</span>      <span class="token string">'increment'</span><span class="token punctuation">,</span>       <span class="token string">'decrement'</span><span class="token punctuation">,</span>      <span class="token string">'asyncIncrement'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></code></pre><p>注意，<code>mutations</code> 必须是同步函数，<code>actions</code> 支持异步操作</p><p>多模块</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -> moduleA 的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -> moduleB 的状态</span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://frontendmasters.com/courses/vue/">frontendmaster: introction to vue.js</a></p><p><a href="https://github.com/sdras/intro-to-vue">github: sdras intro-to-vue </a></p><p><a href="https://vuejs.org/v2/guide/">vue.js org</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functional Programming in JavaScript</title>
      <link href="2020/10/27/web/js/functional-programming-in-javascript/"/>
      <url>2020/10/27/web/js/functional-programming-in-javascript/</url>
      
        <content type="html"><![CDATA[<p> 今天瞄了下 <code>just enough functional programming in javascript</code> 视频感觉还不错，如果你也感兴趣的话, <a href="https://egghead.io/courses/just-enough-functional-programming-in-javascript">请戳</a></p><p>函数式编程是一种编程的模式，在这种编程模式中最常用的函数和表达式。它强调在编程的时候用函数的方式思考问题，函数也与其他数据类型一样，处于平等地位。可以将函数作为参数传入另一个函数，也可以作为别的函数的返回值。函数式编程倾向于用一系列嵌套的函数来描述运算过程。</p><a id="more"></a><p>以下是一些学习记录跟总结，关于上述视频以及部分扩展，主要就是学习一下函数编程的思想，其他语言应该都是大同小异。</p><h3 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h3><p>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// Higher Order Functions</span><span class="token comment">// 1. Accept a function as an argument</span><span class="token comment">// 2. Return a new function</span><span class="token keyword">const</span> <span class="token function-variable function">withCount</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Call count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token keyword">const</span> countAdd <span class="token operator">=</span> <span class="token function">withCount</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">countAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Call count: 1 3</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">countAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Call count: 2 3</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">countAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Call count: 3 3</span></code></pre><p>Javascript 的 <code>Array</code> 对象就提供了很多常用的高阶函数，如下所示：</p><p>这里我们简单列一下，有个印象即可，在后面的章节中会阐述函数编程的一些概念跟设计原理，到时候就会有一个比较清楚的认知。</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>我们可以根据传进去函数对数组每个元素进行相同的操作，当然我们也可以通过写一个循环计算出<a href="https://egghead.io/courses/just-enough-functional-programming-in-javascript">请戳</a>结果，但是，这样看起来就不是那么的一目了然。抽象运算规则，会让代码更加的简洁明了。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">pow</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> xconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 4, 9, 16, 25, 36, 49, 64, 81 ]</span></code></pre><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>这个函数必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span></code></pre><p>这里简单举个求和的例子</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 45</span></code></pre><p>下面是谷歌关于<code>MapReduce</code>的描述，<a href="https://ai.google/research/pubs/pub62">原文地址</a></p><pre class="language-html" data-language="html"><code class="language-html">MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify a map function that processes a key/value pair to generate a set of intermediate key/value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key. Many real world tasks are expressible in this model, as shown in the paper.Programs written in this functional style are automatically parallelized and executed on a large cluster of commodity machines. The run-time system takes care of the details of partitioning the input data, scheduling the program's execution across a set of machines, handling machine failures, and managing the required inter-machine communication. This allows programmers without any experience with parallel and distributed systems to easily utilize the resources of a large dist fair to say, but... it sure hasn't seemed like as mainstream of a concept in the overall developer world until perhaps theributed system.Our implementation of MapReduce runs on a large cluster of commodity machines and is highly scalable: a typical MapReduce computation processes many terabytes of data on thousands of machines. Programmers find the system easy to use: hundreds of MapReduce programs have been implemented and upwards of one thousand MapReduce jobs are executed on Google's clusters every day.</code></pre><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>filter也是一个常用的操作，它用于把<code>Array</code>的某些元素过滤掉，然后返回剩下的元素。</p><p>和<code>map()</code>类似，<code>Array</code>的<code>filter()</code>也接收一个函数。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>true</code>还是<code>false</code>决定保留还是丢弃该元素。</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依次打印元素</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依次打印元素位置，从０开始</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// self就是变量arr</span>  <span class="token keyword">return</span> self <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>默认的排序是将所有元素转换为<code>String</code>类型，然后字符串根据根据ASCII码进行排序，例如</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Microsoft'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ['Apple', 'Google', 'Microsoft'];</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'Microsoft'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ['Google', 'Microsoft", 'apple']</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 10, 2, 20]</span></code></pre><p>很多情况下，这显然不符合我们的预期，所以我们可以传入一个函数编写符合我们预期的排序逻辑，sort()<code>方法会直接对</code>Array<code>进行修改，它返回的结果仍是当前</code>Array</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">let</span> sortedArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">-</span> y<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>sortedArr<span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 10, 20]</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>sortedArr <span class="token operator">==</span> arr<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p><code>every()</code>方法可以判断数组的所有元素是否满足测试条件。</p><p>例如，判断一个数组里是否都能被2整除</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=></span> s <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span></code></pre><h4 id="find-amp-findIndex"><a href="#find-amp-findIndex" class="headerlink" title="find &amp; findIndex"></a>find &amp; findIndex</h4><p><code>find()</code>方法用于查找符合条件的第一个元素，如果找到了，返回这个元素，否则，返回<code>undefined</code>：</p><p><code>findIndex()</code>和<code>find()</code>类似，也是查找符合条件的第一个元素，不同之处在于<code>findIndex()</code>会返回这个元素的索引，如果没有找到，返回<code>-1</code>：</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=></span> s <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=></span> s <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span></code></pre><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p><code>forEach()</code>和<code>map()</code>类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组。<code>forEach()</code>常用于遍历数组，因此，传入的函数不需要返回值：</p><p>注意，函数编程的中间操作都不会影响原数组，所以你<code>forEach</code>里改变遍历元素的值，原数组是不会变的。</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=></span> s <span class="token operator">=</span> s <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [ 10, 20, 1, 2 ]</span></code></pre><h3 id="Immutable-Data"><a href="#Immutable-Data" class="headerlink" title="Immutable Data"></a>Immutable Data</h3><p>函数编程中使用不可变数据是必须的，可变的数据是不安全的，我们不知道在哪一环节数据突然改变，导致最终结果跟预期不一致，所以我们对数据的转换不应该影响原始的数据源，而应该创建返回更新后新的数据，这种方法纯粹而且线程安全，通俗来说就是要保证相同的输入会产生相同的输出，这也是函数编程很重要一个特性跟思想。</p><p>下面我们看一下 <code>mutable data</code> 的 示例代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> b <span class="token operator">=</span> aconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>b <span class="token operator">===</span> a<span class="token punctuation">)</span> <span class="token comment">// true</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span>foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> d <span class="token operator">=</span> cconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>d <span class="token operator">===</span> c<span class="token punctuation">)</span> <span class="token comment">// true</span>d<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'baz'</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// &#123;foot: 'baz'&#125;</span></code></pre><p>下面是 <code>immutable data</code> 的简单实现，一般都是新建一个新的数据返回，</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token parameter">array</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span>    clone<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> clone<span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">push1</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span>        clone<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">return</span> clone    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>f <span class="token operator">===</span> e<span class="token punctuation">)</span></code></pre><p><code>...</code> 是ES6的一个操作符<code>Spread syntax</code>，如果你想对ES6操作符有更多的了解，请访问 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a></p><p><code>push(4)(e)</code> 如果不了解使用的话，这里简单说明下，</p><p>上述代码中 <code>push</code> 的写法即使等价于 <code>push1</code> ，通常就是使用匿名单参数函数来实现 多参数函数的方法，</p><p>所以 <code>push(4)(e) = push1(4)(e) = (push1(4))(e)</code> </p><p>具体请查看下一小结 <code>Currying</code>会有比较详细的介绍。</p><h3 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h3><p>这里有关于<code>Currying</code>的简单介绍，详细请看下<a href="https://wiki.haskell.org/Currying">wili</a></p><p>Currying is the process of transforming a function that takes multiple arguments in a tuple as its argument, into a function that takes just a single argument and returns another function which accepts further arguments, one by one, that the original function would receive in the rest of that tuple.</p><p>柯里化（Currying），又称部分求值（Partial Evaluation），是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> addThree <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">addThree</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 13</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">addThree</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 23</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 33</span><span class="token keyword">const</span> <span class="token function-variable function">add2</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> <span class="token parameter">y</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token keyword">const</span> addThree2 <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">addThree2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 13</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">addThree2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 23</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 33</span></code></pre><p>我们可以很容易地实现参数复用，</p><p>下面我们可以写一个简单的柯里化实现方法</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">currying</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    __args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> __inargs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> __args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>__inargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">handeler<span class="token punctuation">,</span> list</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>handeler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> mapSQ <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">mapSQ</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1, 4, 9, 16, 25]</span><span class="token keyword">var</span> mapDB <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> double<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">mapDB</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[2, 4, 6, 8, 10]</span></code></pre><p>关于<code>slice</code> 的用法</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>能将具有length属性的对象，比如这里arguments对象转成数组：</code></pre><p>如果想更深入的了解，请戳<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">MDN</a></p><p>当然 <code>curring</code> 还有其他用处，比如延迟加载，提前返回等等，这里就不多叙述。另外<code>curring</code> 会影响性能，但是在现代浏览器中一般可以忽略不计。</p><h3 id="Partial-Application"><a href="#Partial-Application" class="headerlink" title="Partial Application"></a>Partial Application</h3><p>通过<code>Curring</code> 我们可以很容实现，局部调用(<code>partial application</code>)，简单来说，只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数，能大大减少我们的样板代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-fetch'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">getFromAPI</span> <span class="token operator">=</span> <span class="token parameter">baseUrl</span> <span class="token operator">=></span> <span class="token parameter">endPoint</span> <span class="token operator">=></span> <span class="token parameter">cb</span> <span class="token operator">=></span>     <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>endPoint<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> getGithub <span class="token operator">=</span> <span class="token function">getFromAPI</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">)</span><span class="token keyword">const</span> getGithubUsers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token function">getGithubUsers</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>我们可以创建很多重用的功能，使得我们的代码更加的简洁跟易用。</p><h3 id="Pointfree"><a href="#Pointfree" class="headerlink" title="Pointfree"></a>Pointfree</h3><p>无参编程，将命令函数作为参数传递，以避免使用临时变量来编写匿名函数，可以提高代码的可读性，降低错误率，使我们的代码更易于组合跟单元测试。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token comment">// no pointfree</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 2, 4, 6 ]</span><span class="token comment">// pointfree</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 2, 4, 6 ]</span></code></pre><h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><p><code>var compose = (f, g) =&gt; x =&gt; f(g(x));</code></p><p>我们常常需要组合简单的函数来实现复杂的功能，在某种意义上来说，组合是函数的嵌套，将上一个函数的输出结果作为输入参数传递给下一个函数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 17</span><span class="token keyword">const</span> <span class="token function-variable function">scream</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">excliam</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> <span class="token function-variable function">repeat</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token function">excliam</span><span class="token punctuation">(</span><span class="token function">scream</span><span class="token punctuation">(</span><span class="token string">'i love egghead'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// I LOVE EGGHEAD! I LOVE EGGHEAD!</span></code></pre><p>如果简单用函数嵌套的话，看起来就不是那么简洁明了，而且后面假如需要改变组合顺序，我们还得去修改这边函数嵌套的顺序，很麻烦。</p><p>我们通常会实现一个高阶函数 <code>compose</code> 接受我们想要组合的函数，然后返回一个新函数以方便我们在程序中进行调用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">x</span> <span class="token operator">=></span>     fns<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token keyword">const</span> writeExuberance <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>    repeat<span class="token punctuation">,</span>    excliam<span class="token punctuation">,</span>    scream<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">writeExuberance</span><span class="token punctuation">(</span><span class="token string">'i love egghead'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>注意：要传给 compose 函数是有规范的，首先函数的执行是从最后一个参数开始执行，一直执行到第一个，而且对于传给 compose 作为参数的函数也是有要求的，必须只有一个形参，而且函数的返回值是下一个函数的实参。</code></p><p>对于 <code>compose </code> 从最后一个函数开始求值的方式如果你不是很适应的话，你可以通过 pipe 函数来从左到右的方式。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token parameter">x</span> <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token keyword">const</span> writeExuberance2 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>    scream<span class="token punctuation">,</span>    excliam<span class="token punctuation">,</span>    repeat<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">writeExuberance2</span><span class="token punctuation">(</span><span class="token string">'i love egghead'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Argument-Order"><a href="#Argument-Order" class="headerlink" title="Argument Order"></a>Argument Order</h3><p>柯里化函数参数的顺序应该使我们应用程序受益，提高可重用性并实现函数的组合，所以一般原则是，将数据参数作为函数的最后一个结果提供，以便将一个函数的结果作为参数传递给另一个函数中，同时也方便我们进行局部调用</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=></span> <span class="token parameter">cb</span> <span class="token operator">=></span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">map_</span> <span class="token operator">=</span> <span class="token parameter">cb</span> <span class="token operator">=></span> <span class="token parameter">array</span> <span class="token operator">=></span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">const</span> withArr <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">withArr</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">withArr</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> withDouble <span class="token operator">=</span> <span class="token function">map_</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">withDouble</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">withDouble</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// most specific => lest specific</span><span class="token keyword">const</span> <span class="token function-variable function">prop</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=></span> <span class="token parameter">obj</span> <span class="token operator">=></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">const</span> propName <span class="token operator">=</span> <span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">const</span> peope <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Jamon'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Shirley'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Ben'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'kent'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">map_</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">(</span>peope<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如上面的例子，显然数据参数 <code>array</code> 放在函数参数 <code>cb</code> 后面，更具有重用性。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰javascript编程</a></p><p><a href="https://egghead.io/courses/just-enough-functional-programming-in-javascript">egghead.io:just enough functional programming</a></p><p><a href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/">mostly-adequate-guide</a></p><p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese">mostly-adequate-guide-chinese</a></p><p><a href="https://github.com/getify/Functional-Light-JS">Functional-Light-JS</a></p><p><a href="https://medium.com/@dtipson/creating-an-es6ish-compose-in-javascript-ac580b95104a">creating-an-es6ish-compose-in-javascript</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6</title>
      <link href="2020/10/27/web/js/es6/"/>
      <url>2020/10/27/web/js/es6/</url>
      
        <content type="html"><![CDATA[<p>现代浏览器基本都支持 <code>ES6</code> 大部分特性，如果你想知道有哪些浏览器支持 <code>ES6</code> 的特性，<a href="https://kangax.github.io/compat-table/es6/">请戳</a></p><p><code>Node</code> 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。</p><a id="more"></a><pre class="language-shell" data-language="shell"><code class="language-shell">node --v8-options | grep harmony</code></pre><p>而且我们还有<code>Babel</code> 转码器，可以很方便地将 <code>ES6</code> 代码转换成 <code>ES5</code> 代码。</p><p>有兴趣可以看下阮一峰大佬的ECMAScript6入门，内容很详细明了，最底下有相关链接，我这里只是简单的学习记录，方便后面查阅。</p><p>今天就写了箭头函数相关的，后面看到segmentfault一篇博客，感觉总结挺好的，就厚颜无耻地拷贝过来了，改了点东东，原文<a href="https://segmentfault.com/a/1190000007817990">请戳</a></p><h2 id="Arrow-Function-》"><a href="#Arrow-Function-》" class="headerlink" title="Arrow Function =》"></a>Arrow Function =》</h2><p>箭头函数 <code>=&gt;</code> ，首先可以去除 <code>function</code> 标识符，让我们的代码更简洁明了，只关注参数跟函数逻辑代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">createGreeting</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> message <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">arrowGreeting</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=></span> message <span class="token operator">+</span> name<span class="token keyword">var</span> <span class="token function-variable function">arrowGeetingToBen</span> <span class="token operator">=</span> <span class="token parameter">message</span> <span class="token operator">=></span> message <span class="token operator">+</span> <span class="token string">'Ben'</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">createGreeting</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> <span class="token string">'Ben'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">arrowGreeting</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> <span class="token string">'Ben'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">arrowGeetingToBen</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>同样，我们之前如果函数里面如果嵌套函数的话，那么<code>this</code> 指向便需要注意，<code>ok, no bb, show you my code</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> deliveryBody <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Ben'</span><span class="token punctuation">,</span>        <span class="token function-variable function">handleMessage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handler</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">receive</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message <span class="token operator">+</span> that<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>deliveryBody<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用箭头函数，我们可以对上面代码做些调整</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arrowDeliveryBody <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Ben'</span><span class="token punctuation">,</span>        <span class="token function-variable function">handleMessage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">handler</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">receive</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> arrowDeliveryBody<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>有的人可能会问，你扯淡半天，箭头函数那么好用，为什么对象里面的<code>handleMessage</code>，<code>receive</code>函数不用箭头函数来表示呢，写成如下形式</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arrowDeliveryBody <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Ben'</span><span class="token punctuation">,</span>        <span class="token function-variable function">handleMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handler</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">receive</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> arrowDeliveryBody<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>你可以尝试一下，这样写，会提示<code>TypeError: this.handleMessage is not a function</code></p><p>具体可以看下 stackoverflow 上面的<a href="https://stackoverflow.com/questions/31095710/methods-in-es6-objects-using-arrow-functions">回答</a></p><p>Arrow functions are not designed to be used in every situation merely as a shorter version of old-fashioned functions. They are not intended to replace function syntax using the <code>function</code> keyword. The most common use case for arrow functions is as short “lambdas” which do not redefine <code>this</code>, often used when passing a function as a callback to some function.</p><p>Arrow functions cannot be used to write object methods because, as you have found, since arrow functions close over the <code>this</code> of the lexically enclosing context, the <code>this</code> within the arrow is the one that was current where you defined the object. Which is to say:</p><p>翻译过来就是说，箭头函数并不是设计用于所有情况，而仅仅是作为老式函数的较短版本。它们不打算使用function关键字替换函数语法。箭头函数最常见的用例是短的“lambdas”，它不重新定义这个函数，通常在将函数作为回调传递给某个函数时使用。箭头函数不能用于编写对象方法，因为正如您所发现的，由于箭头函数在词法封闭上下文的this上关闭，箭头内的this就是您定义objec的当前位置</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// Whatever `this` is here...</span><span class="token keyword">var</span> arrowDeliveryBody <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Ben'</span><span class="token punctuation">,</span>        <span class="token function-variable function">handleMessage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handler</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">receive</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...is what `this` is here.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> arrowDeliveryBody<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>也正因为箭头函数没有自己的<code>this</code>导致内部的<code>this</code>就是外层代码块的<code>this</code>，所以就不能用作构造函数，也不能使用 <code>new</code> ，<code>yield</code>命令等，并且不能使用 <code>arguments</code> 对象，如下都会报错，</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught TypeError: foo is not a constructor</span><span class="token comment">// 下面这个例子要在浏览器环境下，在node环境下，因为有全局的arguments所以不会报错</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught ReferenceError: arguments is not defined</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以，箭头函数最常用于回调函数，不要在对象中定义箭头函数。</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>盼星星盼月亮，终于盼来了 JS 的继承。但是 ES6 中的继承和已经很完善的 ES5 中流行的继承库，到底有多少差异？</p><p>先来看一个例子：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;定义类class Point &#123;  constructor(x, y) &#123;    this.x &#x3D; x;    this.y &#x3D; y;  &#125;  &#x2F;&#x2F; 注意函数构造的方式  toString() &#123;    return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;;  &#125;&#125;var p1 &#x3D; new Point(5, 5);p1.toString(); &#x2F;&#x2F;&quot;(5, 5)&quot;typeof Point &#x2F;&#x2F; functionp1.constructor &#x3D;&#x3D; Point &#x2F;&#x2F;true</code></pre><p>直接使用 class 关键字，constructor 作为构造方法，函数可以直接 <code>toString()&#123;&#125;</code> 的方式。</p><p>但是，class 的本质仍然是函数，是构造函数的另外一种写法。既然 class 的本质是函数，那么必不可少的一些 proto，prototype 方法也是存在的。</p><h3 id="关于-class-的继承"><a href="#关于-class-的继承" class="headerlink" title="关于 class 的继承"></a>关于 class 的继承</h3><p>通过关键字 extends 可以实现 class 的继承，</p><pre class="language-none"><code class="language-none">class Square extends Point&#123;  constructor(x)&#123;    super(x, x);  &#125;  toString()&#123;    return super.toString() + &#39;Square!&#39;;  &#125;&#125;var s1 &#x3D; new Square(4);s1.toString(); &#x2F;&#x2F;&quot;(4, 4)Square!&quot;s1 instanceof Point &#x2F;&#x2F; trues1 instanceof Square &#x2F;&#x2F; true</code></pre><p>既然说到了继承，对 es5 中继承了解到小伙伴，肯定会疑惑关于 class 中的 proto 和 prototype 是一个什么样的关系。</p><p>子类的 proto 指向父类，子类的 prototype 的 proto 指向父类的 prototype，这和 ES5 并没有区别。</p><pre class="language-none"><code class="language-none">Square.__proto__ &#x3D;&#x3D;&#x3D; Point&#x2F;&#x2F; trueSquare.prototype.__proto__ &#x3D;&#x3D;&#x3D; Point.prototype&#x2F;&#x2F; true</code></pre><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><p>在 Java 等语言中，是有 super 继承父类函数，JS 中更加灵活，可以用作父类的构造函数，又可以用作对象。</p><p>子类的 constructor 必须要调用 super 方法，且只能在 constructor 方法中调用，其他地方调用会报错。</p><pre class="language-none"><code class="language-none">class A &#123;  constructor(a)&#123;    this.x &#x3D; a;  &#125;&#125;A.prototype.y &#x3D; 2;class B extends A&#123;  constructor(a)&#123;    super();  &#125;  getY()&#123;    super() &#x2F;&#x2F; 报错    return super.y  &#125;&#125;</code></pre><h3 id="原生构造函数的继承"><a href="#原生构造函数的继承" class="headerlink" title="原生构造函数的继承"></a>原生构造函数的继承</h3><p>对于一些原生的构造函数，比如 Array，Error，Object，String 等，在 ES5 是无法通过 <code>Object.create</code> 方法实现原生函数的内部属性，原生函数内部的 this 无法绑定，内部属性获得不了。<a href="http://es6.ruanyifeng.com/#docs/class#">原生构造函数的继承</a>。</p><p>ES6 的 class 可以解决这个问题。</p><pre class="language-none"><code class="language-none">class MyArray extends Array &#123;  constructor(...args) &#123;    super(...args);  &#125;&#125;var arr &#x3D; new MyArray();arr[0] &#x3D; 12;arr.length &#x2F;&#x2F; 1arr.length &#x3D; 0;arr[0] &#x2F;&#x2F; undefined</code></pre><p>extends 关键字不仅可以用来继承类，<strong>还能用来继承原生的构造函数</strong>，在原生函数的基础上，自定义自己的函数。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>ES6 支持 static 关键字，该关键字定义的方法，不会被实例继承，但可以被子类继承：</p><pre class="language-none"><code class="language-none">class A&#123;  static add(x, y)&#123;    return x + y; &#125;&#125;A.add(1, 2);var a &#x3D; new A();a.add()&#x2F;&#x2F; errorclass B extends A&#123;&#125;B.add(2, 2)&#x2F;&#x2F; 4 </code></pre><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>ES6 之前，JS 一直没有 modules 体系，解决外部包的问题通过 CommonJS 和 AMD 模块加载方案，一个用于服务器，一个用于浏览器。ES6 提出的 modules （import／export）方案完全可以取代 CommonJS 和 AMD 成为浏览器和服务器通用的模块解决方案。</p><p>关于模块，就只有两个命令，import 用于导入其他模块，export 用于输出模块。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; profile.jsvar firstName &#x3D; &#39;Michael&#39;;var lastName &#x3D; &#39;Jackson&#39;;var year &#x3D; 1958;export &#123;firstName, lastName, year&#125;;&#x2F;&#x2F; main.jsimport &#123;firstName, lastName, year&#125; from &#39;.&#x2F;profile&#39;;console.log(firstName, lastName) &#x2F;&#x2F; Michael Jackson</code></pre><p>import 加载的模块可以只加载用到的，但是必须使用同名的原则，可以用 as 来解决名字问题，同样，as 也可以解决 export 问题：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;main.jsimport &#123; lastName as surname &#125; from &#39;.&#x2F;profile&#39;;console.log(surname); &#x2F;&#x2F; Jackson&#x2F;&#x2F;profile.jsexport &#123;firstName as name&#125;</code></pre><p>export 可以输出的内容很多，包括变量、函数、类，貌似都可以输出，还可以借助 export default 来加载默认输出。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;default.jsfunction add(a, b)&#123;  return a + b;&#125;export default add;&#x2F;&#x2F; 实际上export &#123;add as default&#125;;&#x2F;&#x2F; main.jsimport add from &#39;.&#x2F;default&#39;&#x2F;&#x2F;实际上 add 名字可以随便起import &#123;default as add&#125; from &#39;.&#x2F;default&#39;</code></pre><h3 id="模块加载的实质"><a href="#模块加载的实质" class="headerlink" title="模块加载的实质"></a>模块加载的实质</h3><p>这部分 <a href="http://es6.ruanyifeng.com/#docs/module#ES6">ES6模块加载的实质</a> 完全只能参考了，因为对模块加载用的不多，没有一点经验，但是看到作者提到了拷贝和引用，感觉逼格很高的样子。</p><p>ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是值的引用。</p><p>比如一个 CommonJS 加载的例子：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; lib.jsvar counter &#x3D; 3;function incCounter() &#123;  counter++;&#125;module.exports &#x3D; &#123;  counter: counter,  incCounter: incCounter,&#125;;&#x2F;&#x2F; main.jsvar mod &#x3D; require(&#39;.&#x2F;lib&#39;);console.log(mod.counter);  &#x2F;&#x2F; 3mod.incCounter();console.log(mod.counter); &#x2F;&#x2F; 3</code></pre><p>这个值会被 mod 缓存，而取不到原始的值。</p><p>ES6 中不一样，它只是生成一个引用，当真正需要的时候，才会到模块里去取值，</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; lib.jsexport let counter &#x3D; 3;export function incCounter() &#123;  counter++;&#125;&#x2F;&#x2F; main.jsimport &#123; counter, incCounter &#125; from &#39;.&#x2F;lib&#39;;console.log(counter); &#x2F;&#x2F; 3incCounter();console.log(counter); &#x2F;&#x2F; 4</code></pre><h3 id="循环加载"><a href="#循环加载" class="headerlink" title="循环加载"></a>循环加载</h3><p>循环加载也比较有意思，经常能看到 nodejs 中出现加载同一个模块，而循环加载却不常见，nodejs 使用 CommonJS 模块机制，CommonJS 的循环加载采用的是加载多少，输出多少，就像是我们平时打了断点一样，会跳到另外一个文件，执行完在跳回来。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;a.jsexports.done &#x3D; &#39;1&#39;;var a &#x3D; require(&#39;.&#x2F;b.js&#39;);console.log(&#39;half a&#x3D;%s&#39;, a);exports.done &#x3D; &#39;3&#39;;console.log(&#39;done a&#39;);&#x2F;&#x2F;b.jsexports.done &#x3D; &#39;2&#39;;var b &#x3D; require(&#39;.&#x2F;a.js&#39;);console.log(&#39;half b&#x3D;%s&#39;, b);exports.done &#x3D; &#39;4&#39;;console.log(&#39;done b&#39;);&#x2F;&#x2F;main.jsvar a &#x3D; require(&#39;.&#x2F;a.js&#39;);var b &#x3D; require(&#39;.&#x2F;b.js&#39;);console.log(&#39;all done! a&#x3D;%s,b&#x3D;%s&#39;,a,b)</code></pre><p><code>node main.js</code> 的结果：</p><pre class="language-none"><code class="language-none">half a&#x3D;2done ahalf b&#x3D;3done ball done! a&#x3D;3,b&#x3D;4</code></pre><p>这就是 CommonJS 所谓的循环加载。</p><p>而 ES6 采用的加载模式也不一样，因为使用动态引用，必须要开发者保证能 import 到值：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; a.js如下import &#123;bar&#125; from &#39;.&#x2F;b.js&#39;;console.log(&#39;a.js&#39;);console.log(bar);export let foo &#x3D; &#39;foo&#39;;&#x2F;&#x2F; b.jsimport &#123;foo&#125; from &#39;.&#x2F;a.js&#39;;console.log(&#39;b.js&#39;);console.log(foo);export let bar &#x3D; &#39;bar&#39;;</code></pre><p>结果：</p><pre class="language-none"><code class="language-none">$ babel-node a.jsb.jsundefineda.jsbar</code></pre><p>循环加载稍有不慎，就会 underfined。</p><h2 id="字符串模版"><a href="#字符串模版" class="headerlink" title="字符串模版"></a>字符串模版</h2><p>ES6 在字符串上面可是下了不少功夫，先是解决了字符 unicode 的 bug，增加了一些处理多字节字符串 codePointAt 函数，还多了字符串的遍历接口 <code>for...of</code>，这个遍历借口有点仿造 python 的感觉。只要有迭代器功能的对象，都可以用 for…of 来遍历。</p><p>ES6 添加了一些有意思的函数，比如 repeat()，前几天比较火的文章‘五道经典的前端面试题’，就有提到一个在字符串上实现原生的重复方法，这里的 repeat 可以直接解决。</p><p>关于字符串上的新内容，非常有帮助的还是模版字符串。之前在 js 中跨行的字符串实现起来很别扭，而 python 可以用三个反引号来实现。</p><p>ES6 中的模版字符串使用需要注意以下内容：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; &#96; 可以跨行var html &#x3D; &#96;  &lt;ul&gt;    &lt;li&gt;first&lt;&#x2F;li&gt;    &lt;li&gt;second&lt;&#x2F;li&gt;  &lt;&#x2F;ul&gt;&#96;&#x2F;&#x2F;$&#123;&#125; 调用变量和函数var name &#x3D; &#39;window&#39;;var str &#x3D; &#96;my name is $&#123;name&#125;;&#96;;&#x2F;&#x2F; my name is window;var add &#x3D; (a, b)&#x3D;&gt; a+b;var str &#x3D; &#96;2 + 3 &#x3D; $&#123;add(2,3)&#125;&#96;;&#x2F;&#x2F; &quot;2 + 3 &#x3D; 5&quot;</code></pre><p>用过 ejs 、swig 或 hbs 等模版，它们可以嵌入 js 代码，ES6 的模版字符串也可以。使用 &lt;%…%&gt; 放置 JavaScript 代码，使用 &lt;%= … %&gt; 输出 JavaScript 表达式。</p><pre class="language-none"><code class="language-none">var template &#x3D; &#96;  &lt;ul&gt;    &lt;% data.forEach(function(item)&#123; %&gt;      &lt;li&gt;&lt;%&#x3D; item %&gt;&lt;&#x2F;li&gt;    &lt;% &#125;) %&gt;  &lt;&#x2F;ul&gt;&#96;</code></pre><p>下面就可以写正则表达式替换掉自定义字符并执行函数：</p><pre class="language-none"><code class="language-none">function compile(str)&#123;  var evalExpr &#x3D; &#x2F;&lt;%&#x3D;(.+?)%&gt;&#x2F;g;  var expr &#x3D; &#x2F;&lt;%([\s\S]+?)%&gt;&#x2F;g;  str &#x3D; str.replace(evalExpr, &#39;&#96;); \n  join( $1 ); \n  join(&#96;&#39;)    .replace(expr, &#39;&#96;); \n $1 \n  join(&#96;&#39;);  str &#x3D; &#39;join(&#96;&#39; + str + &#39;&#96;);&#39;;  var script &#x3D; &#96;    (function parse(data)&#123;      var output &#x3D; &quot;&quot;;      function join(html)&#123;        output +&#x3D; html;      &#125;      $&#123; str &#125;      return output;    &#125;)  &#96;  return script;&#125;var strParse &#x3D; eval(compile(template));&#x2F;&#x2F; 使用var html &#x3D; strParse([&#39;shanghai&#39;, &#39;beijing&#39;, &#39;nanjing&#39;]);&#x2F;&#x2F;  &lt;ul&gt;    &#x2F;&#x2F;    &lt;li&gt;shanghai&lt;&#x2F;li&gt;&#x2F;&#x2F;    &lt;li&gt;beijing&lt;&#x2F;li&gt;&#x2F;&#x2F;    &lt;li&gt;nanjing&lt;&#x2F;li&gt;&#x2F;&#x2F;  &lt;&#x2F;ul&gt;</code></pre><p>通过两次使用字符串模版，并使用 eval 函数，一个 ES6 简易模版就这样完成了。</p><h2 id="一些其他核心功能"><a href="#一些其他核心功能" class="headerlink" title="一些其他核心功能"></a>一些其他核心功能</h2><h3 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h3><p>ES5 通过 var 来申明变量，ES6 新添 let 和 const，且作用域是 <strong>块级作用域</strong>。</p><p>let 使用和 var 非常类似，<strong>let 不存在变量提升，也不允许重复申明，let 的声明只能在它所在的代码块有效</strong>，比如 for 循环，非常适合使用 let：</p><pre class="language-none"><code class="language-none">for(let i &#x3D; 0; i &lt; data.length; i++)&#123;  console.log(data[i]);&#125;console.log(i); &#x2F;&#x2F; error</code></pre><p>如果用 var 来申明 i，最后不会报错。之前学闭包的时候，有一个利用闭包解决循环的问题，用 let 可以解决:</p><pre class="language-none"><code class="language-none">var a &#x3D; [];for (let i &#x3D; 0; i &lt; 10; i++) &#123;  a[i] &#x3D; function () &#123;    console.log(i);  &#125;;&#125;a[6](); &#x2F;&#x2F; 6</code></pre><p>const 就是申明常量用的，一旦申明即被锁定，后面无法更改。</p><pre class="language-none"><code class="language-none">const PI &#x3D; 3.14;PI &#x3D; 3; &#x2F;&#x2F;error</code></pre><p>let 和 const 都是块级作用域，块级作用域可以任意嵌套，且 {} 内定义的变量，外层作用域是无法获得的，且内外层的作用域可以同名。</p><pre class="language-none"><code class="language-none">function fn() &#123;  let n &#x3D; 1;  if (true) &#123;    let n &#x3D; 2;  &#125;  console.log(n); &#x2F;&#x2F; 1&#125;</code></pre><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在 Node 指的是<code>global</code>对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p><p>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，<code>window</code>对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</p><p>ES6 为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值真的很好用，但是我每次都忘记使用。ES6 解构赋值基本语法 <code>var [a, b, c] = [1, 2, 3];</code>，从数组中取值，并按照先后次序来赋值。如果解构赋值不成功，就会返回 underfined，解构赋值也允许指定默认值：</p><pre class="language-none"><code class="language-none">var [a, b] &#x3D; [1];b &#x2F;&#x2F; undefined&#x2F;&#x2F; 指定默认值var [a, b &#x3D; 2] &#x3D; [1];b &#x2F;&#x2F; 2</code></pre><p>除了数组，对象也可以解构赋值，但是数组是有顺序的，而对象没有顺序，如果想要成功赋值，必须与对象属性同名，才能成功赋值，否则返回 underfined：</p><pre class="language-none"><code class="language-none">var &#123;a, b&#125; &#x3D; &#123;a: 1, b: 2&#125;;a &#x2F;&#x2F; 1b &#x2F;&#x2F; 2var &#123;a, c&#125; &#x3D; &#123;a: 1, b: 2&#125;;c &#x2F;&#x2F; undefined</code></pre><p>字符串的解构赋值比较有意思，既可以把字符串当作可以迭代的数组，又可以当作对象，比如：</p><pre class="language-none"><code class="language-none">var [a1,a2,a3,a4,a5] &#x3D; &#39;hello&#39;;a2 &#x2F;&#x2F; evar &#123;length : len&#125; &#x3D; &#39;hello&#39;;len &#x2F;&#x2F; 5</code></pre><p>函数参数的解构赋值，看一个 forEach 的例子：</p><pre class="language-none"><code class="language-none">var data &#x3D; [[1, 2], [3, 4]];data.forEach(([a, b]) &#x3D;&gt; console.log(a+b));&#x2F;&#x2F; 3&#x2F;&#x2F; 7</code></pre><h3 id="Promise-解决回掉"><a href="#Promise-解决回掉" class="headerlink" title="Promise 解决回掉"></a>Promise 解决回掉</h3><p>一直以来，回掉问题都是一件令人头疼的事，调试的时候感觉代码跳来跳去，玩着玩着就晕了。ES6 提供 Promise 对象（函数），专门用来处理回掉。</p><pre class="language-none"><code class="language-none">var promise &#x3D; new Promise(function(resolve, reject) &#123;  &#x2F;&#x2F; ... some code  if (&#x2F;* 异步操作成功 *&#x2F;)&#123;    resolve(value);  &#125; else &#123;    reject(error);  &#125;&#125;);promise.then(function(value) &#123;  &#x2F;&#x2F; success&#125;, function(error) &#123;  &#x2F;&#x2F; failure&#125;);</code></pre><p>resolve 和 reject 是两个异步操作调用函数，当异步操作完成时，调用 resolve，error 则调用 reject，这两个函数的功能就是把参数传递给回掉函数。then 函数用来处理成功或失败状态。</p><pre class="language-none"><code class="language-none">function loadImageAsync(url) &#123;  var p &#x3D; new Promise(function(resolve, reject) &#123;    var image &#x3D; new Image();    image.onload &#x3D; function() &#123;      resolve(image);    &#125;;    image.onerror &#x3D; function() &#123;      reject(url);    &#125;;    image.src &#x3D; url;  &#125;);  p.then(function(image)&#123;    document.body.appendChild(image);  &#125;, function(url)&#123;    throw new Error(&#39;Could not load &#39;+ url);  &#125;)&#125;loadImageAsync(&#39;http:&#x2F;&#x2F;yuren.space&#x2F;images&#x2F;bg.gif&#39;);</code></pre><p>上面是一个用 Promise 实现的异步加载图片的函数。</p><h3 id="for-of-与-…"><a href="#for-of-与-…" class="headerlink" title="for of 与 …"></a>for of 与 …</h3><p>Python 中有 for in 运算符，ES6 就搞了个 for…of。当使用 for…of 循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是可遍历的，对象、数组、字符串都是可遍历的。</p><pre class="language-none"><code class="language-none">var str &#x3D; &#39;hello&#39;;for(let i of str)&#123;  console.log(i);&#125;&#x2F;&#x2F; &#39;h&#39; &#39;e&#39; &#39;l&#39; &#39;l&#39; &#39;o&#39;</code></pre><p><code>...</code>也非常好用，可以直接把可遍历对象直接转换成数组：</p><pre class="language-none"><code class="language-none">var str &#x3D; &#39;hello&#39;;[...str] &#x2F;&#x2F;[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]let arr &#x3D; [&#39;b&#39;, &#39;c&#39;];[&#39;a&#39;, ...arr, &#39;d&#39;] &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</code></pre><p>有了 … 之后，方便对非数组可遍历的对象进行转换，比如 arguments 和 querySelectAll 的结果：</p><pre class="language-none"><code class="language-none">[...arguments] &#x2F;&#x2F; Arrayvar selects &#x3D; document.querySelectAll(&#39;a&#39;);[...selects] &#x2F;&#x2F; Array</code></pre><h3 id="set-集合和-Map-结构"><a href="#set-集合和-Map-结构" class="headerlink" title="set 集合和 Map 结构"></a>set 集合和 Map 结构</h3><p>ES6 新增 Set 集合对象，其实像其他语言早都支持了，不过，吃瓜群众，不觉明厉，以后，再遇到数组去重算法题，就可以：</p><pre class="language-none"><code class="language-none">[...(new Set([1, 2, 2, 3]))];&#x2F;&#x2F;[1, 2, 3]</code></pre><p>Set 方法分为操作和遍历，操作方法有 add-添加成员， delete-删除成员， has-拥有判断返回布尔值， clear-清空集合。</p><p>遍历操作有 keys()，values()，entries()，forEach()，…，for of，map 和 filter 函数也可以用于 Set，不过要进行巧妙操作，先转换成数组，在进行操作：</p><pre class="language-none"><code class="language-none">let set &#x3D; new Set([1,2,3]);set &#x3D; new Set([...set].map(a &#x3D;&gt; a*2));&#x2F;&#x2F; Set &#123;2, 4, 6&#125;</code></pre><p>Map 用来解决对象只接受字符串作为键名，Map 类似于对象，也是键值对集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p><p>Map 可以通过 [set、 get、 has、 delete] 方法来操作：</p><pre class="language-none"><code class="language-none">var m &#x3D; new Map();var arr &#x3D; [1, 2];m.set(arr, &#39;array&#39;);m.get(arr); &#x2F;&#x2F; &#39;array&#39;m.has(arr) &#x2F;&#x2F; truem.delete(arr) &#x2F;&#x2F; truem.has(arr) &#x2F;&#x2F; false</code></pre><h3 id="参数默认"><a href="#参数默认" class="headerlink" title="参数默认"></a>参数默认</h3><p>参数默认这个功能使用起来还是比较方便的，以前参数都是通过 || 来实现默认，现在可以使用默认参数。不过这个功能在 Python 等语言中已经是支持的。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 以前写代码var sayHello &#x3D; function(name)&#123;  var name &#x3D; name || &#39;world&#39;;  console.log(&#39;hello &#39; + name);&#125;&#x2F;&#x2F;参数默认var sayHello &#x3D; function(name &#x3D; &#39;world&#39;)&#123;  console.log(&#39;hello &#39; + name);&#125;sayHello() &#x2F;&#x2F; &#39;hello world&#39;sayHello(&#39;ES6&#39;) &#x2F;&#x2F; &#39;hello ES6&#39;</code></pre><p>对于不定参数，以前都是对 arguments 对象处理，且 arguments 对象还是个伪数组，现在方便了：</p><pre class="language-none"><code class="language-none">var add &#x3D; function(...arr)&#123;  console.log(arr.constructor.name) &#x2F;&#x2F; Array  return arr.reduce((a, b) &#x3D;&gt; a+b, 0);&#125;add(1,2,3) &#x2F;&#x2F; 6</code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://es6.ruanyifeng.com/">阮一峰ECMAScript6入门</a></p><p><a href="https://egghead.io/courses/learn-es6-ecmascript-2015">eegghead.io:learn-es6-ecmascript-2015</a></p><p><a href="https://segmentfault.com/a/1190000007817990">es6，你不得不学</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长安乱</title>
      <link href="2020/10/27/store/%E9%95%BF%E5%AE%89%E4%B9%B1/"/>
      <url>2020/10/27/store/%E9%95%BF%E5%AE%89%E4%B9%B1/</url>
      
        <content type="html"><![CDATA[<p>厚重的天幕，冷月高悬，面无表情地注视着这个略显冷淡的世界。</p><p>月光冰冷如铁，倾泻一地芳华。</p><p>庭前，树下，一张石桌，一把石凳，一壶酒，一个人，自饮自酌。</p><a id="more"></a><h4 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h4><p>厚重的天幕，冷月高悬，面无表情地注视着这个略显冷淡的世界。</p><p>月光冰冷如铁，倾泻一地芳华。</p><p>庭前，树下，一张石桌，一把石凳，一壶酒，一个人，自饮自酌。</p><p>那是一个怎样的人呢，约莫八尺来高，一袭黑袍，无形中透着一股威严和冷意，尤其是那一头飘逸的白发，披肩而下，宛若银河。黑白之间形成极强的反差，在这凄清的夜景之下，给人一种目眩，一种悸动，但却又是那么的遥不可及，不可接近，冷漠就像是裹尸布，厚厚地包裹着他，一层又是一层，不透出一丝一毫的感情波动。</p><p>也唯有独自一个人时侯，那如同井水般深不见底的眼睛才会淌出些许落寞和哀伤吧。可以感受得到，这是一个很冷的人，也应该是一个有故事的人吧。</p><p>这，就是，我们今天故事的主人公，怀龙。</p><p>“你来了。”怀龙，浅抿一口小酒，面无表情的说道。</p><p>也不知何时起，从漆黑的夜幕中，款款地走出一个人来，看那曼妙轻柔的身影，应该是一位绝世佳人。只见其披着一层白色的面纱，掩饰住了那似乎足以引起倾城之乱的娟秀容颜，白衣飘飘，宛若那不食人间的九天仙女，一抬衣袖，顷刻间，便柔化了江湖的刀光剑影，血雨腥风，又似那出水的荷花，素洁高雅，娴静恬淡，只可远观而不可亵玩焉。</p><p>佳人缓缓地移步到石桌前，面对怀龙而立，从衣袖中露出手臂，白若莲藕，指如青葱，轻轻地拿起酒壶，给自己斟了一杯酒，又轻轻地放下。自始至终，怀龙都没抬起他那略微低垂的脑袋，甚至连眼皮都没有上扬一下，看一看对面的佳人。或许当年那一剑，彻底地斩断了两人曾经的所有，曾经所有的一切，一切美好的过往和回忆，皆已经彻底冰封在心底的最深处。我想，他们无论谁都不想揭开当年的那一道伤疤，过去，或许，让它随风而去，对于谁都好吧。</p><p>沉默片刻，佳人轻轻放下酒杯，淡淡地凝望着对面那个，那个曾经，或许也是现在，她生命中分量最重的男人。哀怨地叹了口气，佳人留下一纸条，便又飘然而去。</p><p>久久之后，怀龙，拿起纸条，展开，浓烈的杀意扑面迎来，只见洁白的纸面上龙飞凤舞地写着六个大字，灭楚门，齐于安！</p><p>怀龙不知为何，眼角抽搐一下，眼光凝聚，如同一把利剑，撕裂了寂暗的夜幕，冷漠的外壳也一层一层地剥落，满腔的恨意得以发泄，一声怒吼，劈掌而下，石桌瞬间化为粉末，漫天飘零。思绪流转，犹记当年，那个没有风，也没有月的夜，那滔天恨意的呐喊，那肆意泗流的鲜血，那一把把亮闪闪的屠刀，那一颗颗沉甸甸的人头，那个倔强孤傲的少年，一夜间，流光了，一生的眼泪。</p><p>怀龙，对月，久久伫立。而后，转身，离去，留下一地长长的身影，渐渐消失在夜幕之下。许久，一个曼妙的身影出现在了夜幕之下，月华如水，佳人重返，亦或许就不曾离去吧。佳人默然地注视着怀龙离去的方向，而后，转身，仰头对月，沉默不语。</p><p>是日，微风少许，庭院中，芳草萋萋，杨柳依依，一中年男子，微胖，白衣，负手而立，身后四个模糊的身影，若隐若现。</p><p>“家主，一切已安排妥当。”最左边的一个影子，拱手说道。声音沙哑阴深，如同钝刀戳骨，不带任何感情，仿佛来自黄泉下的地狱，让人不由得生出一股寒意。</p><p>然而，那个微胖的中年男子，依旧负手而立，望着天边渐落的夕阳，怔怔出神，似乎不曾听到那个影子的言语。许久之后，嘴角才露出一丝残忍的笑容，默道：该来的终究要来了，当年那个小孩，终究被锻造成了一把锋利的剑，一把不带任何感情的锋利的剑。哈哈哈哈，鬼王，你玩的好手段啊。胆敢给我错误的情报，当年那一战，家族死了近一半的死士。而今十年了，你，这个老狐狸，终于露出狐狸尾巴了，嘿嘿，想不到，传说中的鬼王竟然是——！中年男子，挥手而下，道：“去吧，一切按计划行事！”一股杀气凛然而生，寒彻入骨，身后的四个影子都不禁一阵战栗，退后一步。而后拱手退下。</p><p>偌大的院子，空荡荡的，中年男子，伫立无语。</p><p>午夜，无月，微星光。一白衣青年稍显瘦弱，倚楼，一把纸扇，风度翩翩，温儒尔雅，放佛一块沉淀千年的碧玉。其身后，一佳人默立，赫然是昨夜与怀龙相见的女子。“秦瑶，怀龙，他还好吧！”那个叫秦瑶的女子，蓦然抬头，诧异地看着眼前那道白色的身影。三年了，已经三年了，他不曾提起那个人的名字。曾经情同手足的兄弟，如今却形同陌路，而这仅仅只是，为了一个女人，而那个女人就是，自己。</p><p>虽然，逝水流年，而今各安其事，但是昔日的青葱岁月，仍一一在目。</p><p>十年前，她本是一个沿街乞讨的乞丐，在这冷漠的世道中苟延残喘，受尽欺凌。或许，她本是一个跌落人间的天使吧，直到有一天，那个人，一手把她从肮脏的泥土中托起，放在高高的云端，俯看着下面那些猪狗一般的俗人。对于那个人，她到现在，虽然已经十年了，却依然不曾见过他真正的面目。</p><p>那个人，永远戴着一个狰狞的恶鬼的面具，一身染满鲜红血迹的黑袍，声音低沉沙哑，显然是刻意压低声调，不想让人知道他真实的身份。江湖上，人称鬼王，一手掌控着这个江湖最大的杀手组织——风雨组织！而风雨组织最早出现于世人面前，是在十四年前，且在短短的四年时间，发展成为如今江湖最大的势力，这个组织实质是杀手组织和情报组织。只要你可以给出足够的报酬，风雨组织可以为你杀任何一个人，提供你想知道的一切情报。没有人知道风雨组织总舵所在，鬼王理所当然也成为了当今江湖最神秘的人物，有人甚至猜测，他来自于，朝廷！</p><p>秦瑶也不知道，她是到了天堂，还是到了地狱。四周都是血一般的色彩充斥着她整个童年，少年，而今青年亦是如此。</p><p>鬼王，教导她如何杀人，如何折磨人，而今手上沾的鲜血有多少呢？或许已经可以淌成一条河了吧。但是，她，从不后悔过，相反，她享受着，享受着这种凌驾于苍生之上的感觉，享受着昔日把她当猪狗的人如今被她一刀一刀地割破喉咙，鲜血泗流。或许，一个人，在小时候遭受的苦难越多，他的报复心理就越强吧。</p><p>因为，小孩，太单纯了，对是非善恶还没有一定的认识，也不知道当他把一把刀捅进对方的身子里，对方是何种感觉。所以，或许对小孩来说，杀人只是一种游戏，鲜血就像红色涂料一般，可以肆意涂抹s。</p><p>而，除鬼王以外，她生命最重要的另外两个男人，亦不是皆有如此悲惨的生世吗？</p><p>江湖人称白凤公子，眼前的这个家伙，永远都是一副病怏怏的样子，苍白的脸，一袭白衣翩翩，仿佛对什么都那么的不屑一顾。</p><p>听说他本是江南最大的布商郑家之后，在随亲人移居到长安城途中，被祁山马匪所劫杀。所有的家人都被屠戮殆尽。碰巧鬼王，路过，救了少年一命。三天后，鬼王出手，祁山马匪皆被捆绑跪在少年面前。而，这个当时年仅十四岁的少年，在鬼王面前，面无表情地，一刀一刀地把那些手刃他家人的马匪，总共一百二十八人，一一砍下了脑袋，剁掉了四肢，鲜血染红了整片祁山。从此，祁山沦为禁地，传说半夜时常传出凄厉的惨叫声，当然，这是题外话。</p><p>而那个少年，从此俯首于鬼王脚下，虽然外传风雨组织排名第一的杀手是怀龙。但是，那只是白凤，过于低调罢了，从来都只是在幕后，操纵着风雨组织的运作，不曾经常出现于世人面前。同时，他也是组织中唯一一个见过鬼王真面目的人。可以说，他是，鬼王，最信任的心腹，如同鬼王的影子一般，那些刀下沾满无数鲜血的杀手，在他面前，就像小猫小狗一样乖巧。</p><h4 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h4><p>三年前，鬼王便将自己下嫁给白凤，而，当时，自己与怀龙已坠入爱河。但是，鬼王的命令是没有人可以违背的，而，怀龙想做的事也是谁都无法阻止的。</p><p>新婚之夜，怀龙来了，一个人，一身黑袍，一把乌刀。当时，她才发现白凤，眼前这个病弱的青年，武功决不在怀龙之下，只一把纸扇，便将怀龙所有的攻势化为虚有。而自己，看着鬼王握紧的拳头，惨笑一下，持剑向怀龙斩去，怀龙躲闪不及，或是都想不到要躲闪吧，曾经最深爱的人竟然会对自己出手！最终，怀龙的胸膛被划开一条长达两尺的剑痕，鲜血泗流，屈膝半跪。</p><p>秦瑶多么想冲到他身前，看看他伤得如何，但是白凤纸扇一横，挡住了她的所有的去路。</p><p>而鬼王，负手而立，淡淡地看着怀龙，道：“你的命，是我给你的，我随时都可以收回来！不长进的东西，你们楚家的传世功法——七宗罪，你如今才练到第几宗。别玷污了你手中的这把乌刀，断罪，啧啧，这可是传说曾屠过龙的神器！还有，当年灭你全家的人已经查出来了。”</p><p>怀龙猛地抬起头，眼中闪烁着嗜血的光芒，死死地盯着鬼王，一股冰冷的气息在空气中蔓延，凝聚。鬼王戴着恶鬼面具，看不到他有何表情，只是摇摇头，冷笑道：“等你啥时把七宗罪练到第七宗，我再告诉你！不然凭你现在修为，白白送死罢了”</p><p>怀龙，握紧手里的乌刀，不住的颤抖。许久，他站了起来，没有和任何人说话，一个人，独自离去，留下一个落寞萧索的身影。</p><p>从此，秦瑶，再也没有见过怀龙笑过，或许那个人的生命只剩下了仇恨这两个字了吧。怀龙走后，婚礼依旧进行，最终，她成为了白凤公子的女人，但是可笑的是已经三年了，两人都未曾行过夫妻之事。白凤，眼前这个人，一个让人无法摸透的男人。而如今，鬼王已很少过问组织之事。</p><p>连秦瑶也已经一年多没有见到鬼王了，可以说如今风雨组织，就掌握在这样一个瘦弱青年的手中，一摇纸扇，足以撼动这半壁江山，半壁江湖。</p><p>至于怀龙，那个曾经，甚至现在，都在她生命中占据着重要位置的男人，而今却像一只掉了线的风筝，脱离了她的手，随风而去，渐行渐远。或许世界上最遥远的距离不是生与死，而是我站在你的面前，彼此却相视无言，只能黯然擦肩而过。</p><p>而，怀龙的身世更加的特别。他，是楚家人！</p><p>楚家原是前朝兰桑王朝的皇族世家。十五年前，兰桑王朝腐朽不堪，民不聊生，最终陈广，王莽在泗河揭竿起义，星星之火，可以燎原，短短七日，便集结了农民大军达百万之众，如同迅猛的洪水一般，浩浩荡荡，最终仅三个月，统治这片土地长达两百余年的兰桑王朝，被推翻了。</p><p>之所以是这么快，一方面是兰桑王朝实在是气数已尽，另一方面是因为当时兰桑王朝两大皇族世家楚家和齐家见大势所趋，果断向起义军臣服，打开了长安城门，在里面接应。最后，陈广在长安封帝，建立云逸王朝。</p><p>前朝的皇亲，除齐，楚二家，照旧享受原来的封地和地位，其余尽数被屠戮殆尽，鲜血淌满了长安城。而追随陈广一起起义的王莽则被封为逍遥王，一人之下，万人之上。</p><p>但是，在当时乃至现在都是未解之谜的是兰桑的皇子，名为姬夕影，当时年方二十又八，一个据说是整日沉溺于诗画还有情色之中的皇子，还有那传国玉玺却下落不明。陈广封帝后，曾几次下令在全国范围内在搜找姬夕影还有玉玺的下落。</p><p>但是，那个名为姬夕影的人，还有传国的玉玺却好像凭空消失了一般，无影无踪。</p><p>而陈广封帝后，纵情于酒色之中，仅一年，便驾崩西去了。整片江山落在了，一个年仅四岁的少年，陈广之子——陈云逸稚嫩的肩上，而因为小皇帝实在过于年幼，便先由逍遥王王莽摄政，辅佐小皇帝治理江山。</p><p>可以说，逍遥王，是当世最有权势之人，之后便是齐家和楚家。但是，楚家一直都是一脉单传，家族势力日渐稀薄，而且逍遥王也在暗中削减两大世家的势力。十年之前，一个无风无月的夜，楚家上下八百余口，尽数被灭，惊动朝野。但是，有一个少年躲过了一劫，那个少年叫楚流风，为楚家当代家主楚南天的亲生儿子，而后江湖上再没有楚流风这号人物，取而代之的是风雨组织的头号杀手，怀龙！</p><p>关于楚家的灭门惨案，在朝野乃至江湖仍是一个未解之谜，没有一个定论。</p><p>常言道：瘦死的骆驼比马大，楚家虽然没落，但是楚家的家族的底蕴却不是可以小看的。楚家传承已有两百余年，第一任家主楚留香，手握断罪乌刀，那把传说中曾屠过龙的妖刀，追随姬康，一起开辟了兰桑王朝。更是创下了神功七宗罪,但是，后来，楚家没有人可以将七宗罪练到第七宗，渐渐没落。而且兰桑王朝的皇帝害怕楚家势力过于庞大，威胁到皇权，也在一定程度上打压楚家的势力。而后百年，一个名为齐祸水的女子入宫，成为皇上最宠幸的王妃，她所在家族，即齐姓世家，也就在那个时候崛起，并有压过楚家的势头。</p><p>有人断言，灭楚门决非一个势力所为，而是多方势力共同参与，而且都是当今江湖或是朝野数一数二的势力。至于，楚家为何被灭，至今仍是一个未解之谜。</p><p>思绪回转，眼前白衣依旧翩翩，这个冷淡的家伙留给自己最多的永远只是那一个略显瘦弱却又是那么挺拔，高不可攀却又有些模糊的背影。秦瑶，微启朱唇，淡淡说道：“他，还好吧！”</p><p>而白凤轻摇纸扇，望着天上，一行北雁南飞。许久，无语。</p><p>秦瑶，不禁问道：“当年灭楚门真的是出自齐家之手吗？”</p><p>白凤摇头叹道：“所有的一切，其实只是一个棋局罢了，纵横整个朝野和江湖，最终鹿死谁手，还未可知。如今，这盘棋，布局已经结束，杀局才刚刚开始。”</p><p>“什么杀局？！”秦瑶诧异道。</p><p>“这你无需知道，放心，我会把怀龙，完好地交到你的手上。”白凤，转过头，看了看秦瑶，那个小时候机灵古怪的小丫头，不禁流露出一股爱怜之情，随即叹了口气，举步离去。秦瑶，看着白凤，渐远的背影，不觉痴了。</p><h4 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h4><p>而此时，紫禁城，养心殿，一袭绣着栩栩如生的龙的黑袍是那么的惹眼，霸气。那个人，大概五十余岁吧，脸上棱角分明，眼神凌厉，就那样负手而立，直视着对面的，那个这块土地的主宰者，当今皇帝——陈云逸。</p><p>世间，也只有他敢如此吧，因为，他是，王莽！</p><p>如今，陈云逸已经十七有余了，俊秀貌美，丰神如玉，但是怎么看也只是一个酒色之徒，卧坐在龙椅之上，周围簇拥着一群佳人，莺肥燕瘦，花红柳绿。有的最多才刚满十四岁罢了。</p><p>陈云逸，似乎对王莽午夜到来感到很不耐烦，摆摆手，道：“后天的封帝仪式，一切都由皇叔做主吧。如果没别的事，皇叔先退下吧。”原来，陈云逸，后天就满十八周岁了，按照律法，摄政王王莽必须将摄政的权利重新交还给已经长达成人的皇上，举行权利的交接仪式和封帝大典。</p><p>王莽，看着龙椅上那个小儿，心里不禁一阵冷笑和鄙夷，不过脸上依旧一脸的严肃，拱手退下。</p><p>看着王莽，远去的背影，醉卧美人膝的皇帝，眼里闪过一丝凌厉的冷光。拍手，熄灯，佳人离去。偌大的养心殿，一片黑暗静寂，陈云逸端坐而起，一人酌酒而饮。</p><p>许久，不知何时起，他的身后出现了一个身影，身着太监服饰,略微发福，大概也就四十余岁，脸色看不清楚，只不过偶尔上扬的嘴角，带着点阴深的味道。</p><p>“安伯，准备好了吧。”陈云逸晃动着手里晶莹剔透的酒杯，美酒回旋。</p><p>“是的，宫里三万禁军护卫被逍遥王安插的人皆已替换为暗影小组的兵马。如今，紫禁城内，都是我们的人。血影小组也都已经蓄势待发，提刀待命。”安公公，躬身道，豆小的眼睛透着精光。</p><p>“嘿嘿，隐忍了这么久，那个老狐狸还真的以为我只是他手中的一具木偶，爱怎么摆弄就怎么摆弄。我陈氏的江山，岂是他可以染指的！”，砰！的一声刺耳的声音划破了夜的宁静。陈云逸捏碎了紧握于手中的酒杯，一地碎片，鲜艳的血液混着着美酒从手臂流淌下来，妖艳凄美。而陈云逸只是笑着，欢快地笑着。</p><p>安公公眼睛微缩，看着眼前这个他从小看着长大的少年，默默无语。</p><p>当年，如果不是忌惮齐，楚两家势力和原来先王陈广所留下的三万护城禁军。或许，王莽早就杀了眼前这个当时只有四岁的小孩子，直接篡位了吧。从他这些年来，不断通过权力巩固自己的势力，甚至在江湖势力版图上也要插上自己一脚。足以看出他是一个野心勃勃的人！而且如今尝到了权力的甜头，他又岂会心甘情愿地放弃呢？</p><p>权力，这东西跟蜂蜜一样，而世人就像那渺小的苍蝇，当他们小心翼翼的用细小的腿沾了一些蜂蜜，浅尝了一下，觉得味道还不错时，内心的欲望驱使他们一点一点向蜂蜜中心靠近。最终，他们四肢被蜂蜜死死地粘住，再也挣脱不出来了。不知这是否是他们所期待的结局呢？</p><p>而，眼前，这个看上去似乎还有些稚嫩的少年，却是有着多么深的城府。</p><p>十四年前，年仅四岁的他，手无缚鸡之力，却被硬生生地放在这个世界上最高的位置，被权利的铁链牢牢地束缚住。小孩，懂得什么是权利吗？他，需要这权利又有何用呢？或许，这个皇位根本就抵不上母亲的一个温暖的怀抱吧。但是，当他仅五岁时，上天把他仅存的一点温暖也无情地夺走了。</p><p>他的母亲刘皇后，死了，莫名其妙地死了，死得悄无声息。</p><p>这个少年，失去了最后的庇护，只能隐忍，只能装成一个昏庸无知的君王，对王莽唯命是从，才得以在这寒冷的深宫中，艰难地活下去。</p><p>而如今，他也做到了，数年的呕心沥血，卧薪尝胆，如今，整个紫禁城都已经被他控制了，而却没有被王莽所察觉。而且，在江湖的势力版块也插上自己重重地一脚，利用宫里的奇珍异宝，换来大批的资金，培养了一批近三百余人的死士！</p><p>暗盟，一个五年前才成立的地下组织，两年前，这个组织高调出手，成功覆灭了当时江湖最大的势力风雨组织一的个分舵，轰动了整个江湖。之后便如人间蒸发一般，消失得无影无踪，没有留下丝毫痕迹。</p><p>当年，暗盟，就被列入风雨组织的必杀名单的首位，不过，至今，风雨组织仍没有获得有关暗盟丝毫有用的信息。</p><p>是啊，谁又会想到，暗盟竟会藏匿在深宫之中呢？安公公，其实，从心里，对眼前这个少年，也有些佩服。</p><p>“好吧，安伯，你先下去好好休息，明天，杀局正式启动！我不允许有任何闪失！”陈云逸，眯起双眼，重新卧坐在龙椅之上。</p><p>“是。”安公公，慢慢退后，消失在黑暗中。</p><p>许久之后，陈云逸睁开双眼，望着地上那一堆掺杂着血液的碎片，怔怔出神。</p><p>那是一个鹅毛落雪的冬夜，静寂无声。也是在这个养心殿中，他，亲眼目睹王莽，那个狗贼竟然贪图他娘亲的美色，欲行苟且之事。</p><p>他的娘亲，刘皇后，奋力反抗，最后被王莽一巴掌拍飞，头撞在柱子上，香消玉殒。那时，他只有五岁，呆呆地看着他的娘亲死在他的眼前。</p><p>或许，那时的他，还不知道什么是死亡吧。等王莽走后，他才慢慢地从床底爬出来，当时不知为啥，年少的他对王莽总是心存畏惧，每次王莽一来，便迅速躲到床底下。年少的陈云逸，跑到娘亲尸身面前，俯下身子。开始，他还以为娘亲只是在睡觉，他轻轻地摇动着娘亲的手，呼唤着，娘亲，娘亲。</p><p>但是，娘亲仍一动不动。他，终于知道，他的娘亲再也醒不过来了。那时侯，心，蓦地一阵绞痛，整个身子仿佛被活生生撕裂成两半似的，那种痛楚至今他都记得那么清晰，刻骨。每次，一想起，那种钻心的心痛令他都站立不住，也唯有一次次拿刀在自己身上划下一道道伤口，才能暂时缓解那钻心的痛楚。</p><p>那时，年仅五岁的少年，就暗暗在心里发誓，一定要杀了王莽，以祭奠娘亲的在天之灵。然而，当时的他，就跟小狗小猫一样，在王莽这头猛虎面前，毫无反手之力。所以，他只能忍，等待着翻身的时机。</p><p>终于，在他十岁那年，他遇到了一个改变他一生的人，一个太监，一个平日里负责扫扫地的太监，安公公，真实名字不详。</p><p>对于安公公，他至今仍看不懂这个人。是啊，一个扫地的太监竟然身负旷世武功，同时满腹经纶，上通天文，下晓地理。未免也太令人意外了。</p><p>按照，安公公自己的说法，他是当年自己的父亲陈广秘密安插在宫里的护卫，暗中保护着陈氏子孙的安全。虽然，也心存疑虑，但是最终，十岁便已经像成人一般老成的陈云逸，选择相信安公公，因为，他需要借助外界的力量。只要这股力量现在可以为他所用。</p><p>而安公公，也从没有让他失望过，一身旷世武学尽数传授于他。且，就连暗盟这个组织的，也可以说是安公公一手创建的，自己出的力是那么的微薄，只是把宫里值钱的东西到外面换成资金供组织的运作罢了。可以说，如果没有安公公，或许如今陈云逸，也还只是一个傀儡，一个受人摆布的傀儡罢了。</p><p>而今，已经八年了，他也渐渐地对安公公消除了顾虑，同时内心也十分敬佩和感谢安公公，尊称他为安伯。</p><h4 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h4><p>黎明前的黑暗，一方的杀局终于发动。以整片江湖为宣纸，鲜血为颜料，描绘出一个旷世的杀局！只是不知道这个挥动画笔的会是谁呢？</p><p>悄无声息的，一个个裹在黑色衣服，戴着修罗面具的杀手，隐匿于黑暗之中，晃动着手中亮闪闪的屠刀，就像死神一般，收割着一条条廉价的生命。</p><p>夜褪去了冷漠地面纱，晨光熹微。</p><p>白凤，依旧一袭白衣，一把纸扇，只是此时原本苍白的脸色越发的苍白，白衣上也被鲜血染红了。眼前，五个黑衣人，戴着修罗面具，手里的刀还淌着鲜血。而自己身后，能站着的，已经没有一人了。</p><p>暗盟吗？那个在江湖中昙花一现的组织终于又出现了，想不到实力竟然如此强悍。虽然，组织大部分的人马交给怀龙了。但是，剩余的力量也不是可以小看的。而如今，却被对方全灭，只剩下自己一人。而对方还有五个人，尤其那个带头的微胖的男子，仿佛一座山一样，站在那里。蓦地，连自己都生出一股无力感。</p><p>“嘿嘿，白凤公子果然名不虚传。”带头男子，一阵冷笑。</p><p>“呵呵，过奖了，你们是陈云逸的人吧。”白凤露出苦涩又带点深味的笑容。</p><p>“咦？想不到你竟能猜到，但是，今日之后，风雨组织就从江湖势力版块中除名吧。”</p><p>“是吗？呵呵！早该想到了，坐在那个位置的人哪一个会没有野心呢？只不过王爷过于自负罢了。”</p><p>“或许吧，权力就是一裹着糖衣的毒药，但是有人深陷其中，不能自拔。现在，你可以去死了。”带头男子大手一挥，身后四个黑衣男子挥刀而上。</p><p>此时，另一个地点，齐家庭院中，依旧芳草萋萋，杨柳依依，只不过比以往不同的是多了很多具尸体，横七数八地堆满了整个院子。鲜血也染红了脚下整片土地。</p><p>他，一身黑袍，内心的愤怒形成一阵飓风，仿佛要把他活生生地扯碎。</p><p>齐于安！那个家伙竟然不在家中。同时不在的还有，他的家人和那传说中的齐家四象以及齐家这些年暗中召集培养的的门客和死士。留下的只有一些跟齐于安无多大关系的手无缚鸡之力的老少妇孺，成为了这一群冷冰冰杀手的刀下亡魂。</p><p>远处，沉睡的紫禁城，已经苏醒过来了吧，就像一只雄狮一般，在晨光下精神抖擞，神采奕奕。</p><p>忽地，一道黑色的身影出现在怀龙的面前。赫然是鬼王！</p><p>“白凤已死，秦瑶被劫，如今风雨组织只剩下现在这里三百人了。但也还有一战的资本。嘿嘿，倒是小看那个小家伙了。是我过于自负了吧。”鬼王摇头叹了口气。</p><p>“什么！白凤？！秦瑶？！”怀龙不禁失声道。原来在他冷漠地外表下，依然残留着对昔日好友的关心啊，只不多埋藏得太深太深了。毕竟从小一起长大，就像兄弟姐妹一样，那种情感总不是那么容易可以割舍的。</p><p>“是的，瑶儿被掳进了紫禁城内。现在跟我走，成败就在今日。”鬼王，冷冷地说道。随后，一个飞身而起，直接跃到庭院屋顶，怀龙跟其余风雨组织杀手紧随其后。</p><p>而此时，紫禁城楼上，陈云逸，黄袍加身，卧坐在龙椅上，沐浴在晨光之下。远远望去，真的好像一只盘曲着的龙。</p><p>陈云逸，端着酒杯，戏谑着看着，眼前的那个佳人，半裸身子，微胸半露，四肢被缚，跪在自己跟前。多么可人的一个女子啊，肩若削成，腰如约素。延颈秀项，皓质呈露。但是那又如何呢？这样一个女子，竟然是风雨组织排行前三的的杀手——秦瑶。</p><p>嘿嘿，比当年自己母亲靓丽多了，说不定已经不知被王莽那个狗贼玷污了多少次了吧。咳咳，这该死的贱人！一想到母亲，陈云逸，内心不自觉一阵绞痛。随手把手中的酒杯朝秦瑶额头砸去，鲜血混着美酒，顺着脸颊，顺着粉颈，顺着酥胸，流淌而下。凄美，而又楚楚可怜。</p><p>但是，陈云逸只是笑着，疯狂地笑着，像疯子一样疯狂地笑着。</p><p>龙椅背后，静候着两个人。一个太监着装，不用多说便是安公公了。而另一个披着一件破烂不堪的衣服，骨瘦如柴，跟干尸没啥两样，两只绿色的眼睛凸起，超出眼眶两厘米左右。就像一只毒蛇似的，说不出的阴狠和恶心。</p><p>“陈公子，你命令的事，我已办妥。我们家主也已遵守约定，调集兵马，拦下了王莽北上的军队。希望事成之后，你也会遵守承诺，不然二十万齐家军就在长安城外。如果没事，在下先行告退。”那个人说话跟嚼骨头没啥两样，巴嘎巴嘎的摩擦着人的耳膜，言毕，转身欲从城墙飞身而下。</p><p>“慢着！”陈云逸，冷冷地说道。</p><p>“陈公子，还有何事吗？”那个家伙停下脚步，转身深深地盯着陈云逸，像毒蛇一般地牢牢地盯着，后脚微微撤后一步，随时可以发力。他已嗅到了危险的气息。</p><p>身为齐家四象之一的蛇，又岂是泛泛之辈呢？</p><p>齐家四象，保守估计也有一百多年的历史了。每当齐家少主确定时，齐家便会从各地找来近一千人的小孩，从五岁到十五岁不等，然后直接扔进修罗场的畜生道训练，所谓训练也就是自相残杀罢了。最终，畜生道下仅有百余人可以进入人间道，此时会传授你杀人的技巧，百余人也成为齐家的死士，开始为齐家效力杀人。最后这百人之间，只有四人可以进入修罗道。</p><p>这四人便是齐家四象，代号分别为虎豹蛇象，而此时，少主也接手了家主的位置。齐家四象的使命，便是唯家主命令是从，一生效忠齐家。他们基本不存在人类的情感，冷冰冰的，就像修罗一般，拿着死神的镰刀，收割着一个个沉甸甸的人头。</p><p>然而，陈云逸，却淡淡直视着蛇那绿色阴冷的眼睛，淡淡地说道：“借你人头一用又如何？”蛇闻言，瞳孔一缩，突然，细长的脖子被一只苍白的手直接捏碎，骨头和血液从口中溢了出来，倒地，死了。</p><p>安公公，拿出手帕，擦了擦手，淡淡地看了已经死了的蛇一眼，重新回到了陈云逸身后。</p><p>陈云逸，摆了摆手，旁边一个侍卫走来，把蛇的尸体从城楼上扔了下去。其实，有时候，生命就是这么低贱！</p><p>陈云逸重新卧在龙椅上，斟满一杯酒，慢慢喝着。嘿嘿，第二步杀招也开始了吧。</p><p>日上三竿，长安城外，两军对峙。</p><p>怀龙，看着前方统帅的那个人，一阵失神。想不到，风雨组织的幕后主使，鬼王，竟然是深居朝野高堂的逍遥王王莽！但是，他的眼光一下子被对方军队前方的那个人吸引住了，那个四十多岁的中年人，就是齐于安吧！当年屠戮楚氏一门的侩子手！怀龙，禁不住颤抖起来，手中的乌刀发出妖异的光芒，那正是渴望鲜血的欲望征兆啊。</p><p>而前方，齐于安冷冷地看着王莽，传说中的鬼王，那个当初给他错误的情报，说兰桑王朝的传国玉玺被楚家所得。风雨组织，是一个杀手和情报组织，提供的情报也未曾有假过，所以齐于安信以为真，以为楚家要率先叛乱。</p><p>当时，云逸王朝才刚刚建立四年，很多地方都不完善，而且皇帝老儿不到一年便死了，整片江山落在一个仅四岁的小儿手上。如果有兰桑王朝的传国玉玺，振臂一挥，肯定会有大批的前朝余孽响应。齐于安，是一个野心勃勃的人，权宜再三，他选择先下手为强，并以重金雇佣风雨组织的杀手，在那个无月无风的夜，屠戮了楚家上下八百余口。然而却没有找到，那所谓的传国玉玺。而且，鬼王，竟在他手下，救走了那个楚家唯一的嫡系子孙——楚流风！</p><p>“嘿嘿，鬼王，果然是你！逍遥王，王莽！”齐于安寒声道。</p><p>“我也不曾想到，你竟然也会被那个小家伙利用。”王莽戏谑着看着齐于安。</p><p>“利用吗，相互利用罢了。蛇到现在还没回来。肯定遭到了不测了。那小家伙，手段的确高明。现在要不要先联手呢？等攻下紫禁城。然后你我再新账旧账一起算算。”</p><p>“嘿嘿，我为什么要与你联手？”</p><p>“真的不需要吗？现在，你的实力最多与我大抵相当罢了。也就二十多万兵力，加上已经覆灭一半的风雨组织，最多三百多个杀手。而我齐家的死士，还有五百多人。纵然你今天可以全灭了我，但是，紫禁城三万禁军，且易守难攻，固若金汤。你，残余的兵力可以攻得下吗？”</p><p>“你错了，今日灭你的不止是我，还有当年的楚家残留到现在的十万大军。当年，楚家族灭，楚家军鼎沸，差点暴动，最后被我安抚。发誓为他们找出灭楚门的凶手。而我当初救走那个孩子，不止是因为楚家的乌刀断罪和神功七宗罪，那个孩子肯定可以被培养为一个最杰出的杀手。更是因为楚家遗孤，对楚家军的影响力！”</p><p>“什么！”齐于安，猛然惊醒。然而耳边只回荡着王莽的怒喊声，“楚家军何在！楚家遗孤楚流风何在！”</p><p>“楚家军在此！”，如一声惊雷，平地而起，连地面都被震动了几下。四面暗林中亮出一根根磨得铮亮的铁枪，围在了齐于安兵马的两侧。而逍遥王的兵马也慢慢退后，并且分开一条路。</p><p>一个孤傲的身影，拖着乌刀，断罪，一步一个脚印的沉重地走了出来。多年压在心底的仇恨如今终于可以释放。怀龙，抬起头，杀气蔓延，一双眼睛已经成了血红色。</p><p>齐于安，怕了，他不敢直视怀龙的眼睛，那种浓烈杀气让他都不能呼吸。</p><p>“掩护家主撤退！”齐于安面前，出现了三个身影，便就是四象中的剩下的三象，虎豹象了吧。而齐于安一个箭步消失在茫茫的大军之中。紧跟其后的是三象还有齐家五百死士。</p><p>“狗贼，哪里逃！”怀龙一声怒喝，暴跳而起，抡起乌刀，直斩而下，乌刀发出耀眼的光芒，前方十米挡住他道的士兵，直接被刀斩，裂成两半，半块身子被抛上天空，鲜血漫天飘洒。所有人都怔住了，纷纷让出一条道来，怀龙向齐于安离去的方西追去，随后的是风雨组织三百杀手。</p><p>而此时，楚家军和王莽的军队联合起来，将近四十万的兵马，围住了仅二十万兵力的齐家军。“杀！”王莽一声令下，王楚联军就像洪水一般淹没了齐家军。没有人能够形容这场战役的惨烈性，漫天飞舞着残肢，断臂，头颅，鲜血更是染红了半边天。而，王莽只是在远处，负手而立，默默地看着这场惨烈的战役。</p><p>直到落日时分，战役才接近尾声。齐家军全灭。楚家军只剩下一万余人。而王莽的兵马还有近十万之众。楚家军现任统领楚狂，原来是楚南天一手提拔上来的，而楚狂也一直把楚南天当做父亲一般看待。不曾想到十年前，竟然会发生灭楚门惨案。</p><p>那时，楚狂就暗暗发誓一定要为楚家报仇。而今，齐家军尽数被灭，齐老贼如今也应该被少主手刃了吧!想到这儿，楚狂不禁大笑起来，冲到王莽的面前，拱手一抱，单膝而跪，“多谢王爷！”</p><p>“谢我吗？嘿嘿！”</p><p>“啊！”楚狂，凄厉的惨叫，胸前虽然有着厚厚的铠甲防护，但是依然被王莽一拳击碎，同时击碎的还有那颗原本激烈跳动的心脏。而剩余的楚家军还没有反应过来，就被旁边刚刚还是盟友的王莽士兵乱刀砍死了。</p><p>随后，王莽整顿好十万兵马，浩浩荡荡地踏入长安城，直奔紫禁城。</p><p>而此时，另一场惨烈的战役也落下了帷幕。怀龙此时已经成为一个血人，身上已不知被砍了多少刀，只有那一把乌刀却越发的妖异。</p><p>而在怀龙的面前，还可以勉强站立的人也只有，齐于安一人了。</p><p>“当年灭楚门的真相你想知道吧？”齐于安知道大势已去，回天已无力了，但是就是死，再怎么也要拉上王莽那狗贼。</p><p>“说！”怀龙寒声道。</p><p>三分钟后，怀龙转身离去。身后，齐于安，身首异处。</p><h4 id="伍"><a href="#伍" class="headerlink" title="伍"></a>伍</h4><p>月起，无风，紫禁城上，陈云逸依旧卧坐在龙椅上。身后，安公公依旧一动不动。</p><p>前方，远处，传来沉重的脚步声。如同打鼓一般。咚咚咚咚。</p><p>“该来的，总是来了。”陈云逸伸了个懒腰，站了起来，看着远处渐渐逼近的军队，摆了摆手。城墙之上，站满了弓箭手。而城门也打开了，三万禁军有序地走了出来。</p><p>紫禁城外，两军对峙。</p><p>陈云逸，与王莽隔空对视。胜负就在此一举了吧。</p><p>“王莽，你这是什么意思，想造反吗？”陈云逸，质问道。</p><p>“哈哈哈哈，我就是造反你又能如何？！成王败寇罢了。我，也没想到你这黄口小儿，竟然隐忍得这么深，连我也被你蒙在鼓里。”王莽冷笑道，“当年你的父亲不但夺走了我的天下，还夺走了我最心爱的女人，也就是你的母亲刘皇后。那时，我就暗暗发誓，总有一天我要夺回属于我的一切！”</p><p>“放屁，我的母亲是你杀的，你个禽兽！”陈云逸，咬着牙齿，怒视着王莽，全身禁不住一阵颤抖。</p><p>“没错，当年，陈广已死，她竟然还不愿意跟我在一起！我曾那么的爱她，而她却辜负了我。所以，我杀了她！”</p><p>“啊！你！该死！”，陈云逸仰天长啸，怒发冲冠，直接从城楼飞掠而下，朝王莽奔去。愤怒已经让他失去了理智了吧，就像一只疯狗一般恶狠狠地朝那个人咬去。</p><p>但令人奇怪的是，安公公，并没有制止陈云逸冲动的行为，而是站在高墙上，如同一个局外人一般冷冷地看着。</p><p>陈云逸，的确天赋异禀，如今十八岁，但一身武功却也已登堂入室。但是，比起王莽，传说中的鬼王，显然还是逊色了不少。还不到百招，便被王莽制住。</p><p>“安伯，救我！”陈云逸奋力呼喊。但是，安公公依旧冷冷地看着，没有任何动作。“啊！”一声惨叫，年仅十八岁的陈云逸就这样死了，像死狗一般被丢在一边。没有人在意。这个年轻的帝王原本还以为在这个纵横江湖和朝野的棋局中，他是一个博弈者，却不曾想到他，也只是别人的一颗棋子罢了。</p><p>王莽抬头看着站在城墙上的那个身着太监服的太监，眼睛微缩，那个，才是此刻，他最终的对手吧。隐藏得那么深了，而今，才露出了他真正的面目。</p><p>“敢问阁下是？”王莽看着城墙上的那个太监，询问道。</p><p>“还记得，当年兰桑王朝那个失踪的皇子吗？”安公公淡淡地说道。</p><p>“你是，兰桑王朝皇太子，姬夕影！”</p><p>“没错，当年，为了躲过你们的追查，我不惜挥刀自宫，委身成为一个太监，苟活在这个深宫之中。等待着机会。而今天，这个机会终于来了，我将重现我兰桑王朝的辉煌！”姬夕影，狂妄着笑着，但是这笑容更多带着的是苦涩味道吧。</p><p>“是吗？”王莽冷冷地看着城楼上那个太监，握紧了拳头，蓄势待发。</p><p>姬夕影，却没有看王莽，而是从衣袖中拿出了一个东西，轻轻擦拭，那东西赫然是兰桑王朝的传国玉玺！姬夕影，把玉玺高高举起，喊道：“天佑兰桑！”，声震长安城。</p><p>而就在此时，长安城内，平民家中，冲出了一个个带着兵器，穿着布衣的江湖人士，将近，三万之众。只见那些江湖人士，扯掉身上的布衣，露出厚厚的铠甲，闪烁着寒光，竟然是前朝兰桑王朝的余孽。单膝朝姬夕影跪下，吼道：“天佑兰桑，皇太子万岁！”</p><p>“尔等起身！当年，兰桑王朝的确是腐败不堪，气数全尽。先父也是沉溺于酒色之中，穷奢极欲，导致国库空虚，军队战斗力低下。被陈广，王莽所组成的农民起义军所灭也是常理之中。但是，而今，我，姬夕影，有信心也有能力，带领你们重现我兰桑王朝建朝的辉煌！”姬夕影振臂一挥，前后六万余人，举起刀枪，齐声吼道：“誓死效忠皇子，复我兰桑王朝！”</p><p>王莽，瞳孔一缩，想不到，姬夕影隐藏得如此之深，竟然可以躲过自己的耳目，将前朝的余孽召集起来。如今，自己只有十万兵马，且还经过一场激烈的战斗，而对方赫然有六万精力充沛的士兵！</p><p>姬夕影，似乎知道了王莽心中所想，说道：“如今我的兵马足以与你一战！但倘若真的开战，估计两军都会被覆灭。而明日便是封帝大典，四方诸侯皆会面京朝见帝王！到时，倘若，紫禁城内无兵马，那些诸侯铁定会有叛乱之心，到时烽烟四起，天下大乱，也不是你想要见到的吧！”</p><p>“那你又欲如何？莫非想把这大好河山拱手让我！”王莽冷笑道。</p><p>“痴人说梦，久闻鬼王一身修为登峰造极，已是陆地神仙级人物。今日，你就跟我，决战这紫禁之巅，胜者得天下，如何？”</p><p>“嘿嘿，你想找死我也没办法。今日就让你见识一下魔道第一神功——修罗天道的真正威力！”王莽，脚踏马头，飞身而上城楼。脚下的那匹骏马直接被震碎，血肉四溅。</p><p>姬夕影，见王莽上来，也不废话。直接开打。两人的身影，快如闪电，分分合合。且威势甚大，没过半刻钟，高大的城墙便被拆了三分之一。巨石不断从天落下，下面的士兵纷纷退后，退得慢的直接被埋在巨石之下，生死未知。</p><p>半个小时之后，晕冷的月光下，两道身影，相隔二十米，落在支离破碎的城墙之上，重重地喘着粗气。</p><p>“咳咳，想不到，失传多年的葵花宝典竟然被你所得！”王莽，连说话都似乎有些吃力，刚一张口，鲜血便从嘴角流了下来。</p><p>“不错，我当年在深宫一个荒芜多年的庭院中拾到此秘籍，苦练十数载，而今终于大成。现在，能死在葵花宝典最后一式上，你也足以自傲了。去死吧！大黄葵花朵朵开！”姬夕影一声怒喝，全身释放出，黄色而又璀璨的光芒，形成一朵巨大的葵花。</p><p>“来吧，修罗天道第九重天——修罗灭世！”王莽也大吼起来，全身发出黑色耀眼的光芒，形成一个黑色的巨大的太阳。</p><p>刹那间，黄色的葵花跟黑色的太阳撞击在了一起，轰的一声，爆发出万丈光芒，日月失色，星辰无光，整座紫禁城被淹没。长安城也连续震动了三下，所有士兵都栽倒在地。</p><p>整整一刻钟后，那滔天而起的灰尘才慢慢散去，原本高大的城墙中间一段，如今已不复存在，化为粉末，地面裂痕纵横，一道身影屈膝半跪，艰难地用手撑着地面，微微颤抖，赫然是王莽！而百米外，躺着一个人，那就是姬夕影了。此时，姬夕影已经俨然是一个血人了，血肉模糊，基本让人认不出他来了。</p><p>“哈哈哈哈！”王莽狂笑起来，“最后胜利的人终究是我！”</p><p>“是吗？”前方，冷月下，出现了一道身影，萧索而又冷漠，一把乌刀，寒光闪烁，拖着地面，一步一步向王莽走来。</p><p>“你，还活着！”王莽艰难地站了起来，但是身子还是只不住一阵摇晃，显然已是强弩之末。</p><p>“当年楚家一门八百余口血债，今日是时候还了吧！”怀龙寒声道。</p><p>“畜生，休要听齐于安那狗贼胡说。如果没有我，十年前，你就已经死了！咳咳——·”王莽一激动，血液从咽喉涌出，喷了一地。</p><p>“王爷，敢做还不敢当吗？”后面一袭白衣，一把纸扇，一个苍白的面孔，翩翩而来。</p><p>“白凤！你，也没死！怎么，想恩将仇报吗？”王莽身子忍不住摇晃。</p><p>“恩将仇报？哈哈哈哈，当年，祁山马匪会劫杀我郑家，也是拜你所赐吧！”</p><p>“放屁！”</p><p>“别狡辩了，当年我郑氏家族，乃是江南最大的富商。但家父，选择扶持楚家。你为了遏制楚家的势力，同时想控制江南的经济动脉，选择拿我们郑家开刀！十数年来，我一直都在暗中调查此事。而你，当年或乎认为我只是一个小孩，竟然大意到没有销毁证据。”，白凤，苍白的脸色稍微有些许血色，应该是激动所致吧，随手把一封信件，朝王莽扔去。</p><p>王莽接住，打开一看，竟然是他当年写给祁山马匪马老大的书信。</p><p>当年，他假借马老大之手，除掉郑家，承诺事成之后，帮马老大灭了阴山的土匪，使祁阴山脉都归马老大统治。事后，他才出手，扫平祁山马匪。借刀杀人，一直都是他惯用的手段。而，那个小孩，即现在的白凤，当初也就十二三岁罢了，在亲人被屠戮殆尽时，竟然没有流下一滴泪，而是拿起一把刀，不顾一切地朝马匪，砍去，那种狠劲连他都感到震惊。</p><p>而且，那个小孩骨骼精奇，天生的练武奇才，王莽不禁起了爱才之心，收为所用。而后，白凤也从没有让他失望过，他也渐渐地放心把风雨组织交给他打理。原本，他以为白凤，已经被打造成为他最顺手的兵器，却不曾想不到当年的事会被揭穿！而今，那把兵器转过来，对准了他自己。</p><p>王莽此时，英雄陌路，冷月下，萧索的身影在风中瑟瑟发抖。</p><p>怀龙，握紧乌刀，一步一步朝王莽走去。</p><p>“怀龙，不要！！”突然，旁边闪出一道身影，挡住了怀龙前进的脚步，赫然是秦瑶。</p><p>原来，在姬夕影与王莽大战之前，白凤抢先一步，将秦瑶救下城楼，安置在离城楼不远处。</p><p>而现在，虽然已经知道王莽的恶行，但是秦瑶还是忍不住要站出来，因为如果没有王莽，或许，她现在，只是一个乞丐，或许，早就冻死或饿死在街头了。</p><p>“秦瑶，莫要逼我，今日，他必须死！”怀龙逼近一步，寒声道。</p><p>秦瑶后退一步，但还是挡在怀龙的面前。</p><p>“秦瑶，你这是何苦？他当年，对你只是一饭之恩罢了，而且还把你培养成了杀人的工具。这些年，你为他杀了多少人？做了多少事？早已经可以还报当年的一饭之恩了。”旁边白凤，摇扇叹息道。</p><p>看着秦瑶略带迟疑的脸色，王莽先下手为强，欺身到秦瑶背后，右手锁住秦瑶的喉咙。</p><p>“秦瑶！”</p><p>“秦瑶！”</p><p>两声惊呼。平时总是面无表情的白凤和冷漠的怀龙现在都变了脸色。想不到，他们还是在意着自己，秦瑶，闭上眼睛，满足地笑了。</p><p>“你们退后，不然我杀了她！”王莽恶狠狠地说道。</p><p>怀龙和白凤相视一眼，慢慢退后。</p><p>“哈哈哈哈！”王莽狂笑着，挟持着秦瑶向前走去。</p><p>突然，“啊！”的一声，王莽手一松，秦瑶闪到一边而去。就在此时，一把乌刀，从天而降，直接把王莽劈成了两半！</p><p>而，原本，已经倒地不起，生死未知的姬夕影，此时正半跪在不远处，喘着粗气。原来，关键时刻，姬夕影出手了，劲气隔空打到王莽锁住秦瑶喉咙的右手，迫使王莽松开右手，而怀龙趁机，果断出手，刀斩了王莽。</p><p>一代枭雄王莽，就这样死了。曾经权倾朝野，威震江湖，如今被刀斩成两半，连完好尸身都没有留下。</p><p>怀龙。白凤。还有秦瑶。看着王莽的尸身，脸色复杂。</p><p>“咳咳，过来扶我一把。”远处，姬夕影，咳了几口血。。</p><p>白凤看了怀龙和秦瑶一眼，默默走到姬夕影身边，蹲下去，扶起了姬夕影。</p><p>“玉玺给我。”姬夕影有气无力地说道。</p><p>白凤从衣袖中取出玉玺，拿给姬夕影。</p><p>姬夕影，把玉玺举到头顶，面对着四方的兵马，喊道：“叛贼王莽已经被诛，此时，我便是当今的皇帝，尔等，可否臣服！”</p><p>“天佑兰桑！吾皇万岁万万岁！”原先紫禁城的三万军队和后来的三万兵马，率先跪下，俯首称臣。而王莽的兵马，互相看了一眼，最后见大势已去，也跪拜下去。</p><p>——·</p><p>后话：姬夕影只在位一年，便把皇位传给了白凤，改国号康乾。白凤励精图治，呕心沥血，将江山打理得井井有条，人民安居乐业，生活美满，那个时期，被称为康乾盛世。</p><p>而，怀龙和秦瑶则携手相依，仗剑走天涯，成为了人人羡慕的神仙眷侣。成了江湖上的一段佳话。</p><p>故事终。</p>]]></content>
      
      
      <categories>
          
          <category> store </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武侠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明月泪</title>
      <link href="2020/10/27/store/%E6%98%8E%E6%9C%88%E6%B3%AA/"/>
      <url>2020/10/27/store/%E6%98%8E%E6%9C%88%E6%B3%AA/</url>
      
        <content type="html"><![CDATA[<p>星辰零落地散布在漆黑的天宇上，宛如一双双冷冽的眼睛，漠然地俯视着繁华的南京城。</p><p>虽然已过午夜，但是南京城繁闹依旧，绚丽的烟火，喧闹的夜市，灯火通明的秦淮河上，花船画舫，摇曳生姿，歌妓的歌声，宛如莺啼，在风中飘荡，交织着才子的多情，编织着温柔乡中男女迷醉的梦。</p><a id="more"></a><h4 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h4><p>星辰零落地散布在漆黑的天宇上，宛如一双双冷冽的眼睛，漠然地俯视着繁华的南京城。</p><p>虽然已过午夜，但是南京城繁闹依旧，绚丽的烟火，喧闹的夜市，灯火通明的秦淮河上，花船画舫，摇曳生姿，歌妓的歌声，宛如莺啼，在风中飘荡，交织着才子的多情，编织着温柔乡中男女迷醉的梦。</p><p>秦淮河畔，柳絮树下，一白衣女子，望着河上欢笑的男女，听着缠绵的笙歌，怔怔出神。重新踏上这片土地，她的内心是颤抖的，因为这片土地埋葬着她年少的过去，那段痛楚的岁月曾经在她的身上留下深深的烙印，以至于现在回想起来，她都忍不住颤抖，仿佛灵魂一瞬间被抽空，绝望充斥着整个躯壳。</p><p>十年了，十年的光阴可以发生什么呢？</p><p>只知道七年前，大陈王朝惨败晋王朝，签下了屈辱的割地赔款条约。</p><p>只知道七年前，她年幼的孩子惨死在屠刀之下，而她能做的只是无力的喊叫。</p><p>只知道十年前，她曾是名动秦淮的歌妓，十年后，她身上却背负着几十条的人命。</p><p>只知道十年前，那个在她眼里卑微的少年，如今已成为了组织的领袖。</p><p>过去，现在，未来，一切都在发生改变。</p><p>或许不变的只有这悠悠流淌的秦淮河水，不知道流淌过多少铅华岁月，也不知道浸透多少痴情女子的伤心泪。或许，繁华哀逝只是一曲悲歌，只是昨日的人，今日又在何处，是否也正仰望着同一片的天空？。</p><p>今夜，手上又要沾染鲜血了吧，因为那些人都该死！</p><p>七年前，大陈王朝在晋王朝铁蹄的践踏下，支离破碎，在战乱面前，贫民的生命是那般的脆弱，无力，而那些上位者会怜悯吗？不会！他们只会想着如何保住他们的地位，哪怕卑躬屈膝，割地赔款。</p><p>漠北之地便在当年的割地条约之中，但是因为漠北之地寒贫清苦，常年积冰，所以晋王朝统治者对此很不满意，在收刮完财产后，下令军队屠戮了漠北一带近百个村庄，鲜血淌满了整条漠河，染红了漠北整个天际。时至今日，如果你到漠北，仍会看到无数的尸体冰冻在漠河中，死不瞑目。然而，面对着这数万双绝望的瞳孔，大陈王朝却选择了沉默，一味的忍让让晋王朝更加的肆无忌惮，在大陈王朝的都城南京城都建立了自己的领事馆，驻扎着晋王朝的军队，而且晋人在大陈王朝犯罪都不会受到大陈王朝的律法惩罚，而是交由晋王朝的领事馆处置。</p><p>大陈王朝正一步一步地被晋王朝蚕食，而这些都是由于一个家族，慕容家族。百年前，慕容氏协助陈广开辟了大陈王朝，慕容家族就在那时兴起，享受着皇族的待遇。近百年的发展，慕容家族已经成为了大陈王朝最大的世家，其下门客近千人，无论在经济，政治，还是军事上，都有慕容家族的成员。然而就是是这样一个庞大的家族却为了保证自己的生存，主张向晋王朝屈服，签下了屈辱的割地赔款条约。</p><p>而，自从漠北之难发生后，民间一个组织悄然地建立起来，天驱。替天行道，驱除外虏，是这个组织的宗旨。</p><p>三年来，天驱组织诛杀了数百个慕容家族的成员和晋王朝在大陈王朝的领事。甚至有一群死士奉命到晋王朝的都城刺杀晋王朝的皇帝，但是以失败告终，没有一个人回来。而大陈王朝为了给晋王朝一个交代，下令捕杀天驱组织成员。但是，天驱组织死伤并不严重，反而吸引越来越多的有志之士加入进来，天驱组织俨然已经形成了一股巨大的暗流，在大陈王朝流动。</p><p>白衣女子便是天驱五护法之一，凤凰。</p><p>今夜，南京城，慕容府，她的目标是刺杀晋王朝的二皇子赵括。</p><p>因为赵括该死！赵括仗着自己是晋王朝的二皇子，目无王法，好色残暴，在来南京城的一个月里，强抢民女数十名，甚至当街行苟且之事，十几位民女被强暴致死。但是朝廷对此却选择了沉默。而慕容家族甚至将赵括奉为贵宾。</p><p>但是刺杀赵括并不是来自天驱组织的命令，因为南京城是皇城所在，戒备森严，而慕容家族百年底蕴更是不可小视，刺杀的风险实在太高，而且赵括只是晋王朝一个只懂玩乐享受的皇子，虽然受晋王的喜爱，但是并没有实权，杀了他对晋王朝基本没什么影响，甚至可能激怒晋王朝，使之对天驱组织进行疯狂的围剿。</p><p>然而凤凰实在无法忍受赵括的恶行，嫉恶如仇，敢爱敢做一向是她的作风，所以她来了，一个人来了。清冷的月光，将她的影子拉得好长好长，她的眼睛就像明月一样明亮。</p><p>身为五护法之一，凤凰的身手自然不弱，而且根据这几日的探查，她已经探查到二皇子的住所，避过巡视的守卫，几下跃纵，凤凰悄无声息地来到了二皇子所住的阁楼庭院。奇怪的是这里并没有森严的守卫，很宁静，就像一个平静的湖泊，没有一点涟漪。</p><p>但是正是这种平静让凤凰感到深深的压迫和莫名的寒意。</p><p>突然这平静就像镜子一样被一股浓烈的杀气撕得粉碎，一把剑突兀地出现，直逼凤凰的后颈。凤凰条件反射转身袖中剑一横，抵住了这一致命的一击，整个人借力腾空而起，一个转身，左手袖中射出了一根根银针，但是却被那个人一剑劈开。</p><p>好可怕的人，好浓烈的杀气！凤凰冷冷地盯着对面的那个人。</p><p>那个人戴着银色的面具，眼神，冰冷深邃，就像深井一样看不到尽头。</p><p>一把剑在月光下闪烁着耀眼的光芒，交织着逼人的寒气和浓烈的杀气。</p><p>那是？怎么可能？寒水剑！青龙的寒水剑！</p><p>“你是谁？寒水剑怎么会在你的手上？青龙呢？”凤凰冷冷的问道。</p><p>“死了。“</p><p>死了，真的死了。青龙是天驱五护法之一，武功仅此于天驱领袖风蓝。当年也就是他，自告奋勇，率领天驱死士前往晋王朝的都城刺杀晋王朝的皇帝。可是再也没有回来过，事后，天驱也试图潜入晋王朝打听下落，但是毫无结果。大家都认为他们死了，想不到真的死了。</p><p>“谁杀了他？”凤凰怒视着戴着银色面具的人，咬牙切齿道。</p><p>“我杀的。”淡淡的声音，冷冷的，不带一点感情。</p><p>“那你就去死吧！”凤凰秀眉一横，袖中寒光一闪，整个人朝那个人掠去，但是那个人只横手一刀，便瓦解了凤凰的攻势，紧接着跃身而起，展开了凛烈的攻势，剑气纵横，不过百招，凤凰便被劈飞出去，砸到在地，身上也被剑气割裂出许多的口子，鲜血淋漓。</p><p>凤凰深深地看了那个人一眼，左手撑地，腾空而起，翻过阁楼庭院逃了出去。</p><p>然而那个人并没有阻止凤凰离去的脚步，只是默默地看着凤凰离去的身影，修长的身影在月光下显得清冷孤傲，戴着银色面具，不知道他是何种表情。</p><p>凤凰逃出阁楼的庭院，连续几个腾跃，身体便支撑不住了，栽倒在地，猛地吐了一口血，那个人的剑气太可怕了，杀气也太凛烈了，差点让她窒息。或许只有风蓝才是他的对手吧，想不到二皇子周围竟然有这样的高手。只是不知道这人是晋王朝的人还是慕容家的人。</p><p>“这边有血迹！立即封锁这片区域！”突然后面传来这样的巡视的守卫的声音。紧接着，听到一大批守卫进入了这片区域。</p><p>该死的，凤凰强支撑起身子，但是没走两步便又栽倒在地。近了，更近了，然道自己今天就要死在这里吗？凤凰扯掉脸上面纱，无奈地笑了，脸上一道醒目的伤疤从右耳一直到嘴角，映着苍白的明月，说不出的凄美。</p><p>死，有什么好怕。这些年支撑自己活着除了刻骨的仇恨，还有那侥幸地等待吧。但是，这等待是否有意义呢？呵呵，风蓝，我死后，你会想起我吗？曾经那个卑微的，看着自己还会脸红的少年，已经长成了真正的男子汉，只是，在你的心里，除了仇恨，便什么都容不下了吧。当初那个义无反顾地牵着我的手，带我离开这南京城的少年也永远都不会回来了吧。还有少游，那个曾经自己最爱但又伤害自己最深的人，现在又在何方？是否安然度过了战乱，是否找到了适合的可以陪伴一生的女子，又是否已经有了一个可爱的孩子呢？孩子？还有我那可怜的孩子，你在那边过得还好吗？会孤独吗？会害怕吗？不用怕，娘马上来陪伴你了。娘亏欠你太多了，娘对不起你啊。凤凰痛苦地阖上了双眼。</p><p>“这里没你们的事，你们下去吧。”</p><p>“是，少主。“</p><p>耳畔隐隐约约传来谈话声，然后有离去的脚步声，再然后凤凰感觉自己被抱了起来，被拥入一个温暖的怀里。那感觉好温暖，好熟悉，她情不自禁将头轻轻地埋进那个温暖的怀，嘴角露出了淡淡的满足的笑意，沉沉地睡了过去。</p><p>“明月啊！”只听见一声哀叹，然后便是轻轻的脚步声，由近到远。</p><h4 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h4><p>“干娘，您看，这些东西够不够”，伴随着珠玉般落地清脆的声音，女子将描金的匣子放在桌子上，打开抽屉，珠美如玉的手从匣子里抓出了满把真珠白玉堆在桌子上，叮当作响。看着匣子里底层白绸上躺着的白玉壁，头上堆满珠翠的老女人，眼角稍微动了一下，但是脸色依旧僵死如木，漠然地看着对面的女子，没有说一句话。</p><p>迟疑了一下，只听见环佩作响，女子纤细的手地将头上，身上的饰物一一解下来放在桌子上，带着颤抖焦急的语气说道：“干娘，我全部的首饰都在这里了，你还想要怎么样？“</p><p>老女人的脸色依旧没有什么变化，红尘爬滚多年，她当年知道对面这个女子还有多少价值可以榨取，怎么可能轻易让她离去呢？浅尝了一口茶水，老女人猩红的指甲弹了弹茶沫子，淡淡地说道：“明月啊，当年你父母贫困病危，把你卖到这儿来，虽然只卖了十两看病钱，但是签的可是死契，今儿要是没有我开口，你别想出这个门。这些年来，我可没在你身上少花钱，自小请老师教你琴棋书画，诗词舞乐，不然你今天怎么可以成为这秦淮的花魁，早就饿死在街道上了。如今，就为了一个姓陆的书生，你就想离开这里了，在这里，多少权贵官员宠幸着你，而他一个穷书生能给你什么？说不定连平平安安地在这世道上活下去都不好说“</p><p>“少游，他珍惜我，不像其他人只把我当作一个青楼女子那般的糟蹋，他爱我，我也爱他。“女子执拗地说道，当提到少游两个字的时候，女子脸上浮现出了幸福的笑容，虽然只是一瞬间。</p><p>“嘿嘿，爱？傻孩子，你明白什么是爱，爱从男人嘴里说出来就是狗屁！想干娘当初就是信了男人这狗屁话，死心塌地地跟着他，到头来等他玩腻了就把我卖到了这妓院。“老女人似乎想起了不堪的往事，情绪有点失控，恶狠狠地说道。</p><p>“少游不是这种人！“女子焦急地分辩道，在她心中，少游是完美的，没有任何人可以代替的。</p><p>“明月啊，再说那书生真的喜欢你又怎么样？别忘了，你只是青楼的女子啊！那书生家里应该也是书香门第，你觉得他的父母会接受你这种青楼女子做儿媳吗？那个懦弱的书生会为了你违抗父母之命吗？认命吧，从你被卖到青楼的那一刻起，你就永远都别想逃离这里了，死也得死在这里。“，老女人漠然看着女子梨花带雨的容颜，冷冷地说道，“风蓝，将明月小姐带上楼去！”</p><p>“明月小姐，上楼吧。“瘦弱的少年，默默地走过来拉了拉明月的袖子，他是那么的可以让人无视他的存在，也许因为身份低下，他只能默默地站在没有人注意的角落。</p><p>“我不走，干娘，你是不是想让我把身家性命留在这里你才肯放我走。那好！”女子将拉她的瘦弱少年推倒在地，从桌子上拿起了一根攒珠钗子，狠狠地刺向自己的脸。</p><p>只听见“嘶”的一声，仿佛世上最柔滑的布被割裂开来，女子的右脸颊上从右耳到嘴角，一道刺目的伤痕狠狠地撕裂了这姣好的容颜。鲜血一颗一颗地从脸上跳落下来，混杂着晶莹的泪珠。女子冷冷地看着老女人，带着十二分的决然。屋里的人都惊呆了，那个瘦弱的少年，还倒在地上，痛惜地看着女子，握紧了拳头。</p><p>“砰”的一声，老女人手里的茶杯掉到了地上，毁了，全毁了，十八年来倾注心血，精心雕琢的可人儿，三年的秦淮花魁，醉春楼的招牌啊，全毁了，老女人没想到一向温顺娴静的明月竟然会做出这样的疯狂的事来，然道爱情真的可以让人变得那么疯狂，失去理性。</p><p>“你，你，你给我滚出去，我再也不想看到你！“老女人站了起来，猩红的长指甲指着女子，臃肿干枯的身体颤抖着，生气得都说不出话来。</p><p>“谢谢干娘，明月对不起干娘。“女子跪倒在地，朝老女人重重地扣了几个响头，然后欣喜地转身离去，她终于自由了，明月就这样为自己赎了身，虽然付出了毁容的代价，但她认为这是值得的。</p><p>“风蓝，清洗一下屋子。“老女人看了看地上的血迹，无奈地摇了摇头。</p><p>“是。“瘦弱的少年应了一声，面无表情，默默地从地上爬了起来，去后院找木桶和抹布清洗屋子。</p><p>第二天，整个南京城鲜有人不知道这件事，这也成了人们酒足饭后的话题。</p><p>“那陆少游到底长什么样子啊，竟然让秦淮花魁做出这种疯狂的举动。”</p><p>“容貌毁了，身体没毁啊，要是让我碰到，嘿嘿。花魁，平日里高高在上，叫得好听，其实还不就是一婊子。“</p><p>“那个花魁真是傻到家了，哪个男的爱的不是女的容貌啊，把脸毁了，那个姓陆的还会要她吗？真是可笑！“</p><p>“昨天我还看到她呢，哭得跟泪人似的，好像找不到姓陆的了。“</p><p>“如果姓陆的真的不要她了，那她该怎么活啊，这世道女的不靠脸还怎么活啊。“</p><p>这世上永远都不会缺少流言，尤其是那些原本就卑微地活着的人，当他们看到原本只能仰视的人突然变得跟他们一样，甚至比他们还卑微时，他们的第一反应往往不是同情，而是欢喜，幸灾乐祸一向是人类骨子里的病态因子，所以他们总是兴致勃勃地谈笑着别人的不幸遭遇。</p><p>已经过了深夜，醉春楼的灯火也渐渐暗了下去，自从明月走后，醉春楼亦冷清了许多。</p><p>明月蜷缩在醉春楼后面的柴房外，除了这里，她不知道她还能往哪里去，她也已经一天没吃饭了，第一次，她体会到了冷和饿是什么感觉，但是更深的感觉是心痛，深入骨子里的心痛。但是她并不恨少游，因为她知道少游是个好人，好人就应该孝顺，不能违抗父母之命，而且他父母都已经为他安排好了婚事。所以他不能接受自己，都是自己不好，但是自己又怎么可以选择自己的出身？</p><p>她不知道，这世上为什么能容下卖笑的风尘女子，却容不下从良的人？</p><p>明月抱紧膝盖，低声地抽泣着，是那么的楚楚动人，惹人怜惜。</p><p>“明，明月小姐。“一声低低的叫唤。瘦弱的少年不知何时起便已经站在角落默默地看着这女子吧，这柴房本就是他的容身之所。只不过此时看着女子梨花带雨，情不自禁叫唤了一声。</p><p>“是风蓝啊，昨天对不起啊，太用力，把你推倒了。“明月抹了抹眼角的泪水，看了看那瘦弱的少年，虽然已经同处屋檐下多年，但是并没有太多交集，好像两根平行线，总是平滑地擦肩而过。</p><p>风蓝默默地走过来，坐在了明月的旁边，轻声道：“他呢？”</p><p>“少游吗？他不接受我，因为他家里人不同意，而且已经给他安排好婚事了。”明月无奈地苦笑道。</p><p>“这个畜生！有婚事还来糟蹋你！”风蓝气愤不已，怒骂道。</p><p>“这不怪他！是我自己这么做的，怪不得他，他是好人。唉，只怪我身子不干净。“</p><p>“想不到你这时候还为他说话。那他要你怎么办呢？南京城根本没有你的容身之处了。“少年紧紧握住拳头，全身微微颤抖。</p><p>“他给了我一包的金子，让我到别处安生。我也不知道他怎么会有那么多钱。”明月从怀里掏出了那一包金子，在月光下闪着耀眼的光芒。</p><p>望着那金灿灿的金子，少年蓦地产生一股痛楚，金子耀眼的光芒刺痛了少年的眼睛，更刺痛了少年的心。</p><p>真的，真的什么都可以用金钱衡量吗？而自己没有金钱，就什么都得不到吗？</p><p>曾经年少的心因为身边的这个女子而颤动，但是自己却只能深深地埋藏在心底。</p><p>是啊，她高贵，美丽，就像天边的云彩，而，自己卑微，低贱，就像地上蝼蚁。她，和自己之间有太大的差距了，也只有现在，她从天边跌落下来，他才可以跟她肩并肩，坐在一起聊天吧。</p><p>但是，看着她伤心，难过，你是不是只能无能为力，还是你一直都只能无能为力？</p><p>蓦地，少年身体抑制不住地颤抖。</p><p>许久，少年抬起头，眼神明亮如月，正视着身边这张支离破碎的脸，坚定地说道：“我带你走吧，明月！”</p><p>“走？走去哪？”明月疑惑地看着少年。</p><p>“我们一起逃离这里，去我的家乡，漠北，虽然那里天寒地冻，但是那里的人们都很好。流浪在外好久了，我也想回去看一下我年迈的父母和幼小的妹妹，这些年我也攒了一点钱。“少年欣喜激动地说道。</p><p>“漠北，好远啊，那是不是再也见不到少游了。“明月喃喃道。</p><p>“明月，忘了他吧，总有一天，他能给你的我也能给你。“少年突然握住了明月的手，紧紧地握着，不让她挣脱。</p><p>“风。。风蓝。。。好吧。“明月看着少年那炙热的眼神，实在不忍心拒绝他，其实，风蓝也是挺好的一个人，只是太沉默了，都没在意过他的存在。</p><p>五更天，背着满天的星月，少年，牵着明月的手，走了，头也不回地走了。</p><p>他们不知道有个白衣青年默默地注视着他们离去的背影，身后还有一群黑衣人，手里握着亮晃晃的刀。</p><p>“这下你们可以回去交差了吧！“白衣青年冷冷地说道。</p><p>“可是公子，家主的命令是杀了那个女的。“身后响起一个同样冷冷的声音。</p><p>“别忘了，再过几年，我就是慕容家家主，你们好自为之。“白衣青年眼中寒光一闪，冷冷道。</p><p>“是，公子，撤。“话音刚落，一群黑衣人又消失在了夜色之中。</p><p>明月，对不起，我骗了你，我姓慕容，不姓陆，也不是所谓的书生，我是慕容家的公子，只不过家父管教太严，很少有机会可以外出。没想到，一出来就遇到了你，喜欢上了你，但是我都一直不敢让家父知道。我也想不到你会做出这么疯狂的事情来，整个南京城都在谈论你的疯狂举动，连家父都知道了。看着你破碎的脸，我的心痛得都无法呼吸了，那时我多么想抛下一切带你走。但是，我不能，家父绝不会允许有这种丑闻发生在慕容家，你不知道活在一个大家族有多么的累，背负着家族的沉甸甸的包袱，连婚事都不能自主。我被迫答应家父，与当朝九公主的婚事，以此来恳求家父放过你。没想到，家父还是不想放过你。我能为你做的也只有这么多了。明月，希望你可以自由快乐地活下去。忘了我吧，永远都不要回来了。</p><p>望着天边皎洁的明月，白衣青年，痛苦地埋上了双眼，两行清泪缓缓地流了下来。</p><h4 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h4><p>漠北的天空永远是黑压压的，阳光很少照到这片土地，也很少有人会来打扰这片土地。</p><p>铺天盖地的风雪像个喝醉酒的拿着鞭子的老头子总是在这片土地上瞎逛，有时会抓些牛羊去当下酒菜，有时会发些小脾气拿着鞭子将赶路的行人狠狠抽打一顿。</p><p>赶上饥荒的时期，饥肠辘辘的雪狼也会从雪原上下来觅食，从人类的嘴边讨点口粮果腹，比如牛羊，家禽什么的，有时候落单的人类也难免成为那果腹的口粮，雪狼可不会跟你讲什么道理，因为再大的道理也比不上肚子饿了要吃饭，所以很少人敢独自一人走在漠北的荒地上。</p><p>迎着漫天的风雪，一个少年缓慢而又坚定地走着，瘦小的身躯只裹着两件破破的薄薄的衣物，而且还有些许血迹，小脸蛋被冻得发青发紫，嘴唇也发白干裂开来。</p><p>反观少年的背上却是很大很大的一个包裹，凑近一看，才发现原来是厚厚的好几层棉被里，熟睡着一个女子，女子睡得很安静，脸色也很红润，显然并没有受到风雪的侵袭。</p><p>那个背着她的少年默默地撑起了这漫天风雪，虽然身躯瘦小，但是想要让他倒下并不容易，即便是前几日，那凶残的雪狼锋利的爪子狠狠地撕裂了他的胸口，只不过天气过于寒冷，鲜血还没淌出来便已经被冻结住了，所以衣服上并没有太多的血迹。</p><p>女子也认为他只是受了轻伤，而且少年怕她受寒，执意要背着她，所以女子也只好顺了他的意。也只有少年知道他自己受了多么重的伤，他的胸骨已经断了两根，每走一步，断裂的骨头便扎进血肉里，然而那锥心的痛硬是被他狠狠地忍住了。</p><p>因为他知道，如果他倒下了，他背上的那个女人根本无法在这暗无天地的风雪中活下去。</p><p>当初他义无反顾带她挣脱南京城那个金丝鸟笼，来到这漠北之地，便是希望她可以像漠北的白鹰一样矫健，自由，快乐地活着，这也是他师父对他的期望。</p><p>只不过这么多年来，他既没有矫健，也没有自由，更没有快乐，仇恨像毒药一般深深地附着在他的骨子里，使他日夜难眠。</p><p>他不甘心，他不甘心体内本流着这个世界上最高贵的血，却要苟活在漠北寒苦之地。</p><p>于是他逃离漠北，去往帝都南京城，却发现自己在那里也只能像蝼蚁一般卑微地活着，面对着庞大的皇城，他是那么的渺小，渺小得像一粒沙子。</p><p>这么些年，他，终于知道了祖辈的无奈，明白了父亲的悲哀。所以他才决定带着这个可怜的女人离开帝都，在漠北扎根好好地活下去。</p><p>一步一步又一步，终于走到了漠北的小村庄，少年再也支撑不住了，倒在了风雪中。</p><p>“风蓝，你怎么了？你醒醒啊。“明月摇着少年的躯体哭喊着。</p><p>“蓝儿！“女子刚听到一声焦急地呼喊，只见一个披着雪狼皮的老者已经来到了她前面，查看了风蓝的脉搏后，便迅速脱下雪狼皮裹住风蓝，掠进了一旁的屋子里。</p><p>而明月也被村民带到另一个屋子，好生照料。这些天，她一直担心风蓝，询问他的状况，但是所有人都对她保持沉默。</p><p>为此，明月眼睛红了好多天，那个义无反顾地牵着她的手离开南京城那个伤心地，那个那么多日默默地背着她走过风风雪雪，那个面对着凶残的雪狼，紧紧地将自己护在身后，那个少年怎么样了，她突然发现，那个少年已经那么深地走进了她的世界里，甚至融进了她的生命，晚上睡觉时，她都不禁会想起少年温暖的背，那里没有风雪，没有寒冷，没有痛苦，也没有伤悲。</p><p>整整半个月，明月才又看到了风蓝，看着那个躺在床上，胸前缠着厚厚的布，一脸苍白却还对着自己傻笑的少年，明月笑了，也哭了。</p><p>从那以后，明月安稳地活在了漠北之地，也正如风蓝希望的那样，矫健，自由，快乐，而且还学会了一些身手，是风蓝的师父教的。那个枯瘦的老者可以一掌击裂漠河冰封三尺的河面，可以飞手一剑将百米外的雪狼斩成两半。这让明月感到惊奇，还有很多事也让明月感到惊奇，比如村子里还有一群披着黑色袍子的人，很神秘，好像是研究药草，而且每隔一些年都有帝都服饰的人将一两个黑袍人带走。</p><p>这个村庄的其他人或多或少也好像有不俗的身手。而其他村庄的人就很普通了，但是人也很好，有时候会带一些牛羊，小麦，马铃薯啥的来给风蓝的村子，有雪狼入侵啥的，风蓝村子里的人也会去帮忙。</p><p>而风蓝的父母在他离家两年后便去世了，为此风蓝自责了好一阵子，不过他的妹妹还活着，而且长得很漂亮，大家看风蓝和他妹妹的眼神都带着敬畏。明月对此也感到很奇怪，不过并没有过问。</p><p>日子就这么慢慢地过着，漠北虽然不似南京城那般繁华，热闹，但是雪原上那迷离的极光，月亮湖微微荡漾的涟漪，还有漠河冰下鲜活的鱼儿，都是漠北别样的风情。</p><p>每个地方都有每个地方的精彩，每个地方都有每个地方的美丽。而活在每个地方的人们也同样可以活得精彩，美丽。</p><p>明月在和风蓝日复一日的相处中，两个人互相吸引，渐渐地擦出了爱情的火花，只是让明月想不到的是，她逃离了南京城，远离了那个人，却也怀上了那个人的骨肉。</p><p>凭着母性的伟大，明月将孩子生了下来，是个女儿，明月给她取名叫铃儿，铃儿，欢快的铃儿，清澈的铃声永远荡漾在漠北的天空。</p><p>后来风蓝也接受了这个女孩，也渐渐地喜欢上了这个小女孩，细心地呵护着她，就像是她的父亲一样，只不过此时两个人曾经热烈的情感也因为这个孩子而趋于平淡。</p><p>自小明月让铃儿叫风蓝为风叔叔，有一次铃儿稚气地问明月道：“啊娘，为什么大呆，二丫他们都有爸爸，我没有啊。风叔叔那么好，我叫他爸爸好不好啊。“明月和风蓝只能相视无奈地笑了笑。</p><p>就这样平平淡淡地度过了好些年，迎来了战乱的年代，后来村子里穿着黑袍子的人都被帝都的人带走了。再后来，晋王朝的军队踏进了漠北之地，进行了惨无人道的屠戮。即使是身手不凡的人也阻挡不了铁血的重甲军队。</p><p>明月忘不了那个雪夜。</p><p>她年仅七岁的女儿惨死在屠刀之下，而她只能绝望地看着。</p><p>鲜血淋漓，还未绽放的花朵便被摧残了，漠北的天空也再没有那清澈的铃声，有的只是灰暗的伤悲。</p><p>挣脱团团围住自己的士兵，明月发疯似的冲向那个杀害自己女儿的恶魔，发疯似地抓着他的脖子，抓着他的脸，抓得双手都淌满了鲜血，如果没有风蓝将失去理智的她打昏，将她和死去的铃儿带走，她或许也死在了士兵锋利的剑下了吧。</p><p>确定无法抵挡那铁血的铁甲军队，在村子里身手不凡的人掩护下，风蓝他们逃到了月亮湖，明月没想到平静的明月湖竟然暗藏机关，也没想到村子里还有一个异常苍老的穿着黑衣袍子的人没有被带走，只见他默念咒语，平静的湖面分裂开来，露出了石阶，一行人就这样消失在月亮湖荡漾的涟漪下。</p><p>只是可怜漠北其他村庄那些普通的可怜人，只能无力地在屠刀下颤抖。</p><p>晋王朝铁甲军队走后，漠北之地罕见地下了一夜血雨，风蓝还有残存的人们颤抖地跪在雪地上，看着那数万双同类无助的瞳孔，每个人都哭了，风蓝更是将头重重地砸进了冰雪里。</p><p>因为他是个无能的王，他的祖祖父本是夏王朝唯一活下来的皇子，百年前大陈王朝的崛起，使得夏王朝沦为了历史的尘埃，残存的大夏王朝的子民跟皇族有点关系的都被贬到了漠北这片寒苦之地。</p><p>虽然经过百余年，但是这些人，对自己的祖辈，对自己的父亲，对自己都有着对王一样的敬畏，他们都把自己当成是他们的王。</p><p>而自己呢？不但不能让自己的子民过上好日子，甚至在他们饱受帝都欺凌的时候只能无能为力，在他们惨遭屠戮的时候也只能无能为力，然道一直都只能无能为力吗？</p><p>风蓝蓦地抬起了头，眼神比雪原上的狼还冷冽还残酷，从那一刻起，明月再也没有在风蓝脸上看到笑，当初那个看着自己会傻笑会脸红的少年永远都不会在回来了，取而代之的是天驱的首领。</p><p>风蓝的师父在那个雪夜后没多久便去世了，因为年纪大了，又在那个雪夜受了太重的伤，而那个苍老的穿着黑袍子的人其实是位老巫祭，而后一年后因为年纪太大了，也去世了，不过留下了不少珍贵的药物，一身术法也传给了后来的天驱的五护法的玄武。</p><p>巫祭是夏王朝独有的官位，据说传自上古年间，比当时夏王朝盛行的机关术还要久远。但是巫祭的数量很是稀少，因为巫祭修习的是鬼神之术，俗称巫术，传说巫术大成者甚至可以起尸还魂，移山填海，当然这着实有点夸张。</p><p>其实巫祭最为被人看重的是他们所炼制的巫毒，融入术法的巫毒附着在人的灵魂上，如果没有同样高深的巫祭施法或是特制的药物，谁都摆脱不了巫毒的诅咒，就连后代也会受到巫毒的诅咒。所以帝都对这些巫祭是很看重的，尤其是大陈的皇族。</p><p>而经过三年的发展，天驱已然形成了一股巨大的暗流，十年前，那个瘦弱的少年，如今又变成何等的模样呢？</p><p>我们期待，风蓝的归来！</p><h4 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h4><p>明月睡了很久很久，做了一个很长很长的梦，她并不想醒来。因为只有在梦中，风蓝才依旧是一个腼腆的男孩，看着她会脸红，会对着她傻笑。</p><p>但是梦总会醒来，人，还是得学会去面对现在的一切，不管是好的还是不好的。</p><p>明月不情愿地睁开了双眼，映入眼帘的是一张姣好的容颜，并没有刻意去粉饰，温润如玉，很自然给人一种亲切感。</p><p>见到明月醒来，女子忙起身端来一碗药，轻轻扶起明月，给她服下。</p><p>“咳咳，这里是哪里？你是？”喝完药后，明月咳嗽了一下，迟疑地问道。</p><p>“这里的慕容府，我叫玲珑，是少游的妻子。”女子轻轻地拍了拍明月的后背，柔声道。</p><p>“慕容府？少游？！”明月猛地从床上挣扎起来，警惕地看着女子。</p><p>“你不要紧张，我并无恶意。”女子无奈地笑道。</p><p>“我怎么会在这里？”明月疑惑地看着女子。</p><p>“明月，你醒了。“门外传来一个爽然的声音，紧跟着，一袭白衣飘然而至。明月看着那张陌生却又那么熟悉的面孔，先是疑惑，而后惊喜，再着默然，最后只化为淡淡的断断续续的两个字：”少。少。少游。“</p><p>“我先下去了。“女子走到男子耳畔，柔声说道。</p><p>“嗯。“白衣男子轻轻地抚摸女子的发髻，温柔地说道。</p><p>女子轻轻地掩上了房门，留下对视无言的一男一女。</p><p>“好久不见，明月。“不知何时，男子无奈地耸耸肩，苦笑道。</p><p>“是啊，十年了。”</p><p>“你，还好吧？”</p><p>“我很好，你怎么会在这里，你是慕容家什么人？“</p><p>“我是慕容家少主，现在慕容家一切事务都由我负责。“</p><p>“呵呵，我现在是叫你陆公子呢？还是慕容公子呢？想不到我被你骗了那么久。“</p><p>“明月，抱歉。但我也有我的无奈，只是想不到有生之年竟然还可以与你相见，更想不到会是在这样的场合。“</p><p>“是啊，我也想不到当年那个软弱的书生竟然会是慕容家的少主，更是想不到昔日对流浪狗都尚存着一份怜意的陆少游，今日却签下了屈辱的割地赔款条约，一手铸成了漠北之难！更是将敌国晋皇子奉为上宾，纵容他在都城胡作非为，奸杀妇女。“明月愤慨地指着少游痛斥道。</p><p>“是吗，在你心中，我就是一个可耻的卖国贼吗？哈哈哈哈哈，不要忘了，如今的江山还是陈氏的江山，我慕容氏充其量也只是陈氏养的一条狗罢了。我慕容氏世代受巫毒的控制，，也罢，中间诸多干系，你不会明白的。再者，流放漠北的都是当年夏王朝的余孽，并不是我大陈子民。我自认为，我做得没错。“</p><p>“我不知道这些，也不想知道，我只知道现在漠河中还躺着数万具闭不上眼的尸体，或许你认为那些人的生命都是轻贱的，不值得怜惜。但是我告诉你，我们年幼的女儿，当年也惨死在了漠北之难。而那时，她才只有七岁啊。”明月痛苦地埋上双眼，流下两行清泪。</p><p>“女儿？我们的女儿？”少游不解地看着明月。</p><p>“想不到吧，十年前我虽然离开了这里，离开了你，却怀上了你的骨肉。”</p><p>“什么！“少游猛地脸色一白，无力地瘫倒在一边的椅子上。</p><p>“来日再见，便是刀剑相向之时，希望你好自为之。“明月深深地看了他一眼，拾起床边的剑，打开房门，准备离去。</p><p>只见两个枯瘦的老者突然出现，封住了她的去路。</p><p>明月默默地握紧手里的剑。</p><p>“让她走吧。”屋里传来无力的声音。</p><p>两个枯瘦的老者又突兀地消失在庭院中。</p><p>明月脸色略显苍白，腾空跃起，掠过屋顶而去，只留下屋内那道落寞的身影越发的萧索。</p><p>“没事吧。”轻轻的踱步声，玲珑不知何时起出现在了少游身后，怜惜地看着他，柔声问道。</p><p>“我没事，玲珑，这些年辛苦你了。”少游转身站起，轻轻地将玲珑揽在怀里，嗅了嗅那淡淡的发香，满眼柔情。</p><p>“虽然有些事，你不告诉我害怕我担心，但是毕竟夫妻好几年了，我还是知道的。我知道你这么多年所承载的责任，所付出的心血。我父王根本不配做一个王者，好色软弱，贪图享乐，他的目光短浅到只能从一个女人的头部看到脚部。而我于他也只是一件政治工具罢了，他对于我并没有残存一丝感情，正如他对我的母后，因为我的母后年老色衰，便被他遗弃在冷宫里，日夜诵经念佛，聊以度日。所以我对他也谈不上什么感情，我甚至讨厌看到他那恶心的嘴脸。“</p><p>“十年前我们只是权力结合的牺牲品，那一年我失去了明月，你失去了龙青，但是这么多年的夫妻了，也少了年少的鲁莽冲动，渐渐将彼此融入到自己生命中。年少的情感虽然纯净美好，但是也是脆弱的，不能长久，如果不是明月脸上那道刺目的伤疤，也许我认不出是她了。谁又能想到，十年前一个柔弱的秦淮歌妓，今日会成为持剑夜闯慕容府的侠女。”</p><p>“是啊，十年太长了。龙青，也不知道他现在在哪里了，被朝廷通缉了十年了吧。”玲珑感慨道。</p><p>“如果当年龙青将军还在的话，或许大陈军队也不会在晋王朝的铁骑之下溃败不堪。”</p><p>“好了，不说他了，过去的都让它过去吧。刚才复儿睡下了，不过他胸口已经出现了细微的黑色的伤口。”玲珑心疼道。</p><p>“巫毒一旦种下，世代遗传，只是没想到复儿还不到十岁，潜藏体内的巫毒便开始扩散了。”</p><p>“这可如何是好，都是我父王一手造的孽啊。怎么说也是他外孙啊。”</p><p>“你放心，我会想办法让复儿好起来的，哪怕以我整个慕容家族作为代价。”少游眼里闪过一丝决然，亲吻了一下玲珑的额头，安慰道。</p><p>“少游，不管你做什么，我都支持你。我再去看看复儿。”</p><p>“恩，去吧。”少游看着玲珑离去的身影，怔怔出神。</p><p>不知何时起，屋子的气温突然急剧下降，一个冷傲的身影出现在了少游的面前，带着银色的面具，看不出是何等表情。</p><p>“你来了。”少游淡淡地说道。</p><p>“她，还好吧。”银色面具的男子淡淡地问道，只不过声音略微有些苦涩。</p><p>“她，很好，其实我并不介意你们俩相见，因为我自信她终究是我的女人，而她对你也只是十年前那模糊的印象罢了。龙青将军。”</p><p>“我知道，所以我也不敢奢求什么，每天能静静地看着她便足够了。”</p><p>“十年了，你变了好多，收敛了太多的锋芒，但是无论眼神还是身手都更加的锐利可怕。岁月的确是最好的磨刀石。”</p><p>“少主谬赞了，我这条命是你从晋国死狱拖出来的，玲珑这么多年多亏你的照顾，我也相信我给不了她这么稳定幸福的生活。所以，如今我龙青也甘愿为你效命。”</p><p>“赵括过几日便会回晋了，你跟他回去。他这个人极具野心，阴险又善于隐藏，深受晋王的喜爱，绝不会甘于在大皇子之下，不然他也不会主动地跟我慕容家族示好，甚至暗中配合将你秘密从晋国死狱换出，当顺水人情给我。只不过大皇子英明神勇，在朝中人气很大，所以他只能借助外援，只要给他足够的筹码，他绝不会让我们失望的。”少游冷笑道。</p><p>“但是如果让他当上晋国的皇帝，以他的性格，难保他不会忘恩负义，对大陈变本加厉。”</p><p>“呵呵，哪来的恩义，互相利用罢了，利用二皇子这条线，我大陈可以悄悄地派人潜进晋国高层，而且这些年我的故意退让，也让晋国认为我大陈只是案板上的鱼肉。我慕容家毕竟拥有百年底蕴，明里暗里的力量总是有点的。“</p><p>“天驱那边呢？风蓝的确是一位很不错的领袖。天驱五护法除了我之外，个个也都可以独当一面。凤凰你见过了，身手还行。玄武是当年仅留的巫祭的传人，巫术和身手都甚是了得。白虎的身手也不在我之下，还有朱雀，是风蓝的妹妹，我也没有见到，据说人长得足以颠倒众生，善于媚惑之术。”</p><p>“这我知道，天驱，我已经纵容它成长很久了，因为它目前的立场是跟我一样的，直指晋王朝。当年割地赔款条约是我签下的，间接导致漠北一带惨遭屠戮，我也知道风蓝总有一天会找我报仇的。来日再见，我跟他只活其一。”</p><p>“只要我在，我不会让你先倒下的，玲珑跟孩子都需要你。“</p><p>“哈哈哈哈，是吗？好吧，你先下去吧，让我静一静。“少游笑了笑，嘴角微微上扬，带着点嘲讽跟阴深的味道。</p><p>“是。“龙青应了一声便退了下去。</p><p>屋内静寂下来，不久传来细微的呻吟声。</p><p>少游的脸色苍白如纸，全身发抖，倒在地上，只见胸口处一大片黑色的伤口已经溃烂不堪，甚至还淌出了黑汁血水，逐渐扩散至全身，黑色的经脉像小蛇一般，不停地蠕动着。</p><p>巫毒又发作了，每次进宫都要看狗皇帝那张恶心的嘴脸，然后领取药物暂缓巫毒的蔓延。</p><p>隐忍了这么久，是时候爆发了，为了自己，为了复儿，为了玲珑，为了我慕容一家，是时候做最后一搏了。</p><p>少游咬紧牙，眼里闪过一丝冷光，寒冷如铁。整个人迸发出的寒意竟然比刚才那银色面具的男子还浓烈，还可怕。</p><h4 id="伍"><a href="#伍" class="headerlink" title="伍"></a>伍</h4><p>出了慕容府，已是满天繁星，明月深吸一口气，缓步走在街道上。</p><p>虽然已经十年未见，但内心还是残留着十年前支离破碎的记忆，所以对于少游，明月不知道自己如今对他怀着何等情感。爱吗？恨吗？或许都不是吧，有的只是淡淡的陌生感和感伤吧。</p><p>漫步拐进幽深的胡同，一个肥硕的布衣男子映入明月眼帘，戴着硕大的斗笠，低着头，在胡同边上吃着热腾腾的杂酱面，看起来吃得很香。屁股下垫着五块凳子才勉勉强强坐得下，但是椅子还是忍不住发出一阵一阵咯吱咯吱的颤抖声。</p><p>明月很自然地坐在了他的对面，男子抬头瞥了明月一眼，随口问道：“要吃吗？味道还可以，挺香的。”</p><p>“不用了，你吃就好。”明月笑道。</p><p>“那随你。”说完，男子继续埋头吃了起来，吃得满头大汗，津津有味，不一会儿桌子上便多出了十多只空空的大碗，叠得老高老高的，明月都看不到他的脸了。</p><p>“嗯，吃饱了，走吧，风蓝要见你。”男子伸出大手一抹嘴角，然后掏出一锭银两扔给面摊老板，之后转过头就走，吧嗒叭嗒地对着身后的明月说道。</p><p>“白虎，风蓝怎么也来了。”明月显然熟悉男子这大大咧咧的秉性，急忙跟上去。</p><p>“还不是担心你，而且据朱雀传来的消息，帝都最近可能会不太平，说不定正是我们的机会。”男子自顾自大步地走了，话还没说完便消失在胡同尾。</p><p>明月甚是无语，赶忙小跑跟上，也消失在了胡同尾。</p><p>即日，慕容府内，少游脸色略微苍白，但是明显比昨晚瘫倒在地好了许多，只是不知道他怎么熬过昨晚那漫长的夜的。</p><p>坐在少游面前正是晋王朝的二皇子，此时眉头紧锁，一脸严肃，眼角间偶尔闪过些许阴厉，怎么看也不像一个纵情声色的家伙，更像是一只蝎子，虽然平日淹没在风尘之下，但是只要一有机会，它那剧毒地尾刺便会深深地扎进你的心脏，不留一点余地。</p><p>许久，二皇子正色道：“只要慕容公子能给足够的筹码，我可以放命一搏，我有很大的把握从大皇子那里夺到皇位。世人对大皇子的评价无非就是仁爱谦逊，英勇善战，我承认这些我都比不上他，但是这也是他的弱点，身为王者，过于仁爱本不是一件什么好事。当初，我父王下令屠戮漠北之地，彰显我晋王朝国威。而，大皇子认为此举过于残暴，有伤民心，竟然自负到跟我父王叫板，竭力阻止，最后不还是徒劳无功，反而令我父王很不高兴。”</p><p>“哦，我听说大皇子倒是对你关爱有加。你然道对他下得去手。“少游冷笑道。</p><p>“的确，他对我很好，但是位置只有一个，他想坐，我也想坐。帝王路上难免沾满鲜血，堆满尸骨，其中很多便是亲人的鲜血。你知道，他母亲，晋王朝高高在上，受人敬爱的皇后，那个老女人为了她儿子的帝王路铺满了多少人的尸骨吗？我的母亲便是上面的一具尸骨。倘若这么多年来，我不是懂得见人的脸色，伪装成一个声色犬马之徒，让大家都认为我跟皇位无缘，你觉得今日我还能在这里吗？嘿嘿。“二皇子眼里闪过一丝阴狠。</p><p>“好，我给你五百个我慕容府暗中多年培养的死士，你都可以给他们喂了毒，保证对你忠心不二，另外附加一千万白银作为你打理上下的资金，我慕容家族的门客在晋为官的，都可以为你所用。而且我相信你隐忍多年，私底下肯定也培养了一帮心腹，不然当初不会那么顺利将青龙从死狱救出来。“少游浅尝一口清茶，淡淡地说道。</p><p>“青龙吗？希望你能忍痛割爱，我需要他的帮助，但是我也会给他喂毒，因为他太强大，我需要一把足够锋利的剑，但是前提是那把剑有柄可以让我握得住。“</p><p>“那是自然，我也希望你能信守承诺，取消领事馆，撤出驻扎在都城的军队，当初割地赔款条约作毁，你要还回那五亿白银还有漠北一带的割地。“少游严肃地说道。</p><p>“没问题，我甚至可以挥兵而下，让你成为大陈的君王。“</p><p>“我并不喜欢坐在很高的位置上，如果可能我只希望好好地和我的妻子还有孩子远离一切，好好地活下去。“少游淡淡地说道。</p><p>“哦！”二皇子对此很是不解。</p><p>但是少游显然并不想作过多解释，正视着二皇子的眼睛，严肃道：“如果二皇子肯信守承诺的话，请把面前的茶饮下，我给的诚意已经很多了，压的筹码也很大了，所以希望二皇子也拿出一点诚意。茶里下了巫毒，想来你也有所耳闻。倘若半年后没有解药的话，你的身体会开始溃烂，最后全身化为一摊黑水。”</p><p>“好，这个赌注的确够大的，既然你不会让我失望，我自然也不会让你失望。不久，我便是晋的王！“二皇子站起来，拿起茶杯一饮而尽。</p><p>随后二皇子收拾了一下行李，便起身回晋了，同行的有青龙，还有当初来大陈的一班人马，浩浩荡荡有几十人。不过如果你仔细看的话，会发现那些人已经都不是原来的那班人马，至于原来那些人去了哪里，没有人知道，也没有人关心。除了二皇子的那批人马，其余也有一些行路人，亦或是行镖者，亦或经商者从大陈不同时间，不同地点向晋王朝而去。而这些人，是真正的行路人，行镖者，亦或是经商者，也没有人知道。</p><p>送走二皇子，少游并没有感到轻松，对于他来说，二皇子充其量只是一颗棋子罢了，或许在二皇子心中他也如此，彼此利用罢了。他，对二皇子也没有过多的期待，因为晋王身旁内不乏卧虎藏龙之辈，当年，即使以青龙为首的天驱一干人等都尽数被制服。大皇子身为太子，身边肯定也有不少能人异士。所以他除了给二皇子的那些死士外，暗中也派了很多死士在晋王朝待命。至于二皇子所谓的喂毒在他来说只是一个噱头罢了，除了巫毒那种需要术法才能解的毒，其他俗世上的毒对于拥有百余年底蕴的慕容家族来说，根本不值得一提。所以，那些死士始终还是慕容家族的死士，倘若二皇子失败的话，他便可以永远地闭上眼睛，闭上嘴巴。</p><p>现在让他感到凝重的还是那幽深的大陈皇宫，慕容家族的确有百年底蕴，但是陈氏江山也稳如泰山百余年之久。其他人，即使是慕容家，都无法染指大陈皇宫，里面除了妃子之外，其他诸如太监，宫女，大内侍卫，无一例外都是陈氏培养的心腹，出身绝对清白，祖宗三代姓啥名啥都调查得清清楚楚。</p><p>但是真正让少游感到压力的是，是皇宫内传说中的，金银铜铁，四大护卫，没有人知道他们的来历，只能根据他们所戴的面具进行区分。百余年来，有不少大盗亦或是身手不凡之人想夜闯皇宫，但是无一例外都被人丢了出来，身上不是少了根胳膊，便是少了条腿，有的连脑袋都没有了，关于四大护卫的传说也近乎神话。这么多年来，少游也只见过铁护卫，那个戴着铁面具一动不动地站在狗皇帝背后，仿佛什么东西都不能让他感兴趣，眼神呆滞，少游甚至感受不到他体内有任何生命的气息。但是偶尔眼神凝聚，迸发出浓烈的近乎实质的杀气，就像是一把锋利的剑，仿佛随时可以摧毁眼前的一切。</p><p>少游不知道铁侍卫实力究竟如何，因为未知，所以敬畏，而且还有未曾露面的铜侍卫，银侍卫和金侍卫，少游有理由相信他们比铜侍卫更加的可怕。所以，这么多年来，他都不敢有大动作，不敢忤逆陈氏的意志，所以即使知道漠北还有残存的巫祭，但是被陈氏严格把守着，他也不敢染指。因为他知道，陈氏既然纵容慕容家族成长，肯定也有制服的手段，而且肯定不只巫毒一种手段。</p><p>但是他，已经等不下去了，多年饱受巫毒蚕食之痛，他知道那种痛是何等的惨烈，何等的刻骨，发作的时候痛得只能瘫倒在地，从胸口，到全身，身上的肉一点一点的溃烂发黑发腐发臭。他绝不允许这种痛苦在他的儿子身上延续，更不能让玲珑日夜担心，为此哪怕倾尽一切，他也在所不惜。</p><p>而且，没有人知道他自己也掌握着多么庞大的力量，虽然这种力量是黑暗的，需要鲜血淋漓地浇灌，尸骨作为肥料，才能开出妖艳的花。</p><p>“呵呵呵呵呵。“少游冷冷地笑着，全身血影萦绕，黑雾弥漫，脸色苍白如纸，鼓起的青筋蔓延全身，嘴角下獠牙渐渐伸长，背后衣服撕裂开来，露出尖锐的两翼。</p><p>是时候进食了，窗户忽地开了，少游消失在了屋里，没有人知道他去哪里？或许只有门外那两位枯瘦的老者知道吧，但他们也无能为力吧，为了拥有更庞大的力量去守护他想要守护的一切，他们的少主竟然去修习那种连魔道中人都不敢修炼的邪功，沦为黑暗中的血食之物。今夜，不知道哪家的小孩子那稚嫩的脖子会被那尖锐的獠牙咬住，吸干全身的精血。</p><p>夜，越发的凄清，风冷冷地吹着，似乎有什么东西在狂笑。</p><p>一个黑袍子的男子，看着天上的明月，怔怔出神，身后，一男一女。</p><h4 id="陆"><a href="#陆" class="headerlink" title="陆"></a>陆</h4><p>“今夜的月还是如十年前那般的明亮。”黑袍男子淡淡地说道。</p><p>“只是明月依旧，你已经不是昨日的你了。”女子感伤道。</p><p>“或许吧。“男子依旧负手而立，淡淡地说道，没有人看见他眼里闪过一丝的疲惫和哀伤。这些年来，他带领着天驱一直在杀戮，但是淋漓的鲜血并不能改变什么，死去的很多人其实都是无辜的，有很多是清政廉洁的官员，有很多有一家老小需要供养，有很多只是安安分分生活的老实人，但是都惨死在了天驱的手里，仅仅因为他们是慕容家的门客，或是晋国人。</p><p>这些年来，他一直在挣扎，挣扎是否该继续杀戮下去，因为他知道杀戮其实并不能消除仇恨，反而会给更多的人带来悲伤还有仇恨。但是每当他闭上双眼，脑海里便会浮现漠北族民那数万双无助苍白的瞳孔，为了让他们能够安息，为了让自己内心可以得到一丝安宁，他只能杀戮下去，即便让鲜血染红帝都的每一寸土地。</p><p>但是，他这些年，他真的得到安宁了吗？</p><p>明月不知道，白虎不知道，或许连他自己都不知道，他只知道，这些年来，他活得很累很累。</p><p>“玄雀密报，明夜，帝都有变，三年了，漠北的族民是时候该瞑目了。“风蓝寒声道。</p><p>身后，白虎摸了摸大大的脑袋，或许想着该回去吃碗热汤面，睡个觉。明月则漠然无语，看着眼前的孤傲的身影怔怔出神。</p><p>旦夜，慕容公子一袭白衣，一把纸扇，信步迈进了森严的宫门，宫门外街巷寂静无声，幽深的巷道内，数百个黑衣人面无表情地注视庞然的皇宫，身后弯刀闪着寒光使得清冷的夜越发的清冷。</p><p>乾坤殿中，金龙椅上，卧着大陈的王，脸色苍白臃肿，显然已被酒色掏空了躯体，这已然腐朽的躯体内，除了酒色之外，还能容下别的吗？此时在他的怀中，一位曼妙的女子俯在他敞开的胸口上，抚摸着他那肥颤颤的胸膛，嘻笑连连。陈王那肥硕的嘴唇也不时拱一拱女子那吹弹可破的娟秀容颜，一脸的淫笑。</p><p>龙椅后面，一个戴着铁面具的高大的身影伫立着，一动不动，眼里没有流露出一点神采。便是传说中的铁侍卫。</p><p>慕容公子显然已经习以为常，静立一旁，面无表情地看着大陈的王。</p><p>过了许久，王仿佛才看到慕容公子那冷峻的脸庞，冷冷道：“听说，你最近跟晋国的二皇子走得很近啊。”</p><p>“微臣不敢，只不过二皇子赏识在下，小居府中几日，昨日已经回晋了。”慕容公子不卑不亢道。</p><p>“哦，竟然都不跟我打声招呼，看来你们俨然不把我这个王放在眼里很久了。”</p><p>“微臣不敢，如今小儿还不到十岁，已有巫毒发作的症状，还请王赏赐解药。慕容家将为王赴汤蹈火，倾尽一切。”慕容公子跪倒在王面前，恭敬地说道。</p><p>“哈哈哈哈，真是可笑，如今你所有的一切都是我的，因为我是大陈的王。”</p><p>“呵呵，你在逼我谋反吗？”慕容公子慢慢地站了起来，脸色突然苍白如纸，一点血色都没有，依稀可以看见里面的血管。</p><p>王漠然地说道：“我陈氏江山已经纵容你们慕容家成长太久了，如果不给你个谋反的罪名，还真是不好对你下手。”</p><p>“如今晋王朝虎视眈眈，随时会兵临城下，没想到你仍对我慕容一族心怀疑心，看来大陈江山真的要葬送在你手中了。”</p><p>“我只知道王权天授，任何有可能动摇王权的人都得死，这么多年了，你们慕容一族还不知收敛，一味扩充自己的势力，你以为我真的那么昏庸吗？今日，在这乾坤殿中，我要剥夺你的一切，你的官职，你的生命。“言罢，王大拇指上的戒指突然一闪，一直没动的铁侍卫动了，眼里流露出森然的冷意，曼妙女子莫名地看着王大拇指上的戒指，眼角闪过一丝颇具深意的笑意，没有人发现。</p><p>只看到铁侍卫的身影突然消失，而后只听见砰的一声，慕容公子后撤一步，顺手而开的纸扇轻易地挡住了铁侍卫硕大的拳头。</p><p>“看来你比我想象还隐藏得更深，但是当年大夏王朝遗留下来的人体傀儡并不只有一具。我也并不只有机关战士这一手段，乾坤殿外布满了弓箭手还有数不尽大内侍卫。今夜，纵然你有滔天本事，也只能埋身于此。”王依旧漠然地说道，在他眼中，慕容公子已然是一个死人，大拇指中的戒指闪出几道靓丽的光芒，传说中的四大侍卫，已经不知何时起，全部出现在了慕容公子面前，冷漠的面具，冷漠的瞳孔，散发着无比恐怖的气息。</p><p>“机关战士吗？哦，我想起来了，大夏王朝浸淫机关术许久，最后一代的王，还将自己改造成机关人，弄得人不人，鬼不鬼，暴虐无道，杀人取乐。最后夏王朝覆灭，机关术也就失传了。怪不得可以存在百年之久，但是这等只会蛮力的家伙，你觉得可以对我构成伤害吗？”慕容公子俊秀的脸庞越发的苍白，嘴角獠牙渐渐伸长，躯体蓦地膨胀起来，血管也跟着暴涨起来，只见他发出一声痛苦的嘶吼，后肩的衣服撕裂开来，尖锐的两翼屈展开来，身上数不清已经溃烂黑色的伤口淌着黑色的脓液混杂着淋漓的鲜血。</p><p>谁也无法想象这个男子这些年来到底受着何等的痛苦，而他自己又是怎样狠心地折磨着自己，这样的躯体还是人的躯体吗？</p><p>一直漠然的王脸色终于变了，还有他怀里那看似柔弱却一直嬉笑的女子，脸色也凝重起来，显然不敢相信眼前的这一幕。</p><p>“想不到，风度翩翩的慕容公子竟然甘愿把一身血肉都献祭给黑暗，只是黑暗的力量并不能长存于人世间，总有一天，你会被黑暗所吞噬，你也不会再拥有人类的情感。真是可悲。“一声淡淡的感叹，一袭黑袍不知何时已经出现在了乾坤殿中，赫然是风蓝，身后两男一女，两个男的一个是五护法中的白虎，另一个是个素净的布衣和尚，脸上满是悲悯之色，便是五护法中的玄武了，而女子则是明月，此时看着慕容公子惨烈的模样，无言，只有两行清泪。</p><p>“你们是谁？竟然敢私闯皇宫！“王勃然大怒，但是很快他就说不出话了，不是震怒得说不出话，而是他的胸前扎着一把锋利的匕首，鲜血溢出来，蔓延开来，盛开出妖艳的玫瑰，一如他眼前这个笑嘻嘻地看着他的曼妙女子。</p><p>”爱……爱……爱妃……你…………“王悲哀地看着眼前的女子，他自认为自己不曾亏欠过这个女子，这一生中，他只对两样东西真心，一是香醇的美酒，二是花一样的女人，因为除了这两样东西，他不知道他还可以对谁真心。</p><p>在他的身边有谁够格做他的朋友吗？没有！</p><p>而亲人呢？不管亲的还是表的，小时候还一起欢快玩耍的兄弟姐妹几乎都被他杀光了吧，至于自己的子女，对于自己可曾有过对父亲的敬爱，有的只是畏惧，只是对皇位的赤裸裸的渴求罢了。</p><p>而爱人呢？后宫妃子三千，所图的还不是他的权势和财富。</p><p>剥夺了王者的光芒，他只不过是一个酒色之徒，有谁会真心爱上这样一个人呢？除了冰冷的皇座，在世上，他一无所有，他感到悲哀，感到孤独，但也无能为力，因为他放不下这冰冷的皇座，所以他只有终日沉溺于酒色之中，聊以度日。</p><p>“嘻嘻，你的嘴巴太臭了，还是闭上吧。”曼妙女子笑嘻嘻地说道，将匕首拔了出来，鲜血迸发出来，王睁着眼睛，痴痴地看着女子，心脏停止了跳动。</p><p>女子将王手中的戒指取了下来，收敛了脸上的笑容，漫步走到风蓝身边，将戒指递给了他，说道：“这金银铜铁四个侍卫应该是受这戒指所控制。”</p><p>“妹妹，这么多年，你受苦了。”风蓝爱怜地摸了摸女子的脑袋，柔声道。</p><p>“为了族人，这是应该的。“女子摇了摇头。</p><p>“呵呵呵呵呵，哈哈哈哈哈，风蓝是吧，天驱是吧，今夜你们都得死！“慕容公子面无表情，冷冷地说道，全身涌出令人战栗的黑暗气息，整座乾坤殿都在颤抖。</p><p>“是吗？慕容公子，你也是时候给当年漠北，我那无辜死去的族民一个交代了。你们先出去，这里交给我。“风蓝平静地看着已陷入疯狂的慕容公子，或许已经不能称之为慕容公子了吧，那个疯狂的家伙将自己献祭给了黑暗，终也被黑暗所埋葬，完全找不出昔日那个风度翩翩的慕容公子一点影子，已经彻底沦为一个可怕恶心的怪物。</p><p>朱雀，白虎，玄武，看着风蓝那孤傲的身影，转身出了乾坤殿。</p><p>明月看了看风蓝，又看了看那已经是怪物模样的少游，也黯然退出了乾坤殿。</p><p>“十年前，那个卑微的少年在我眼里不值一提，十年后，你依然不堪一击。“</p><p>“是吗？“</p><p>没有人知道乾坤殿发生了什么事，只知道传说中的四大护卫被丢了出来，已经是一堆破铜烂铁，再后来只听见砰的一声，偌大的乾坤殿崩塌下来，化为灰烬。</p><p>风尘散去，风蓝半跪在地上，全身已被鲜血染红，左手已经不见了踪影，而在他面前，那个背生双翼的怪物，妖艳的瞳孔越发的妖艳，身体也越发的膨胀，尖锐的獠牙啃食着一截胳膊，鲜血淋漓，两翼展开，将他埋在阴暗中，或许是畏惧天空那明亮的月吧。</p><p>“奶奶的，这是什么怪物，大家一起上，干死它。“白虎大骂道。</p><p>“没用的，这世间，已经没有力量可以阻止他了！他已经彻底沦为了黑暗中的血食之物。“玄武，那个素净的布衣和尚，清亮的双眼闪烁着睿智的光芒，身为巫祭，他看得比别人更透彻，更深远。</p><p>“啊——“怪物对着天空的明月痛苦地嘶吼着，不甘地咆哮着，而后恶狠狠地看着眼前半跪着的满身是血的男子，掠了过去，似乎要把那个男子狠狠地撕碎。</p><p>“少游！“一声尖锐的叫声，明月挡在了半跪男子的面前，那个怪物锋利的爪子嘎然停在了明月的面前，妖艳的瞳孔看着明月脸上那道醒目的伤疤，黯淡了几分，露出茫然的表情。</p><p>“少游。“怪物后方传来了深情的呼唤，不比先前尖锐的叫声，而是饱含深情的呼唤，怪物转过身，看到了那个温婉的女子，身体蓦地颤抖起来，嘴里喃喃道：”玲……玲……玲珑……啊…………“怪物痛苦地嘶吼起来，瘫倒在地，嘴角的獠牙一点一点的变短，肩上的双翼也渐渐地消失了，又恢复了慕容公子的模样，只不过此时的他，全身已经没有一丝血色，苍白透明，生命已经苍白无力，如同赢弱的烛火，随时都有可能幻灭在这天地之间。</p><p>“玲……玲珑，我……我对……对不起你。我……我……不能再照……照顾……你了，还有我……我们的复……复儿……你……你要……好……好好……活…………”少游瘫倒在玲珑的怀里，右手颤抖地抚摸着玲珑的脸庞，虚弱地说道。</p><p>话还没说完，那颤抖的手便垂落下来，那个疯狂的俊秀的阴暗的隐忍的公子，永远地闭上了双眼。</p><p>玲珑痴痴地看着怀里的少游，默默地留下了两行清泪。</p><p>“少主，老奴来迟了。”枯瘦的两位老者跪倒在地，将头重重地撞在地面上，身后百来个黑衣人也齐刷刷跪倒在地。</p><p>风蓝看了看死去的少游，又看了看扶着自己的明月，轻声道：“我们走吧。“</p><p>“嗯。”</p><p>风蓝他们默默地离去了，没有人阻挡。</p><p>而后，天驱消失了。</p><p>而后，玲珑带着复儿坐上一辆马车离开了慕容家，复儿身上的巫毒也已被玄武解开，没有人知道他们去了哪里，只听说赶马的是一个戴着银色面具的男人。</p><p>而后，晋王朝传来消息，二皇子终究按奈不住野心，想要弑父篡位，最后败露，惨遭车裂而死，大皇子继承了皇位。</p><p>而后，晋王朝挥兵南下，衰败的大陈江山已经没有能力抵抗晋王朝的铁骑，归入晋王朝的版图。幸好，晋王朝新任的皇帝仁爱有为，人民安居乐业。</p><p>而后，每年有很多人到漠北去祭祀当年惨死在漠北之难的无辜的人民。漠北也因此得到了发展，逐渐富裕起来，不像以前那般的贫寒清苦。</p><p>而后，南京城一个小巷子中，一个屁股里垫着五块椅子的胖子正在埋头吃着热腾腾的面，面前堆满着老高老高的十几块大碗，旁边小店里一个秀丽的女子正在煮面，充满爱意地看着胖子，笑骂道：“死鬼，就知道吃。快来刷碗啦，今天面才卖出这么一点，等下交不了店租，就让你回到漠北跟我哥学种田。”</p><p>“遵命，老婆大人，等我吃饱才有力气干活吗？还有老婆你说，你哥的娃都会走路了，我们是不是也要抓紧时间赶快生几个啊。“胖子一脸谄媚的笑。”你个死鬼！想什么呢？快吃你的面。“秀丽的女子笑骂道，没有了昔日的粉饰，妖娆，身上满是厨房的油腻，市井的烟火，但是她笑得是那么的快乐，能为自己心爱的男人煮着热腾腾的面，其实也是很温馨很幸福的一件事吧。</p><p>而后，寻常的街道上，不知何时起，默默地行走着一个布衣和尚，他的眼睛空明而又宁静，全身隐隐有一层淡淡的光辉，为世人传授着佛理的哲学，为处于苦难病痛中的人们带去了光明和希望。没有人知道，他走了多远，走了多久，又要走向何处。他只是默默地走着，带着慈悲的微笑。</p><p>而后，漠北的一个小村庄，一个朴素的庭院，一个素净的妇女安静地依偎在一个中年的满是络腮胡子的大叔怀里，脸上隐隐有一道伤疤，只不过已经很淡很淡了，不仔细看看不出来。而中年大叔的左袖空荡荡的，右手亲昵地搂着妇女的肩，眼里满是温馨满足的笑意。</p><p>在他们面前，一个可爱的小女孩还有一个可爱的小男孩正在欢快地玩耍着，嬉笑着，稚嫩清澈的笑声，像铃声一般，荡漾在漠北的天空。</p><p>而后，明月没有了泪水，洋溢着喜悦的笑容，明亮的月光普照大地，驱散人世间的悲伤和黑暗，这块大地上的你，我，他都可以温暖欢快地活着，都可以温暖欢快地玩耍。</p><p>故事终。</p><p>好了，明月泪这个故事到这里便结束了，结局还算美好吧，也希望每个人都跟故事的结局一样，没有仇恨，没有悲伤，温暖，美丽，欢快地活着。</p>]]></content>
      
      
      <categories>
          
          <category> store </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武侠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温柔刀</title>
      <link href="2020/10/27/store/%E6%B8%A9%E6%9F%94%E5%88%80/"/>
      <url>2020/10/27/store/%E6%B8%A9%E6%9F%94%E5%88%80/</url>
      
        <content type="html"><![CDATA[<p>夜，无风的夜，找不到一点星光，街上空荡荡的，或许正如很多男人的内心吧。寂寞的黑夜，唯有女人那柔软温暖的身体才能慰藉一下心灵的空虚。所以，此刻，整座扬州城也只剩下醉春楼还亮着灯火。</p><p>楼内那些富豪官员一掷千金，佳人一笑，莺歌燕舞，春意融融；而楼外，衣衫褴褛的乞丐，亦或是无家可归的人却只能蜷缩在路边，瑟瑟发抖。</p><a id="more"></a><h4 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h4><p>夜，无风的夜，找不到一点星光，街上空荡荡的，或许正如很多男人的内心吧。寂寞的黑夜，唯有女人那柔软温暖的身体才能慰藉一下心灵的空虚。所以，此刻，整座扬州城也只剩下醉春楼还亮着灯火。</p><p>楼内那些富豪官员一掷千金，佳人一笑，莺歌燕舞，春意融融；而楼外，衣衫褴褛的乞丐，亦或是无家可归的人却只能蜷缩在路边，瑟瑟发抖。</p><p>甚至有一些生命就那样地流失在这静悄悄的，没有人在意的夜里。直到尸体慢慢腐烂发臭，才会招来一些饿着肚子的狗啃食。亦或是被人发现，直接拖到乱坟岗草草埋了，乱坟岗上活人没有，倒是狼很多，所以尸体最后也会被狼挖出来，然后进了狼的肚子。</p><p>但是不管是进了狗的肚子就是进了狼的肚子，总比进了人的肚子好啊，因为狼和狗吃人还吐骨头，而有的人却连骨头都不吐。</p><p>金大老爷无疑就是这样吃人不吐骨头的人，所以他才能成为扬州首富。</p><p>金大老爷，有一个很大很圆的脑袋，也有一个很大很圆的的肚子，但是他的眼睛却小得可怜，如果说他的脸是块大饼，那么他那两个小眼睛连绿豆都不算，充其量也不过是两粒芝麻罢了。眼睛是不会说谎的，所以一般聪明的人跟别人打交道总会看着对方的眼睛，然而再聪明的人对金大老爷也只能无计可施，所以也没人知道金大老爷说得话哪句是真的哪句是假的。</p><p>虽然眼睛很小，但脸那么大的地总不能空着啊，所以金大老爷还有一个很大的鼻子，还有一张足可以塞进一个大人脑袋的大嘴巴。</p><p>一般嘴巴大的人都很爱笑，金大老爷也不例外，而且笑得很有喜感，眯着眼睛，嘴角一咧。一般傻子都是那么笑的，但是如果你把金大老爷当成傻子的话，那么估计你连骨头都不会留在这世上了。</p><p>金大老爷，还有一个嗜好——女人。对于一个有钱的男人来说，钱不是花在赌钱上就是花在女人身上。而金大老爷是个谨慎的人，他从不会用钱来赌，因为他只相信自己，而不相信所谓的运气，所以他的钱基本花在女人身上。</p><p>但是女人并不是那么容易喂饱的，有时候女人的胃口往往比男人还大得多。所以聪明的金大老爷就自己建了一个青楼，用别人的钱来喂饱自己的女人，有很多时候还能喂饱自己。</p><p>此时，已过午夜，醉春楼顶楼，最好的雅间里，除了金大老爷外，还有四个人。</p><p>两个坐着，两个站着。</p><p>站着的一个是女的，长得倒有几分韵味，裹着一件绿色的裙子，凹凸有致，瓷器般光滑紧致的肌肤在摇曳的烛光下闪烁着撩人的光芒。这无疑是个很诱人的女人，但是没有人会把眼光在那个女人身上逗留太久，因为她是金大老爷的女人，春娘。</p><p>一个人老了，往往不会在很多女人上花费太多时间，就会找一个真正贴心的女人，而对于已经五十多岁的金大老爷来说，春娘就是那个贴心的女人。此刻，春娘就站在金大老爷身边，给他斟酒。</p><p>另一个站着的，是站在金大老爷身后的那一道屏风里面，只能看到一个身影。他，没有名字，只知道金大老爷管他叫刀奴。</p><p>刀奴，有一把刀，一把很薄很薄的刀，没有人看过他的刀，因为看过他刀的人都死了。除了金大老爷，没有人见过他的真面目，因为他都是带着个白玉面具，只站在阴暗处。这无疑是个很可怕的人。</p><p>而，金大老爷最信任的人就是他，据说金大老爷跟女人一起睡觉时，刀奴也寸步不离地候着。而金大老爷信任的人一般也不会让他失望，所以至今想刺杀金大老爷的人，少说也有数十人吧，都死了，都死在一把刀下，温柔一刀，一刀毙命。</p><p>而一般来说，有资格坐着的人一般也比站着的人有地位。有地位的人一般不是大富便是大官，或是道上混的大佬，都是些有钱有势有权的主儿。</p><p>而扬州知府，无疑是这号人物，扬州知府官位四品，在这个年头，官高一品压死人并不少见。哪一个当官的人一开始不是科甲及第，谁不是怀揣着读书人崇高的理想赴任的？现任的扬州知府，杨怀仁无疑也是如此。</p><p>但是，在扬州这样富得流油的地方，有些饭不是好吃的，有些人不是好交的，有些甜头不是好尝的。当你发现，自己寒窗苦读十数年换来的一个官位一年的奉养还赶不上富人一桌的酒席时，当理想就这样被现实狠狠地抽了几巴掌时，很多当官得便想着用权利来换取金钱，而那些商人，尤其是金大老爷也很乐意用金钱来勾结权利。</p><p>所以，今日，杨怀仁可以跟金大老爷坐在一张桌子上，不然估计现在杨怀仁已经不知是进了狗的肚子还是狼的肚子里了。但是杨怀仁已经不再怀仁，而是成了坏人了，这或许就是残酷的现实给美好的理想开的一个最大的笑话吧。</p><p>对于金大老爷来说，扬州知府已经是一只狗了。而坐在金大老爷对面的无疑是一头狼，但是无论再凶狠的狼在金大老爷眼里，也不过是一只叫得比较大声的狗罢了。</p><p>但是，除了金大老爷外，如果还有人把青狼帮老大老狼当做狗，那无疑是很愚蠢的，虽然狼有时候时候会扮成狗，但是扮成狗的狼往往比那些龇牙咧嘴，一脸凶相的狼更可怕。</p><p>老狼长得很矮很挫，矮的基本上站着都没有桌子高，挫得只有半边脸，左边的脸听说是被人一刀给剥了，剥得干净彻底，连眼珠子，耳朵，甚至半个鼻子，半个嘴巴都剥了，头皮也剥去了一半。</p><p>一般来说，没有女人会爱上一个上了年纪，只有半边脸的侏儒，但是恰恰相反，老狼有很多女人，很多年轻漂亮的女人，多得你一双手是数不出来的，还要再加上两只脚才能数得出来。世界上很多荒诞可笑的事情就那么存在着，其实也是有存在的意义的，一个男人，至少要某一方面比别人强，那么才会有女人会爱上他。</p><p>这里的三个人，一个是扬州最有钱的人，一个是扬州最有权的人，一个是扬州最有势的人，这样的三个人如果联手对付一个人，那么那个人应该下半身进了坟墓了吧。</p><p>但是恰恰相反，这个人还活得活蹦乱跳，这个人就是杨一刀。</p><p>杨一刀，有一把刀，也很少人见过他的刀，因为他出刀很快，通常你只要眨下眼睛，你身上就少了样东西。</p><p>而老狼就这样少了半张脸皮。</p><p>而这已经算运气好的了，很多运气不好的少了的是脑袋，而不是脸皮。人没有脸皮还可以活，甚至还可能活得很好，但是少了脑袋就活不了了。</p><p>话说这个杨一刀是长了三个脑袋还是七只手呢？竟敢在老狼脸上动刀子，而且还劫了金大老爷女人的棺材。</p><p>虽说金大老爷女人很多，不在乎多死那么一两个，但是死得这一个可不是一般的女人。这个女人叫赵双双，她的哥哥赵老大可不是条好狗，也是个吃人也是不吐骨头的主。</p><p>因为盐帮在扬州内分舵的舵主就是赵大钩。</p><p>自从有了盐税，江湖上便有了盐帮，少说也得有一二百年的历史了。</p><p>盐帮虽然不敢说是江湖上最大的帮派，但绝对算得上是一个非常有钱的帮派。</p><p>而赵老大虽然在扬州势力比青狼帮还稍微有些不足，但是在财力方面却是有过之而无不足。更何况背后还有盐帮撑着，所以金大老爷一般不会去得罪赵大构的。</p><p>而这下可好，赵无双死了，连棺材都给劫了。</p><p>赵老大要疯了，他只有一个妹妹，这些年既当哥又当爹的，着实不容易。</p><p>听闻自己妹妹不明不白死了，他就立马放下手下的差事，火急火燎地从京城赶到了扬州城。谁知竟连妹妹最后一面都没有见着。</p><p>狗并不可怕，但是一只疯狗就很可怕了，因为疯狗是不会看人的，见人就咬。</p><p>现在赵老大就站在醉春楼外，身后只有四个老者，一个只有一只眼睛，一个只有一只耳朵，一个只有一只手，还有一个只有一只脚。</p><p>就是四个残疾的老骨头，但是这骨头虽然老，但是很硬，估计没有几人咬得动，能咬得动的最后先断了的很可能是自己的牙齿。</p><p>商山四缺在江湖上也算是资格很老得人物了，据说是盐帮的四大长老，也不曾想今天会跟在赵老大后面，或许纯粹是为了看热闹吧，年纪大了的人总是喜欢看热闹。</p><p>五个人大摇大摆，走进了醉春楼，没有人阻扰。</p><p>因为他们就是金大老爷恭候多时的人。</p><p>看着赵老大进了雅间，金大老爷立马起身，过去给赵老大拉开座椅，老实得跟个跟班似的，嘴里亲切地叫着：“赵大哥。“，一脸谄媚。</p><p>但是显然赵老大不吃这套，跟只恶狗似的恶狠狠盯着金大老爷，咬牙切齿道：“我妹妹是怎么死的？现在在哪里？“</p><p>“双双身体羸弱，这次偶感风寒，竟害了肺病，我遍寻扬州名医却也回天乏术。还望赵大哥节哀。”</p><p>言罢，金大老爷竟然硬是挤了几滴眼泪，一脸忧伤，好像恨不得害肺病死得不是他老婆，而是他自己。抹了抹眼泪，金大老爷接着说道：“我花重金要将双双厚葬，但是，哎！“言罢，金大老爷瞥了老狼一眼。</p><p>老狼深深看了金大老爷一眼，抬头对上赵老大那生吞活剥的眼神，接下话头：“金老爷对双双姑娘感情深厚，付重金让老夫亲自护送双双姑娘的尸身厚葬。说来惭愧，半路跳出一个杨一刀，一刀剥掉了了老夫半边脸，劫走了双双姑娘的尸身，差点连老夫这老命也命丧他手。“</p><p>“放你妈的狗屁！赵某在扬州也混得有些年头，怎么都没有听过杨一刀的名头。是不是你们耍的花样。金老狗，今天如果不能给我一个交代，我就砸烂你这醉春楼！”赵老大猛地拍案而起，冷言如铁。</p><p>酒桌上的酒杯被震翻了了，酒溅了金大老爷一脸。金大老爷笑脸终于收敛了，两粒芝麻的小眼睛寒光一闪，露出了森冷的笑容。</p><p>旁边的春娘轻轻地为他擦拭着脸上的酒渍。</p><p>而，赵老大的肩膀突然被人一按，被死死地钉在了椅子上，而按他的人赫然是商山四缺中的缺眼长老。</p><p>一股冷意在雅间内蔓延，森寒的冷意。</p><h4 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h4><p>缺眼长老，你这是做啥？“赵老大惊愕道。</p><p>“没什么？金老爷花费千金，不给个面子怎么行呢？“缺眼淡淡说道。</p><p>“怎么，你想背叛盐帮！”</p><p>“呵呵，这些年你的势力越做越大，更是越发的狂妄自大，再让你这样下去，迟早一天还不骑到我们的头上。扬州舵主给你做还不如给金老爷做。”缺眼长老懒得再看赵老大一眼，冷笑道。</p><p>“那是长老看得起金某，金某一定不辜负长老们的厚望。“金大老爷轻蔑地瞥了赵大构一眼，跟看一只苟延残喘的流浪狗没两样。</p><p>“我妹妹是不是你杀的？你这条老狗！”赵老大挣扎着，嘶喊着，但是仍被缺眼牢牢按在桌面上，动弹不得。</p><p>“不错，一个女人如果仗着自己的哥哥有个几斤几两，就爬到她男人头上指手画脚，这样的女人，杀了又有何可惜可言呢？你说是吧，春娘。”金大老爷右手轻轻拂过春娘的发髻，温柔地说道。</p><p>“是的，老爷，女人就应该懂得如何去愉悦自己的男人。”春娘轻轻给金大老爷斟上一杯酒，柔声道。</p><p>“你个王八蛋！”赵老大猛地挣脱缺眼，恶狠狠地朝金大老爷扑去，像一只疯狗一般，义无反顾。</p><p>但是，金大老爷却还是端着酒杯浅浅地抿了一口。</p><p>因为他知道有个人一定会出手。</p><p>果不其然，只见刀光一闪，赵老大的头颅便跟他的躯体分离了。</p><p>而屏风后，那一个身影还是漠然地站着，一动不动，犹如一尊雕像，似乎都不曾动过。</p><p>商山四缺目光如炬，死死地盯着屏风里的那个身影，因为他们知道，刚才出手，一刀毙了赵老大的就是那个漠然的身影，更令他们不可思议的是，连他们都看不清那个漠然的身影时如何出手的，甚至连那把刀都没有看清。</p><p>死死盯着屏风后面那个漠然的身影的还有一个人，老狼，只见他脸色变了几变，而后深深看了金大老爷一眼，便低头端视酒杯中自己的半张脸，默然无语。</p><p>此时，除了金大老爷，还有一个人也是平静地喝着酒，那便是杨怀仁了，他，好像都在独自地喝着小酒，对身边发生的事毫不关心。</p><p>金大老爷淡淡地看了杨怀仁一眼，不知在想些什么。</p><p>“想不到金老爷身边还有此等高手，不知可否引见呢？”缺眼仅剩的一只眼睛精光一闪，拱手问道，显然对屏风后那个身影兴趣极大。</p><p>“他不想见人，我也不能强人所难。”金大老爷无奈道。</p><p>“既然这样，我们也不强人所难了，在此恭贺金老爷成为扬州的舵主，也还望金老爷允诺我们的事可以做到。如果没有别的事，我们便先走一步了。“缺耳长老轻轻拍了拍缺眼的肩膀，显然不想因为过分追究那人身份跟金大老爷闹不愉快。</p><p>“那是当然，长老们慢走。金某答应各位长老的事一定会如期办妥。”金大老爷摆手送道。</p><p>商山四缺走后，宴会也就散了，赵老大的尸体也被人抬出去丢了，根本就没有人会在意吧，也许不久后便会进了狼的肚子。</p><p>而春娘则跟金大老爷回到金府，好好尽一个女人应有的本分。</p><p>月光如水，佳人浅卧，安详地睡着，就像一个婴儿一般静静地伏在金老爷的宽阔的胸膛。或许对一个女人来说，尤其是一个风尘女子，此生能找到一个可以呵护自己的男人便已是最大的满足了吧，哪怕那个男人曾经或者现在做过很多坏事事，但是只要他爱自己，那又如何呢？</p><p>这世间的是与非，对与错，又有人能分得清呢？更何况是一个手无缚鸡之力的柔弱女子呢?</p><p>三更天，月昏星稀，金大老爷便醒了，只见他轻轻地站了起来，轻轻地捋了捋一下春娘略微乱的发髻，又轻轻地为她盖上被子，眼神充满了爱意，就像一个体贴的丈夫。</p><p>但是当他转身披上衣服走出房门时，眼神又立刻恢复了阴冷与无情，门内门外，判若两人。</p><p>而此时门外已经站着一个人。</p><p>刀奴冷冷地站在夜色中，月光如铁，映着刀奴白玉的面具，越发的清冷。</p><p>“盐帮老大真的突发恶疾而亡吗？”金大老爷看着昏暗的月色，背对刀奴问道。</p><p>“根据我们的人从盐帮内部传出的消息确实如此。”</p><p>“那盐帮的幕后老大查到是谁了吗？”</p><p>“还没有，盐帮老大向来神秘谨慎，因为无论还是朝野还是江湖，不少人对盐帮虎视眈眈，毕竟其中走私盐包含的金钱效益是巨大的。如今盐帮的势头俨然都赶上了当年上官虹的金钱帮了。但是如今现在盐帮各大舵主已经坐不住了，连商山四缺四个老家伙都出来了，拉拢咱们无非是为了瓦解赵老大在扬州的势力。不大可能是个假消息。”</p><p>“说得不错，如今各方势力都按捺不住，正是我们趁乱取势的好时机，哈哈哈哈。”金大老爷赞赏地看着刀奴，豪情万丈地笑了起来。</p><p>刀奴戴着白玉面具，看不出有什么表情。或许没有表情就是他的表情吧。</p><p>而金大老爷似乎对他的漠然早已习以为常，并没有过多言语。因为倘若没有那个女人，他们两个人原本是站在对立的两端。而那个女人，却令那个人甘愿成为他身后默默守护的的影子，或许只是为了一个承若，一份愧疚,一种执着吧。而自己对他更多的或许是恨吧。</p><p>金大老爷凝望着月色下刀奴萧寂的影子，收敛了笑容，沉默不语，陷入了往事的追忆。</p><p>金大老爷出身是很低贱的，因为他是一个妓女的孩子，或许是某个酒鬼或者某个土匪或者某个小市民一夜风流的产物，而这一夜风流却铸就了他母亲一生的悲剧。一个没有多少姿色且还怀着胎的女人就这样被踢出了妓院。</p><p>但是，有时候妓女虽然是低贱的，但是母亲却是伟大的，金大老爷的母亲并没有寻死觅活，而是以顽强的毅力苟活在市井的最底层，用躯体迎奉着那些猪狗一般肮脏的粗俗的男人，才把金大老爷生了下来并抚养到了五岁，然后便因为长期积劳成疾离开了人世。</p><p>所以，金大老爷五岁的时候便开始流浪街头，从野狗嘴里抢食物，在别人的脚底下苟活着，根本没有人会去怜悯，也没有人会去在意，但是很多人却依然活着好好的。金大老爷无疑也是如此，从乞丐到小偷到土匪慢慢到如今的扬州首富，骗过人，害过人，杀过人，用的也都是一些卑劣不堪的手段，但是他没有选择。为了活下去只能这么做！</p><p>其实每一个人都有存在的理由，都有难以回首的过往。</p><p>所以，金大老爷在意的人也就是那么寥寥几人，其他人对他来说并不比一只狗强上多少。而这寥寥几人更确切地说只有三个人吧。</p><p>一个是他生命中第一个女人，一个老土匪的女儿，马小玉，那一双大大的会说话的大眼睛至今还闪烁在他的梦中。当他还是一个默默无名的小土匪时，那个女人便把少女最纯情的一切都给了他。但是金大老爷却没能给她一个多彩的梦，而是担惊受怕，颠沛流离的逃亡生活，最后在被仇家追杀逃亡的颠簸的马车上难产而死了。</p><p>唯一值得庆幸的是诞下的那个婴孩并没有随着她母亲的脚步，而是奇迹般的活了下来，但是身子骨羸弱。但是活着就好啊，金大老爷很溺爱这个女儿，把对妻子的亏欠都渴求在女儿身上弥补。所以，他的女儿也是他生命中在意的第二个人，但是，没有但是了，他的女儿已经离开了人世，也像她母亲一样在绽放在最美好的年华也在最美好的年华枯萎，只因为都遇上了不该遇到的人，爱上了不该爱的人。</p><p>而现在，他所在意的人只剩下春娘了吧。至于他那可怜的母亲，或许他已经没有记忆了吧。毕竟太久远了，那时他也才只有五岁啊，然后为了生存而在俗世浮尘的夹缝中苟活，过去的记忆或多或少地已经没多少印象了吧，除了恨意和不甘像毒药一般附着在人的骨子里。</p><p>而会喜欢上春娘或许是人老的，真的希望有一个女人陪伴吧，亦或是那个女人身上有马小玉的影子吧，虽然二者的性格差距是那么的大。一个天真无邪，大大咧咧；一个娴静淡雅，温柔体贴。但是金大老爷就是那么迷恋春娘，那个已经过了女人最美好的年华的女人，而且还是个青楼歌妓，他是那么的相信她，相信她只是漂泊于浮尘俗世的一个可怜的女人，而没有去调查一下她的身世。</p><p>交代了些许事后，金大老爷又回到了屋子里，春娘还是睡得那么的安详，金大老爷把头埋进春娘柔软温暖的胸部，也沉沉地睡了。</p><p>月，依旧那么的清冷，轻抚你白玉的面具，白衣飘飘，仿佛飞鸟一般，掠过屋顶，闪过街道，在黑夜中尽情的奔跑。刀奴，你为何还不睡，是黑夜才能释放你心中炙热的情感还是那一把温柔的刀正渴望着鲜血的滋润呢？</p><p>后山，是狼的世界，孤傲的狼，站在山巅之上，对月而嗷，无数狼三五成群出来找寻食物，很少人有敢到后山来，更别说是深夜了。但是刀奴来了，慢慢地踱着步，四周闪烁着阴深深的灯笼，那都是一些饿着肚子的狼，但是最后那些阴深深的灯笼又悄悄地消失了，是这个人身上有狼的秉性还是那些狼知道这个家伙不好惹呢？没有人知道，只知道这一身白衣，这白玉面具，在清冽的月光下，竟是那么的清冷孤傲，透着寒意，而他的身前是一座小小的坟墓，是用最好的阴沉木当棺材，表面上铺着坚硬的花岗石，大理石的墓碑上镌刻着“爱女金蓉蓉之墓”。</p><p>“蓉蓉。”刀奴喃喃自语，轻抚着石碑，一行清泪从白玉面具滑落而下。</p><p>“呵呵，想不到你还是。。会。。流泪。。的。”</p><p>话还没说完，那柔软的欣长的脖子便被一只苍白的手紧紧捏住，不能透出一点气，但是那个女人面对刀奴那迎面而来利剑一般锋利的眼神却毫不退让，眼神带着讥笑更多的是不甘。</p><p>“别逼我杀你！”刀奴松开了右手，淡淡地说道。</p><p>那个女人倒地撑着冰冷的花岗石地面，久久咳嗽，才缓缓喘过气来，怒视着那个清冷的背影，那个魂牵梦绕的背影。</p><p>“如玉，你不该来的！”刀奴叹息道。</p><p>“哈哈哈哈，不来怎么知道昔日京城名捕竟然会成为奸商的侩子手！杨青，你太不应该了，为了一个女人！实在太可笑了！”</p><p>凄然的笑声，冰冷的月，那袭白衣漠然不语。</p><p>遥记得三年前，那个天真无邪，跟花似得少女挡下了那温柔一刀，鲜血流淌着，从少女的胸部绽放出了世间最美丽的花朵，看着那滑落的身影，那一刻，他，痴了。</p><p>从那以后，杨青从江湖上消失了。</p><h4 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h4><p>三年前，杨青刚出道，还是一个很腼腆的少年，看见漂亮的女人会害羞，会脸红，还会忍不住地笑，更好玩的事笑起来还带有两个小酒窝。那时的他，看起来有点呆，有点傻，有点天真。</p><p>但是杨青的成名也是在三年之前，仿佛一道耀眼的流星划过了江湖的天空，一袭白衣，一把袖中刀，一日之间荡平了连云山七十二寨，成为了江湖上人津乐道的传奇。</p><p>连云山七十二寨是个土匪窝，都是些穷凶极恶，六亲不认的主儿，烧山掠抢，奸淫妇女的事情都没少做，成为了当时武林一大祸害。但是因为地势险要，寨寨相扣，山山相环，官兵们一次次的剿匪都草草收场。</p><p>而最后，却发生了戏剧性的一幕，偌大的一个土匪寨却只败在了那一把刀下，温柔一刀，一刀毙命，血漫连云，一袭白衣匆匆而过，只留下一个飘逸的身影。</p><p>那年，他只有二十年华，花一样的年纪，妖艳地绽放在鲜血淋漓之下，袖中刀饮过了多少人的鲜血呢？没有人知道，也没有人知道为什么他杀人可以那么飘逸，亦或是那么的残忍吧。</p><p>但是，对他来说，杀人或许只是一种艺术吧。</p><p>因为，他来自六扇门。</p><p>六扇门据说是明朝万历年间，朝廷为了处理有关国家大事的案件，专门成立了一个集武林高手、密探、捕快和杀手于一体的秘密组织。这个组织行动诡异、手段凶狠、专办大案，民间广为传诵，时间久了，六扇门在江湖上也就无人不知、无人不晓了。</p><p>可以说，江湖上没有六扇门办不了的案，也没有可以抗衡六扇门的势力。因为，六扇门的背后是朝廷。</p><p>常言道，普天之下，莫非王土；率土之滨，莫非王臣。君王手中掌握的权力无疑是庞大的，但是这权力却像妖娆的罂粟，致命而又让人沉迷其中无法自拔。</p><p>但是六扇门有今日这般势头，除了背后有朝廷撑腰之外，更主要是因为一个人，昔日江湖的第一名捕，如今六扇门的总管胡利。无论再狡猾的狐狸都逃不过胡利的手心，即使是昔日江湖第一大盗田光光，亦或是昔日江湖第一杀手姬无命，都死在了胡利手里。但是胡利的生活却异常简朴，如今老了，头发也花白了，但是却谢绝了朝廷的俸禄，如今供他屈身的只有一间小小的茅草屋罢了。</p><p>可以说，胡利把一生都奉献给了朝廷，像一只忠厚的老牛勤勤恳恳地劳作着。吃的是草，挤出的是奶。所以无论在江湖还是朝廷，胡利都有很大的威望，受人仰慕。</p><p>如果说此生，胡利还有遗憾事的话就是没能查出盐帮老大是谁，铲除盐帮在江湖的势力。</p><p>而，杨青是个孤儿，是胡利一手带大的，这个腼腆的男孩不但继承了胡利的武功，更继承了胡利嫉恶如仇的秉性，对待坏人没有丝毫怜悯之心，手起刀落，一刀毙命，漠然地注视着漫天飘洒的血液，有的也只是淡淡的厌恶吧。</p><p>如果没有遇到那个女孩，或许杨青会像胡利一样，成为江湖第一名捕，再现胡利当年的辉煌吧。但是有的时候，一个女孩的出现，便彻底改变了一个男孩的命运。</p><p>那个女孩叫金蓉蓉，那一年也才十八岁，在最美丽的年华，两颗悸动的心就这样碰撞产生了爱。爱或许是天神赐予尘世俗人最美好的礼物吧，甜蜜温馨而又带点羞涩。</p><p>蓉蓉是一个很好的姑娘，虽然长得并不是那么的出尘，而且身子骨羸弱，但是骨子里却有一股气质，娴静淡雅，犹如百合花一般默默地绽放在这俗世之中。</p><p>最主要的是她有一颗很美丽的心灵，虽然是扬州首富的女儿，但是却一点都没有继承金大老爷了吝啬的秉性，相反还偷偷地拿家里的粮食还有钱财资助那些穷苦的人民，而金大老爷似乎对这个女儿着实溺爱，也没有去制止她。</p><p>也为此，扬州那些市井底层的人才可以苟活于世。</p><p>所以私底下，扬州人民都管蓉蓉叫做女菩萨。</p><p>这样的女孩，用不着多漂亮，但是已足以让很多男人着迷。</p><p>但是往往很多男人着迷的是她的父亲金大老爷的钱财，而并不是她的为人。</p><p>这已经不止一次让蓉蓉伤透了心，而那些让蓉蓉伤心的男人在这个世上也找不到了。</p><p>因为金大老爷只有一个女儿，他很爱这个女儿。</p><p>而杨青爱上蓉蓉当然并不是因为金大老爷的钱财了，世界上还有什么钱财能比一个男人心中的第一次悸动还可贵的呢？</p><p>但是往往命运总喜欢跟可怜的人开玩笑。</p><p>当杨青意气风发地扫荡了连云山七十二寨,才发现原来连云山七十二寨的幕后寨主赫然是蓉蓉的父亲。</p><p>连云山七十二寨犯下许多大案，甚至胆大妄为劫走皇杠，杀死了不少官员。天子龙颜大怒，这才派六扇门处理此案。杨青刚出道正好借此成名。</p><p>不过令杨青吃惊的是，连云山七十二寨的实力远没有他想到的那么强大，都是一帮乌合之众，更是连可以跟他抗衡的对手都没有，基本上手起刀落，一个人头。杨青年少轻狂，趁胜追击，一举端了连云山七十二寨的势力，名扬江湖。</p><p>而根据在连云山查获的证据发现连云山七十二寨实际上只是金大老爷的一个小势力。背负着六扇门的重任，也为了更好的证明自己，杨青决定夜闯金府，拿下金大老爷，押回六扇门交案。</p><p>金府的戒备着实像想象中那么的森严，甚至还有几个身手姑且可以入杨青法眼的护卫，但是这并阻止不了杨青的脚步。杨青深得胡利的真传，一身修为早已登堂入室，虽然年纪轻轻，二十出头，但是江湖上也少有人可以与之抗衡了。</p><p>如果没有蓉蓉的出现，金大老爷毫无疑问已经死在了杨青的刀下。杨青万万没想到，蓉蓉竟然是金大老爷的女儿，也没想到蓉蓉会替金大老爷挡下了那致命的一刀，锋利的刀锋划开了那温软的胸口，鲜红的血液模糊了杨青的视野。</p><p>那一刻，杨青的胸口痛得都无法呼吸了，心痛有时往往比肉体的伤更折磨人。杨青痛得昏了过去。</p><p>无眠的夜，漫天飘零的小雨，淅淅沥沥，淹没了杨青的过去。</p><p>带着巨大的愧疚与自责，清醒后的杨青抛弃了过去，忘记了六扇门，默默地成了金大老爷身边的寸步不离的护卫。这原本应该生死相向的两个男人就那么复杂地交集到了一起，命运有时总是那么的不可思议。</p><p>而之后，杨青才发现，其实那一次的皇杠并不是连云山七十二寨劫的，那些官员也不是连云山七十二寨杀的，还有好几次大案，都与之毫无关系，但是都栽赃到了连云山七十二寨上。</p><p>到底是谁干的呢？没有人知道，金大老爷也没能查出来。栽赃得如此漂亮又从容地全身而退，不留一点痕迹，这无疑是一个很可怕的人。而且这个人还是躲在阴暗处，没有人知道他是谁，就如同江湖上传说的盐帮老大一样，只闻其名，不见真身。</p><p>甚至杨青都认为六扇门中有那个人的势力。</p><p>但是这又有和自己有什么关系呢？</p><p>如今自己还有什么脸面见师父呢？</p><p>杨青叹了口气，停止了遐想，转头看了看背后那个俊俏的丫头。</p><p>此时这一脸气愤地看着自己，眼里还带着些许泪花。</p><p>“杨青哥，我爹说了，只要你回去，他还当你是他的好徒弟，你还是昔日京城的名捕。”花如玉执拗地看着杨青道。</p><p>“不必了，这条路我竟然已经走了，就没有回头的念头了。”杨青漠然道。</p><p>“你知道那个奸商勾结官府，鱼肉百姓，干了多少坏事吗？”如玉愤然道。</p><p>“那又如何，难道六扇门也会追究这种小事？”</p><p>“没错，如今传出盐帮老大暴毙的消息，更大势力都蠢蠢欲动，那个奸商勾结商山四缺，肯定有所图谋。六扇门有义务维持江湖的平衡。倘若没出来调查，我竟然没想到失踪三年的你竟然会助纣为虐。杨青，你真的太让我失望了！太让我爹失望了！”</p><p>“师父还好吗？“杨青对胡利还是心存愧疚的，毕竟如果没有胡利，他只是个没人要的孤儿，或许已经冻死或者饿死在了街道上，无人过问，没人在意。</p><p>“我爹年纪大了，近来老咳嗽。当初你突然失踪，你知道我爹有多伤心吗？一下子好像老了好多岁。”如玉泣声道。</p><p>“是我愧对恩师，如玉，帮我好好照顾师父。但是，这条路我还是会走下去的，这是我唯一活下去的理由。”说完，那个白色的身影便消失在了夜幕之下。</p><p>留下一个萧索美丽的身影，两行伤心泪。</p><p>无眠的夜，月亮很大很圆，安详地注视着这个世界。</p><p>此时，还有一个人没有睡着，老狼。因为，今天他知道，他脸上的皮是被谁剥的了，竟然是躲在金大老爷背后的那个刀奴。</p><p>看来，金大老爷是想扳倒青狼帮在扬州的势力了，当初如果自己不是躲得快，而且自己苦修数十载的功夫底子过硬，早就死在了那一刀下了。</p><p>老狼仅剩的一只眼睛闪烁着冷光，看来自己得先下手为强了。金大老爷的野心越来越大了，如今跟盐帮四大长老联手，更是不会顾忌我的势力了，迟早会吞掉我的。</p><p>突然，只见一道白光一闪，窗户被切成了两半，一个漠然的身影出现在了月色之下，袖中刀在月光下闪烁着凄冷的光芒。</p><p>“是你！”老狼猛地感到一股森冷的寒意。</p><p>那个漠然的身影没有过多的言语，寒光一闪，老狼抓起身边熟睡的女人挡住了这一刀，随即掠出窗去。那个可怜的女人被切成了两半，鲜红的血液染红了杨青的视野，杨青呆了一下，随后便恢复了漠然，追了出去。</p><h4 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h4><p>老狼几十年的功夫底子还是有的，但是现在他已经不能动了，一只苍劲有力的手卡住了他的喉咙，然后老狼像一只蚂蚁一样被捏死了，丢到了一旁，没有一点反抗能力。</p><p>杨青冷漠地盯着前方那一个裹着黑袍子的背影，握紧了袖中刀。</p><p>“呵呵，我不是你的敌人。“黑衣人转过身来，仅剩的一只眼睛闪着精光，阴冷地笑着。</p><p>“缺眼长老，你来所谓何事？”</p><p>“金老爷为了安全起见，让我来帮你解决掉青狼帮。一个不留！”</p><p>“一个不留？”</p><p>“一个不留！”，缺眼长老冷笑道：“如果杨公子怕脏了自己的手，老朽可以代劳。”</p><p>“你知道我？”杨青淡淡道，一股冷意蔓延开来，夜更加的清冷。</p><p>“合作讲究的是互相信任，能得到金老爷的信任是我的荣幸。”缺眼长老不由得退后一步，谨慎地看着杨青，因为他自认为躲不过杨青那致命一刀。</p><p>“既然如此，这里就由你来做主。”杨青耸耸肩，正欲举步离去。</p><p>“且慢。青狼帮势力庞大，老朽恐怕不能胜任，还望杨公子搭把手。“缺眼长老谄媚道。</p><p>“长老谦虚了，既然如此，在下恭敬不如从命。“杨青淡淡地看了缺眼长老，不知他心里打什么算盘。</p><p>两个人信步走向老狼府邸，身后老狼的尸体一动不动趴在街道上，一双眼睛还不甘心闭上，木然地看着天上那凄冷的月。</p><p>而此时，老狼府邸已经被控制住了，地上跪着老狼的十几个老婆，还有十几个孩子，有的还只是婴孩，安静地躺在母亲的怀里，咬着奶头，熟睡着。</p><p>四处是哭喊声，还有哀求声。</p><p>紧跟着，老狼的尸体被扔进了院子里。</p><p>“夫君啊！”</p><p>“啊爹啊！”</p><p>只见老狼的妻女儿子扑倒在老狼的尸体上，哭得死去活来。</p><p>杨青不由得一阵反感，压抑的气氛好像藤蔓一般紧紧缠绕束缚着他的身体，以至于他都不能呼吸了。</p><p>“杨公子，金老爷吩咐，斩草除根，一个不留！“缺眼长老阴冷地说道。</p><p>“我不杀妇孺！“杨青厌恶地看了缺眼长老一眼。</p><p>“呵呵，杨公子你是想违背金老爷的命令吗？“</p><p>“别逼我杀你！“杨青冷冷地说道。</p><p>缺眼长老安静了下来，一只眼睛带着冷笑。</p><p>这时，一个小男孩，才刚七八岁的样子，捡起地上的一把刀，朝杨青砍去，嘴里哭喊着：“你这个坏人，还我啊爹命来。“</p><p>杨青还没有所反应，缺眼长老便已经出手了，直接捏碎了小男孩的脖子，小男孩的脑袋从躯体上掉了下来，血肉模糊的脸上那小嘴还微张着，似乎还在哭喊着什么，一条小生命就这样流失了。</p><p>杨青怒视着缺眼长老，握紧了袖中刀，而后，松了又松，举步离去。</p><p>只听见院子里传来缺眼长老那刺耳的嗓音：“一个不留！“</p><p>杨青蓦地停滞了脚步，而后叹了口气，漠然离去。</p><p>一夜的时间可以发生很多事，比如昔日在扬州叱咤风云的老狼便像流浪狗一样死了，死得毫无价值，甚至还搭上了一家老小。</p><p>再比如昨晚还在醉春楼跟老狼像兄弟一样同桌喝酒的金大老爷，没隔几个时辰便派人收割了老狼一家老小的生命，悄无声息。</p><p>没有什么是不会改变的，时间是最温柔的刀子，人心是最可怕的荒漠吧，埋没了多少曾经青葱欢快的岁月。</p><p>而如今，正如杨青，他活着，只是为了一个已经死去了三年的女孩，亦或是只是为了自己内心的愧疚吧？只是他这么活着，像尸体一般地活着，没有了自己的思想，只是一具被人牵线的木偶，有意思吗？而可笑的是，他甘愿如此。</p><p>堕落吗？麻木吗？愚蠢吗？</p><p>你不知道了，我不知道，或许连他自己都不知道。</p><p>这世上很多事情都是很难说得清的。</p><p>而现在，杨青和金老爷虽然貌似融洽地相处了三年，但是各自内心因为那个天真无邪的少女又积蓄了多少的情绪呢？</p><p>没有人知道，人本来就是很复杂也很能隐藏自我内心的动物，这也是人最可怕的地方。</p><p>旦日，旭日东升，金大老爷便醒了，今天他有很多事要处理，如今他已经吞并了青狼帮的势力，又有商山四缺四大长老的相助，让他对蚕食盐帮的念头越发的高涨。</p><p>欲望是可怕的东西，膨胀起来往往让人迷失了自我。</p><p>而春娘此时也已经梳洗好了，并端上了丰盛的早餐，多么体贴的一个女人啊。</p><p>金老爷感到很温馨，暗下决心要好好待春娘，让她过上舒适的日子。</p><p>吃完早饭，金大老爷便出去办事去了，奇怪的是杨青并没有跟金大老爷后面了，取而代之的商山四缺四大长老。</p><p>不知不觉，金大老爷和杨青之间已经有很远的距离了吧。</p><p>而春娘让下人收拾完碗筷，便进了房间。</p><p>不多久，一个戴着面纱的人从金府后门走了出来，拿着一个篮子，低着头快速地走着，看那身材，应该是个女的，不多久便消失在了人群中。</p><p>而，此时，一道身影也从金府出来，尾随那个戴面纱的女人而去。</p><p>戴面纱的女人好像还怕别人跟踪似的，绕了几条街，然后偷偷进了杨知府的府邸。</p><p>那一道身影也跟着掠进了杨府，俯在屋顶的瓦片上。</p><p>此时杨府一个房间里有两个人，一个是杨怀仁，另一个是那个戴着面纱的女人，只见她解下面纱，是一个长得跟春娘一模一样的女人，只不过却少了几分温婉，多了几分冷酷。</p><p>“查到了吗？“杨怀仁摸了摸戴在左手大拇指上的翡翠戒指。</p><p>“恩，金老爷确实是连云山七十二寨的寨主，干过不少抢劫的勾当，但是当年截杀皇杠的大案并不是他干的，他也没有这个本事，即使现在吞并了青狼帮也没有那个本事。”</p><p>“这么说，当年六扇门的消息有误了。“</p><p>“应该是有误。“</p><p>“那个刀奴确实是杨青吧？”</p><p>“是的。”</p><p>“看来这一次，应该可以扳倒胡利在朝廷的地位了，安公公知道了一定很开心。”</p><p>“恩，六扇门假传消息且名捕杨青失踪三年跟在奸商身边，如今又跟盐帮扯上关系，胡利应该百口莫辩了。“</p><p>“安公公怀疑当年截杀皇杠的大案是胡利干的，别看胡利老家伙表面上老老实实跟条狗似的，实际上暗地里狡猾得跟狐狸似的。迟早我会把当年他欠我的一切拿回来！“杨怀仁似乎跟胡利曾经有很大过节，看样子恨不得想把胡利吃下去。</p><p>“这属下就不清楚了。“那个女人淡淡道，并不想多说什么。</p><p>“你继续跟在金老爷身边，看可否查出盐帮老大是谁。如果没有用处了，便杀了他！以绝后患。”</p><p>“一定要杀他吗？”那个女人犹豫道。</p><p>“怎么，然道你对他动情了吗？你要知道，你只是东厂暗地里训练的一个杀手罢了。你唯一的使命便是服从东厂的命令。”</p><p>“属下不敢，属下知道该怎么做了。”</p><p>“那就回去吧，不要让人起疑心。”杨怀仁淡淡说道。</p><p>“是。”应了一声，那个女人又戴上了面纱，从杨府后门走了出去，头还是低低的，消失在了人群中。</p><p>此时，那个尾随的身影也悄悄消失在人群中，但是并没有继续跟着那个戴面纱的女人，而是拐进了一家旅店，来到了一个房间，提笔留下了一封书信：</p><p>“如玉，让师父注意东厂的人，安公公欲嫁祸给师父，叫他老人家小心点，你也要小心点，现在扬州潜藏着安公公的人。连杨怀仁还有春娘都是东厂的人。“</p><p>出了客栈，杨青便回到了金府，正思索是否应该把春娘是东厂安排的奸细告诉金老爷，但是金老爷似乎真的爱上了春娘，而且如今金老爷有了商山四缺长老的相助，越发的张狂，野心也愈发的大，甚至有蚕食盐帮的念头。对自己也不怎么信任了，因为自己手上淌着蓉蓉的血，这已不可避免在两人之间形成一道深不见底的裂痕。</p><p>这么想，杨青决定暗地多注意春娘的举动，尽量顾全金老爷的安危，这样才对得上在地底长眠的蓉蓉。</p><p>而杨怀仁得到春娘的情报，便立马赶回京城禀报给了安公公。</p><p>“胡利那条老狐狸终于露出狐狸尾巴了，我早就怀疑他暗中利用六扇门为掩护，犯下了众多滔天大案，甚至还截杀皇杠，却嫁祸给了一个小小的土匪窝，真是可笑。怀仁啊，放心吧，我马上上报给皇上。如今六扇门的势力越发的庞大，连皇上都忌惮三分，想削弱六扇门的势力，又愁找不到机会，这次可是个好机会，即使证据不足，也足以让胡利在大牢呆上一辈子了。哈哈哈哈。“一个身着太监衣服的老儿哈哈笑起来，看起来圆滚滚的，好像一个皮球，满脸油光，脸蛋长得跟娘们一样俊俏白皙，不用说便是东厂的总管安公公了。</p><p>是夜，皇上听信了安公公的谗言，下令软禁了胡利，而当时胡利还穿着粗布衣，像个农村老翁正在自己那茅草院子修整着菜苗。</p><p>胡利不闻朝野已经多年，更是为朝野立下丰功伟绩，却不想伴君如伴虎，皇帝会怀疑于他，加上年事已高，怒火攻心，当夜胡利便死在了牢房之中，俯在地上，尸身旁边只留下两个浓重的血字，“冤枉”。</p><p>听闻胡利噩耗，朝野震惊，六扇门更是直接闯入了胡利的软禁的牢房与东厂对峙。杨怀仁也是很惊讶，连忙赶到，发现胡利确实已经没有了呼吸。但是杨怀仁并不是很放心，要求验尸，但是奇怪的是安公公似乎觉得做得有点过分，不好对六扇门交代，没有许肯杨怀仁的要求，让六扇门领回了胡利的尸身。而皇上似乎也抱着同样的态度，要求也国礼厚葬胡利。</p><p>旦日，六扇门举行了浓重了葬礼，京城上很多有名望的人都参加了祭奠胡利的葬礼，当然很多人只是来探一下虚实，因为很多人都不大相信胡利会就这么死了。</p><p>杨怀仁便是其中一个，他对胡利的憎恨，比安公公有过之而无不及。安公公只不过想遏制一下六扇门的势力罢了。</p><p>但是杨怀仁想要的却是胡利的命。</p><p>他不相信胡利这条老狐狸会就这么死了，因为这世上没有人比他更了解胡利。</p><p>杨怀仁眼里透着一股寒意，伫立在漫天飘零的细雨下。</p><p>他在等，等葬礼结束，去扒开胡利的坟墓，看看胡利是否真的已经死了。</p><p>不知道杨怀仁为何如此憎恨胡利，只知道这雨似乎更加的凄冷了，冰凉入骨。</p><p>而一道漠然的身影不知何时也已经出现了胡府不远处，杨青终于回来了，是想来见师父最后一面吧。</p><p>雨淅淅沥沥地下着，似乎在为胡利默哀吧。这样的天气，注定是多事之秋。</p><h4 id="伍"><a href="#伍" class="headerlink" title="伍"></a>伍</h4><p>夜雨潇潇，苍白的月光，映着胡利的坟墓，略显凄清，更添了几分诡异。</p><p>直到午夜的时候，祭奠胡利的人才渐渐离去，而此时如玉还跪在胡利坟前，轻声哭泣，很难形容一个刚刚失去父亲的女人的无助的心情，梨花带雨，璀璨如珠。</p><p>或许此时她需要的只是一个可以依靠的肩膀吧，但是那个人却没有出现，杨青只是站在树林中的阴影下，黯然地看着那个萧索的倩影，并没有什么表示。</p><p>“爹，你在九泉之下安息吧，女儿会为你报仇的！”如玉眼里闪过一丝狠意，起身离去。</p><p>杨青这时才慢慢地从树林里走了出来，俯首给胡利磕了三个头。</p><p>“徒儿愧对恩师，但请师父放心，我会照顾好如玉的，不让她做傻事。”杨青伫立许久而后才徐徐而去。</p><p>“哼哼，想不到你这老狐狸竟然还有那么多人挂念！“一声冷笑，一个身影出现在夜幕下，赫然是杨怀仁。</p><p>“老夫隐忍许久，今天你我往日恩怨总算可以清算一下了。“杨怀仁一掌劈开了胡利的坟墓，露出一口黄梨木的棺材，厚重而又朴实，略带着泥土。</p><p>杨怀仁眼里冷光一闪，运力推开了棺木，只见一个老者，双鬓已略染青霜，此时正安静地躺在棺材里，赫然就是胡利！</p><p>“怎么可能？那个老狐狸真的就这样死了！“杨怀仁显然有点难以接受，脸色更是变了几变。而后凝重地看着棺木那老者在月光下略带青白的脸庞，压抑许久的恨意倾泻而出，怒起一拳打在了尸体的胸膛上，胸骨碎裂，鲜血从咽喉鼻孔溢了出来。</p><p>“不对，这体型不对！胡利没有这么胖。“杨怀仁眼里闪过一丝精光，伸手撕开了老者的脸皮，竟然只是一张精细的人皮面具！而死去的人竟然没有脸皮，脸皮被一刀干净地剥掉了。</p><p>“老狐狸，你果然没死！“杨怀仁恨恨地说道。</p><p>“哈哈哈哈’突然树林传来一阵笑声。</p><p>“谁！“杨怀仁刚转过身，一件黑色的袍子便突兀地出现在他的面前，裹住了杨怀仁，又突兀地消失在夜幕之下。</p><p>唯有那刺耳的笑声还久久地在丛林中回荡。</p><p>金大老爷这几天脾气不大好，因为杨青只留下一封书信便走了，说是去京城祭奠他的师父。胡利的突然暴毙令金大老爷感到震惊，但是杨青至今还跟六扇门纠缠不清，令他十分气愤，也越发的不信任杨青。而且杨青在信上还特意嘱咐他要小心春娘。</p><p>“春娘怎么会有问题？”想起春娘温柔贤惠的样子，金大老爷便打消了疑虑。</p><p>如今在商山四缺的帮助之下，金大老爷已经吞并了盐帮不少分舵，随着势力的发展，金大老爷的野心也越发的高涨，渐渐的他都认为自己可以像盐帮老大一样可以坐拥江湖，万人敬畏，连朝廷都无可奈何。</p><p>身下的春娘已经无法抵抗金大老爷的亢奋，脱力地伏在金老爷宽阔的胸膛上。金大老爷抚摸着春娘如同绸缎般紧致细腻的肌肤，满足地闭上了眼睛。</p><p>而这个时候，往往是一个女人最美丽的时候，也是一个男人最没有防备的时候。</p><p>所以，一把匕首就这样深深地扎进了金大老爷的胸膛，鲜血溢满了整张床。</p><p>金大老爷还没有感到痛苦，便死了，带着他那愚昧天真的幻想，幸福地死去了。</p><p>春娘起身整理了一下衣服，看着死在床上的金大老爷，略带伤感地说道：“抱歉，虽然你对我很好，但是我不得不杀你！”</p><p>“哈哈哈哈，做得不错。“只见屋子屏风后面走出了一个略胖的身影，满脸油光，赫然是安公公。</p><p>只见春娘朝那个身影跪了下去，毕恭毕敬道：“春娘见过公公，春娘已经完成公公交办的事，恳请公公放了我那无辜的孩子。“</p><p>“孩子？我不知道什么孩子？“那个身影冷笑道。</p><p>“公公不知道吗？“春娘焦急地问道。</p><p>“呵呵，想不到那条阉狗那么喜欢要挟别人啊。“</p><p>“什么？！“春娘惊道。</p><p>“我不是那条阉狗。”只见那个身影突然变成了一件黑色的袍子，猛地露出一只枯瘦的手掌，掐住了春娘的喉咙，活活地把脑袋从躯体上掐了下来，鲜血像喷泉一样溢了出来。</p><p>春娘的嘴角还微微张着，说着：“我的孩子啊！“</p><p>那件黑色的袍子里露出一个脑袋，阴冷地看着春娘的眼睛张得大大的头颅，然后伸出猩红的舌头舔了舔手掌上的鲜血，满足地笑了。</p><p>“金老爷您没事吧。”似乎听见了这里的动静，商山四缺也赶了过来。</p><p>“他，已经死了。“门内传来冷冷的声音。</p><p>“谁！给我滚出来！”缺眼长老一掌劈开了房门，闯了进来。</p><p>只看到一件黑色的袍子背对着他们，发出阴深深的笑声。</p><p>“你！！！！！”刚才还叫得很大声的缺眼长老现在都说不出话，还有其他三位长老也是一脸不可思议的表情。</p><p>“你们都认为我死了是吧！”黑色的袍子中传来冷冷的声音。</p><p>“帮主，你没死！真。。。真是我盐帮天大的幸事。“缺眼长老惊得都说不出话了，跪了下来。</p><p>“是啊，帮主洪福齐天，举世无双，怎么可能死呢？“剩下的三位长老也俯首跪了下来。</p><p>“嘿嘿，是吗？知道我装死是为了什么吗？“黑色的袍子桀桀地说道。</p><p>“帮主深谋远虑，所思甚远，属下不知。”</p><p>“那是因为想试一试盐帮中不知天高地厚，想造反的东西罢了。当初我假装重病卧床，你们就已经蠢蠢欲动了吧，不过碍于我昔日的威严，没有有所动作。所以我索性装死，你们果然按捺不住了。除了你们四个老东西，其他想造反的人都已经死了，你们是不是也该上路了。”</p><p>“看在我等四人昔日为盐帮勤勤恳恳的份上，希望帮主饶我等一条性命，好继续为盐帮效劳。“商山四缺俯首求道。但是话还没说完，四个人眼光冷光一闪，一起出手，将毕生绝学全部朝那件黑色的袍子砸了过去。</p><p>“嘿嘿，找死！“黑色的袍子忽然朝四周张开，将商山四缺裹了进去，然后那件黑袍还是那件黑袍，而地上多了四具干尸，全身的血液都被吸干了，眼睛秃了出来，只剩下一张人皮包着骨架子。</p><p>“老家伙的血果然没有小娘们的血好喝。“咂了咂嘴，那个身影裹着黑色的袍子又突兀地消失了。</p><p>杨青赶回扬州时，金府已经成了一片死域，没有一点生命的气息，所有人都死了，而且死状都一样，全都成了干尸，在烈日炙烤下，早已经腐烂，发出阵阵恶臭。</p><p>有好事者报告衙门，但是杨知府却没有在府上，而其他人碍于金大老爷昔日的威严，竟没人敢进金府一探究竟。</p><p>所以等杨青看到金大老爷的时候，金大老爷的尸身已经腐烂得不成样了，而且爬满了蛆（qu第三声）虫，半边脸已经被啃食干净，一只眼珠子吊着，胸口扎着一把匕首。</p><p>而春娘还有商山四缺也死在了这间屋子里，而现场并没有打斗的迹象。</p><p>杨青默然地看着金大老爷，暗道：蓉蓉，对不起，我没有保护好你的父亲。但是我会找出是谁下的毒手！为你父亲报仇。他们，好像死于昔日魔教神功，化血大法之下，想不到竟然还有人会这门邪功。</p><p>昔日西域魔教曾经一度入举中原武林，妄想吞并中原各大门派，后来武当，少林，峨眉等名门正派还有不少隐世不出的家族联手，才灭了魔教的势力。时而今日，谈起魔教，还有不少人闻之变色。</p><p>难道是东厂的势力，但是春娘不是他们的人吗？为什么也杀死呢？况且商山四缺的功夫虽说不算登峰造极，但怎么连一点反抗的能力都没有，似乎那个人一出手便化掉了四个人的血液。这个人的修为实在太可怕了。</p><p>随后，杨青暗中查访了昔日金老爷的势力据点，发现人全部都消失了，没有留下一点痕迹，这越发让杨青感到震惊，这样的手段，莫非是盐帮！</p><p>还没等杨青理清头绪，京城那里又传来胡利的墓被毁坏的消息，堂堂六扇门总管，死后竟也不能宁静，墓碑被毁，连尸体都被盗走，震惊了整个朝野。杨青立马赶回了京城，因为那里还有一个女人，也许也是他此生仅剩的一个他在意的人了吧，在孤独无助地等着他。他不能再让她发生意外。</p><p>杨青再看到如玉的时候，如玉瘦了，像一朵枯萎的黄花，柔弱忧伤，蜷缩在月光下。</p><p>“如玉，你还好吗？”杨青看着她柔弱的样子，想起小时候那个成天黏在自己后面的小女孩，痛心地说道。</p><p>“杨青哥哥，我娘在我小时候便抛下了我，现在爹也抛下了我，连你也不要我了，你说我活着还有什么意思呢？”如玉望着清冷的月，无力地说道。</p><p>“说什么傻话呢？谁不要你了，我会好好照顾你的。”杨青温柔道。</p><p>“真的吗？杨青哥哥！”如玉扑倒了杨青怀里，哭了起来，一如小时候那个单纯的小女孩，杨青忍不住抱紧了她，嗅了嗅她的发香，两滴泪也落了下来。</p><p>“一定是他，一定是安公公干的，他老早就跟爹过不去。”如玉咬牙切齿道。</p><p>“我会查清楚的，如果是真的他，我不会让他活过今夜。等着我！”杨青拍了拍如玉的后背，轻声低说道。</p><p>然后轻轻地放开了如玉，温柔地为她擦拭眼角的泪水，才转身离去。</p><p>“杨青哥哥，我也要去。”如玉追上了杨青的脚步，坚定地说道。</p><p>“嗯，我会保护好你的！”杨青柔声道。</p><p>“嗯。“</p><p>两道身影并行消失在了夜幕之下，前方是一望无际的黑暗，似乎有一个恶魔在残忍地笑着，张着血盆大口，等待着猎物。</p><p>前方会发生什么呢？他们都不知道，只知道身边还有一个身影可以陪伴，可以依靠，这其实就已经足够了。</p><h4 id="陆"><a href="#陆" class="headerlink" title="陆"></a>陆</h4><p>年迈的古城在晕冷的月下越显沧桑，凝重。改朝换代，权力更替，古城不可避免的成了兵家之地，无数的腥风血雨，刀光剑影在这里演绎。厚重的城墙上不可避地布满了伤痕，有多少尸骨埋葬在这年老的古城脚下呢？没有人知道，或许连古城自己也不知道。</p><p>只知道古城内住着的是这块大陆权力的巅峰，帝王。</p><p>所以很多人想到古城里去，甚至不惜用自己身上的某个部位作为代价。只是进古城容易，想出去就难了。安公公十岁便进了古城，而到了五十多岁时，他才有机会出去，其中四十多年的年华就埋葬在古城中。更有许多人，一生就这么埋葬了。</p><p>这不知道是可悲还是可笑。</p><p>权力这东西总是那么的诱惑人，尤其那些身处在权力周围的人们，当权力触手可得时，他们就忍不住想将权力攥在手中。所以帝王总是很多疑，因为他们怕别人会从他手里夺走权力，哪怕那个人是他至亲的人。</p><p>如今的帝王白墨也是如此，因为他的皇位便是从他哥哥那里夺来的，为了坐上这个皇位，他不惜杀了自己的哥哥。他，像一只蛇一样，残忍而又阴柔，不知何时便会突然咬你一口，然后笑着看你痛苦地死去。</p><p>更令人作呕的是他喜欢的并不是女人，而是太监。很难想象那些天真的女人以为傍上帝王，自己一生便可以荣华富贵，突然发现年轻的帝王对女人的身体并不感兴趣，会是什么反应。</p><p>当一个女人的身体都不能作为武器的话，那么她有再多的心计也是没辙的，最终只能孤独地老死在冷宫里。花儿再美总是会有发黄的一天，多少的青春年华都赶不上冷宫荒芜的脚步，所以很多绝望的女人便一根白绫了结了自己的生命。</p><p>而有时，生命就是那么的廉价，当没有人在意你的时候，你往往也不会在意自己了。很多人都是为别人而活的，只是很多人并不知道而已。尤其是一个女人，如果只是为了一个男人而活的话，那么真的活得很可悲。</p><p>夜，清冷而寂寞。白墨冷冷地推开了想服侍他的妃子，转身朝安公公那儿走去。好久没召见安公公了，想起安公公那白皙的肌肤，白墨忍不住舔了舔舌头。这也不难知道白墨会那么待见安公公了。</p><p>后花园的路很暗很暗，因为白墨习惯黑暗，一个内心阴暗的人又怎么会喜欢光明呢？</p><p>很快就到东厂，白墨吩咐侍卫先退了下去，又命令东厂的太监不要惊动安公公，自己悄悄地朝安公公的房里走去。</p><p>“谁！”一个阴冷的声音。</p><p>“是我！”白墨淡淡地说道，推开了安公公的房门。</p><p>“陛下，有事吗？”安公公淡然道。</p><p>“这还用说。“白墨张开手想将安公公拥入怀里。</p><p>但是被安公公冷冷地避了过去。</p><p>“你不是安公公，你是谁？“白墨眼里寒光一闪，阴冷地说道。</p><p>“嘿嘿，想不到狗皇帝跟那条阉狗还有这一腿。“安公公耻笑道。</p><p>“来人！把这。。。。。。。。啊。。。”白墨还喊出口，脖子已经被一只手牢牢地卡住了。</p><p>“想知道我是谁吗？”安公公冷冷地说道，扯下一张人皮面具，露出了另一张脸。</p><p>“你。。。。。。。。。。。。。。”白墨已经说不出话了，那只手越发的用力，白墨的眼珠子渐渐地凸了出来，掉到了地上，然后脑袋也跟着掉到了地上。</p><p>年轻的帝王，带着他令人作呕的嗜好离开了人世。</p><p>那个身影厌恶地看着那具尸体，拿起手绢擦拭了下手。</p><p>“想不到，你连皇帝都敢杀！”突然房间里响起另一个声音，听起来很虚弱。</p><p>那个身影缓缓地走进隔间，戏谑地看着床上那个躺着的人，笑道：“怎么不敢杀，你觉得有人会怀疑到我的头上吗？再说，只要有那张脸，谁还不都是皇帝。就如戴上这阉狗的脸皮，我不就成了安公公了吗？“那个身影又重新戴上了那张面具，又变成了安公公的模样。</p><p>“原来，当时死的是安公公，你换上了他的脸皮，怪不得不让我验尸。”</p><p>“没错，青儿早就提醒我要小心你们了。”</p><p>“想不到，这么多年，我还是输给了你。只是可怜我那无辜的孩子还有怜衣。“</p><p>“哈哈哈哈哈哈哈，我会告诉你，你那无辜的孩子还没死吗？“</p><p>“真的，你会那么好心！咳咳咳。。。”床上那个人一激动，就咳嗽起来了。</p><p>“因为那个孩子就是我的孩子，谢怜衣很早就是我的人了。只不过我当初抛弃了她罢了，杨怀仁，你还真可笑啊，以为她真的喜欢上你了。但是，我怎么会容忍我曾经的女人跟别的男人在一起呢？”那个身影冷冷地说道。</p><p>“什么，你。。。。你这个畜生。咳咳咳咳。。。。“床上的那个人咳嗽得更厉害了。</p><p>“你还以为我夺走了你的女人，杀死了你的儿子啊！真是可笑，我只不过拿回我的东西罢了。你却为了一个不爱你的人还有一个不是你的孩子的孩子跟我折腾这么久。知道我为什么不杀你吗？因为我喜欢看像你这种可怜的家伙在我手心愤怒无助的样子。“</p><p>“你。。。。这个畜生！咳咳咳咳。”床上那个人激烈地咳嗽起来，咳出了血，不多时便死去了，只不过那双眼睛还睁着，睁得大大的，看着那个身影。</p><p>真是可怜的家伙啊。只是不知道我那可怜的如玉怎么样了，她还以为我死了，很伤心吧。还记得她在我坟前跪了好久了。还有青儿，这二十多年来，我亏欠他太多了，以后要好好补偿他。如今，无论朝野还是江湖，都没有任何人可以撼动我的地位了。</p><p>想不到那个身影竟然是六扇门总管胡利，也是盐帮的幕后老大。怪不得，他找不出盐帮老大是谁，原来他就是盐帮老大。如今所有跟他敌对的人都死了，即使是当今的皇上，已经没人能阻挡得了他的脚步，也没人能阻挡得了他的野心。</p><p>胡利叹了口气，走出房门，望着天上那凄冷的月，宛如看着他的爱人。怜衣，杨怀仁死了，我还是没有遵守对你的承若，放了杨怀仁，或许我一直都这么自私吧。当初，为了在京城站稳脚跟，我不惜抛弃你，傍上当时六扇门总管的女儿，其实我并不爱她。我一直喜欢的都是你，后来我达到了目的，我便杀了那个女人，却没想到你已经成为了杨怀仁的妻子。但是，我还是把你抢了回来，没想到，你才活了几年，便去世了。我亏欠了你，更亏欠了我们的儿子。</p><p>杨青，如今我更不敢认他了，我不能让他知道他的父亲是这么卑劣的人。为了目的，不折手段，但是有什么办法呢？这世道，要想爬高点，就不得不换很多张面孔活着，就像现在，戴着那阉狗的脸皮活着。还有如玉，她好像从小都喜欢杨青啊，只是不知道杨青就是她的亲哥哥，所以当初杨青的离去，我不是不知道他的下落，而是不想去找他。让他们两个人分开一段时间，让如玉渐渐淡忘青儿。</p><p>哎，胡利叹了口气，突然感觉身后一股杀气逼来。</p><p>只见白光一闪，一个黑影拿着一把弯刀朝自己砍来。</p><p>胡利闪身躲过，惊愕道：“是你！“</p><p>原来那个黑影赫然是杨青。</p><p>只见杨青一把袖中刀在月光下闪着寒光，冷冷地看着胡利。</p><p>“阉狗，我师父是不是你杀的！”</p><p>“我要是说不是呢？”胡利无奈道。</p><p>“不是你，是谁？”杨青冷冷道。</p><p>“那你想怎样！”</p><p>“还我师父命来！”杨青说完，袖中刀忽的又朝胡利闪了过去。</p><p>但是又被胡利躲了过去。</p><p>“我不是安公公，我不想杀你，你最好现在就走！”一件黑色的袍子裹住了胡利，从中传来阴冷的声音，袍子周围依稀有血影在残绕，带着浓浓的血腥味。</p><p>“化血大法！原来是你！今天你必须死！”杨青森冷地说道，森然的杀意弥漫在月色之下。</p><p>“是吗？”胡利痛苦道，他也不曾想到有一天杨青会跟他刀兵相见，而他却只能无能为力。</p><p>杨青也不说废话，手里袖中刀一闪，朝黑袍子斩了过去。但是竟然没有沾到黑袍子一点衣襟，胡利一身修为早已经登峰造极，已然是陆地神仙人物了。</p><p>“你杀不了我的，我也不想杀你。”黑色的袍子传出叹息声。</p><p>“是吗？“杨青无奈地笑了笑，柔和地看着天边的月，身子缓缓升起，眼光凝聚，好比一把利剑划破了暗寂的夜。袖中刀，也缓缓升起，停伫在杨青胸前。漫天柔和的月华都朝那把刀汇了过去，发出璀璨的光芒。</p><p>“那是？呵呵，想不到神月天刀，你竟然可以练成了，这样的天赋连我都不及啊！看来我要认真对待了。“胡利无奈地笑了笑，随后眼神也凝聚起来，全身黑雾滚滚，血影残绕，天幕越发的黯淡，连月亮都被遮住了。</p><p>杨青握住了那把刀，刹那间那把刀迸发出无限的光芒，照亮了整片天空，一人一刀，人刀合一，带着无匹的杀意从天而降，砍向了那团黑雾。</p><p>而此时，那团黑雾也越发的凝重，血影也越发的明显，仿佛有无数的生灵在哭号，更是有无尽的鲜血溢了出来，迎上了从天而降那惊世无匹的耀眼一刀。</p><p>“嘭——“</p><p>整片天空都安静了，东厂化为废墟，大地碎裂了，地上躺着两个人，全身都被鲜血染红了。</p><p>“杨青哥哥，你怎么了，早知道，我就跟你进来了。“突然一个倩影掠了进来，便是如玉了，只见她将杨青抱在怀里，哭着说道。</p><p>“如玉，我。。。我不能。。。。照顾你。。。你了。。。。以后你。。。你要好好。。。。照。。。照顾自己“杨青勉强睁开眼睛，艰难地动了动嘴唇，便又无力地倒在了如玉怀里。</p><p>“咳咳。。。“胡利艰难地爬了起来，喃喃道：”青儿！“</p><p>“你这个老贼，还杨青哥哥命来!“如玉愤然道，拿起了杨青身边的刀，朝胡利劈了过去。</p><p>胡利手掌紧握了一下又松了下去，而后安然地闭上了双眼，他刚刚才杀死了他的儿子，现在怎么又能对他的女儿动手呢？</p><p>一把刀狠狠地砍胡利的胸膛，深深地陷了进去，鲜血溢了出来，溅了如玉一脸，只是这个女人脸上有的只是恨意，浓浓的恨意。</p><p>胡利睁开眼睛，柔和地看着如玉，无奈地笑了笑，而后便倒了下去。或许一切都是老天开的玩笑，亦或是对他这么多年造的罪孽地惩罚吧。死前的一刻，他只希望他的女儿能够好好地，好好地活下去。</p><p>一个人即使得到了天下，到最后也才发现只要身边挚爱的人可以好好地活着，其实这就已经足够了。</p><p>如玉呆呆地看着眼前的人倒了下去，突然感觉他的眼神好像，好像他的父亲，但随即便又抛掉了这个可笑念头。转过身去抱起杨青，消失在了夜幕之中。</p><p>从那以后，如玉从江湖上消失了，不知道她活得是否还好。或许是嫁给了一个庄稼汉，踏踏实实地过着乡村日子，亦或是远离中原，到边塞流浪，流浪，流浪远方。不管是怎么样，我都希望她能好好地，好好地活着。我想这也是很多人的希望吧。</p><p>好了，温柔刀这个故事到这里就结束了，不知道是否可以给大家一点感想。其实，江湖无处不在，包括我们现在的社会，权力，金钱，美色，人心的欲望像一个无底洞，怎么都填不满，只是当我们面临这些勾起我们欲望的诱惑时，我们是否可以想想这么做是否会给我们身边的人造成难以预估的伤害呢？</p>]]></content>
      
      
      <categories>
          
          <category> store </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武侠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断刀残雪</title>
      <link href="2020/10/27/store/%E6%96%AD%E5%88%80%E6%AE%8B%E9%9B%AA/"/>
      <url>2020/10/27/store/%E6%96%AD%E5%88%80%E6%AE%8B%E9%9B%AA/</url>
      
        <content type="html"><![CDATA[<p> 落日残阳，古道上，一个胖子，约莫三十来岁，不，还有一匹瘦马，不过那个胖子实在胖得有点不像话了，宽度都能和高度相比啦，而且竟然，竟然还就恬不廉耻地跨在了那匹瘦马身上，远远看去，只见胖子，不见瘦马啊！让人一看，就为了那匹瘦马打抱不平啊，这主人也太不厚道了吧。不对，再凑近一看，那不是瘦马啊，竟然只是一头驴！而那胖子，肥头大耳的，一身厚厚的麻衣，背着一个长方形的包裹，腰间系着一个大大的酒袋。但却是一脸的憨厚相，笑起来灿烂得跟菊花似的。一看给人的感觉就是傻不拉几的，没见过世面的二货。</p><a id="more"></a><h4 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h4><p> 落日残阳，古道上，一个胖子，约莫三十来岁，不，还有一匹瘦马，不过那个胖子实在胖得有点不像话了，宽度都能和高度相比啦，而且竟然，竟然还就恬不廉耻地跨在了那匹瘦马身上，远远看去，只见胖子，不见瘦马啊！让人一看，就为了那匹瘦马打抱不平啊，这主人也太不厚道了吧。不对，再凑近一看，那不是瘦马啊，竟然只是一头驴！而那胖子，肥头大耳的，一身厚厚的麻衣，背着一个长方形的包裹，腰间系着一个大大的酒袋。但却是一脸的憨厚相，笑起来灿烂得跟菊花似的。一看给人的感觉就是傻不拉几的，没见过世面的二货。</p><p>而那只驴呢，反而比它那二货主人有气质多了，昂首挺胸，摇头摆尾的，雄赳赳，气昂昂的，要多神气就有多神气。而那胖子倒也挺有意思的，有时会从腰带上解下那个大大的酒袋，凑到那只驴嘴边，那只驴竟也知道主人的意思，咕噜咕噜地喝了两大口，喝得津津有味的，喝罢，显然还有些意犹未尽，伸出长长的大舌头一抹嘴角，两只宝石般大大的眼睛，眨呀眨啊，似乎在说，好酒啊！随后便又摇摇晃晃地，屁颠屁颠地载着它的主人，朝前方走去，而最后一抹残阳，也渐渐地消散在天际。一人，一驴消失在夜色之下。</p><p>而他们的后方，古道的尽头，赫然是黄沙漫卷，一望无际的荒漠，狂风呼啸，黄沙下时常会露出白骨架子，也不知道曾经掩埋了多少古道上的过客。即使是骑着骆驼，带着充足的食物和水，还有一大帮人保驾护航的古道上的商人，都不一定可以安安稳稳稳地，活着走过荒漠，但是那个胖子，却只骑着一头毛驴，屁颠屁颠，摇摇晃晃，乐乐呵呵地走出了荒漠。而且如果你仔细看的话，你就会发现刚才那个胖子的衣服还有那张总是笑成菊花的脸蛋竟连一点尘土都没沾染上，连同那只小毛驴那一身皮毛也是光滑锃亮的。如果知道了这一点，你就会发现那个胖子，其实不是二货，而你才是二货。这个世界就是这么的奇妙，无数自己是二货的人总是把别人看做二货，而判断依据仅仅只是对方的长相傻不拉几，土不拉几的。</p><p>这样的人很多，当然也包括土匪了。而且这古道荒凉无人的，还正值月黑风高，正是杀人越货的大好时辰啊。这不，一大群土匪，呼啦啦地也不知从哪个地方冒出来，那胖子好像还没反应过来，连同那只驴就被团团围住了。数十把砍刀亮晃晃的，在这凄冷的月色下，散发着逼人的寒意啊。那胖子，似乎也被这场面吓住了，扑通一声从驴上摔了下来，跪倒在地，好似连舌头都伸不直了，结结巴巴道：“各位匪爷爷，您就饶过俺吧，俺一没钱财而没脸蛋的，就这一头小毛驴了，如果你要，就拖去剁了吃了，听说驴肉大补啊。”</p><p>话没说完，就只听到砰的一声，原来那只毛驴估计发怒了，气这主人太不仗义了，一脚把那个胖子踹得打了好几个滚，那场景甚是好笑，但是没有人笑，那些土匪显然不是一般的土匪，而，估计是，训练有素的土匪。</p><p>而且，训练有素的土匪一般也应该有一个不一般的头头。这不，前面的十几个土匪让出一条道来，一个高大的身影出现在夜幕之下，宽大的黑色风衣，青铜面具，一把偃月弯刀，仿佛还在滴着血，散发着红色的妖艳的光芒，或许是饮了过多的鲜血吧。明眼的人，一看，就是一把好刀，一把可怕的好刀。但其实，刀，并不算可怕，因为刀，没有意识，没有生命，只是一件冰冷的工具，真正可怕的是拿刀的人。尤其是那种可以赋予刀生命，使刀产生意识的人。</p><p>而这个戴着青铜面具的家伙显然就是这种人，依稀还能听到他手里的那把弯刀，在颤动，在呻吟。然而真正让人害怕的并不是他的刀，而是他那青铜面具下的那一只眼睛，是的，是一只，而不是一双。但是，就是那一只眼睛，却比两只眼睛更加可怕，因为那只眼睛，其实不是人的眼睛，而是狼的眼睛！</p><p>独眼孤狼，只是一个外号，也有只叫独眼的。本为关外刀客，姓名不详，师传不详，十数年前，大战中原各路高手，当时名震江湖的十大名剑客就被折断七把。引发剑客家族的疯狂报复，据说寡不敌众，双眼被挑掉，消失了整整一年。再出现在世人眼前，已经换上了一只狼的眼睛，一把偃月弯刀，饮尽当年追杀他之人鲜血。而后，便又消失了，从此独眼孤狼成了一个传说。</p><p>而如今，这个江湖传说中的人，竟然出现在这里，然道仅仅只是为了打劫一个胖子吗？</p><p>而，此时，胖子显然知道到自己的处境不妙，满脸肥肉堆积，硬挤出一个菊花般的大笑脸，只是这个笑容有些勉强把，看起来也颇为滑稽。</p><p>“各位匪爷，这行的规矩俺懂，你们这黑夜的不睡觉在这候着也不容易，您开个价吧，不过俺走趟关外也不容易啊，还请各位匪爷给俺留些路费啊！”胖子一边说着一边抹着眼睛，但是半天没见一滴眼泪掉下来。嘿嘿的干笑了两下。</p><p>但是显然对面的爷不买这笔账，独眼饶有兴趣地看着胖子一眼，仅存的一只眼睛微缩，透着阴冷的寒意，冷冷地说道：“我的刀很久没有磨了，是时候应该磨磨了。”</p><p>“好刀当然得配上好的磨刀石，我这正有一块上好的乌石，可以奉上。”胖子不知何时从驴背上的包裹里拿出一块拳头大的石头，通体发黑，灿若星辰。江湖上自古有一两乌石千两金之说，乌石硬度之高，韧度之坚，乃世间少有，常用来锻造兵器亦或是铸造神兵利器，用来当磨刀石似乎有些愚不可及，而且这拳头大小的乌石市价至少万金，而且还有价无市。</p><p>但是独眼只是淡淡地说道：“乌石是好东西，当磨刀石也的确是最好的磨刀石。可惜我磨刀从来不用磨刀石。”</p><p>“是吗，那敢问阁下用什么磨你的爱刀呢？”胖子收起了笑容，缓缓地直立起身子，平淡地看着独眼。</p><p>“脖子，仇人的脖子！”独眼缓缓地握紧了手里的刀。</p><p>“照匪爷这么说，是不是要用我的脖子来磨阁下的爱刀呢？”胖子眼睛微缩，侧移了一下身子。</p><p>“是！”</p><p>“可惜啊，刀，是好刀，不过我的脖子可不是好的磨刀石，有许多想用我脖子来磨刀磨剑的人最终都折断了刀折断了剑。”胖子摇头叹道，一脸的惋惜。</p><p>“是吗？”</p><p>“是的，匪爷想试试吗？”</p><p>“是！”</p><p>“那，为何还不动手呢？”</p><p>“等！”</p><p>“等谁？”</p><p>“我！”，忽的远方传来一个苍老低沉的嗓音，声音并不算很大，但是每个人都能听得很清楚，就如同就在你耳根旁说的似的。</p><p>独眼默然侧立一边。</p><p>远方，路的尽头出现一个人影，佝偻着身子，看不清楚他的脸。他，就那么慢慢地走着，低着头，看着地面，慢慢走着，走得很慢很慢，也走得很认真很认真，仿佛一个行动不便的老者，走路得很小心，很小心，要不然可能走错一步，整条路便都走错了，而回头路更不好走啊。江湖这条路也是如此吧，只是不知，他已在江湖这条路走了多久，又是否曾经走错了几步呢？</p><p>我想，谁都不会有闲情逸致去看一个老者漫步，尤其还是一个个大老爷们呢。但是没有一个人说话，都默默地看着那位老者，即使独眼也不例外。胖子的脸色也微微变了，瞎子都能看出来，那个老者绝不是普通人，至少应该比独眼还不普通。因为独眼，看那位老者时，那只狼眼里透着敬畏。</p><p>老者，慢慢地走到了独眼身边，才慢慢抬起他的脑袋，淡淡地看着对面那个胖子。</p><p>胖子也看着老者，越看心越凉，但是脸上并没有表现出来。</p><p>老者，长得很平凡，平凡得跟街头卖菜的老翁似的，脸上带着一个银色的面具，身上穿着的也很平凡，甚至是有些糟蹋，仅仅只是一件破旧的麻衣罢了。</p><p>但是，让胖子心凉的是，老者的手。</p><p>老者的右手，修长苍白没有一丝褶皱，明显是一只握剑的好手，连胖子也暗叹不如。但是老者，左手的衣袖却是空空如也。断臂的老者在江湖上很少见，尤其还是有名头的，胖子想不出一个，当然绝不是他孤陋寡闻，因为他，刚才第一眼就看出了独眼便是江湖上传说的独眼孤狼。人在江湖上飘，没有些许见识，是飘不长久的。</p><p>而对于一个完全陌生的人，对话显然是最好的了解对方的方式。</p><p>胖子，直了直身子，向老者拱手道，笑道：“老人家，不顾身体不便，来此所谓何事呢？”</p><p>“救你。”老者淡淡道。</p><p>“救我？咳咳，这又是从何说起。”胖子干笑两声。</p><p>“因为有人要杀你！”老者言语依旧平淡无奇。</p><p>“谁？”</p><p>“我！”独眼，从衣袖下慢慢抽出弯刀，那只狼眼又重新变成了红色，寒意蔓延。</p><p>“哦，你认为他有把握可以杀得了我吗？”胖子看了眼那个老者，便低头看着自己的手，不，不是看，而是欣赏，因为他，也有一双精巧细致的好手，虽然胖了些，但是用来握一把杀人的刀已经足够了，而且可以握得很稳很稳。</p><p>“他，或许只有五成把握，但是算上我，应该有十成把握了吧。”老者，抬起手臂，也欣赏起了自己的右手。的确，手是很有欣赏价值的，尤其是剑客或是刀客的手，着实是一件艺术品。</p><p>“老人家，你不是来救我的吗？”胖子蹙起眉头，抬头看着老者，他想知道这老者葫芦里到底卖着的是啥药。</p><p>“因为你拿了我的东西，拿了我的东西的人，必须为我做一件事，不然只有一条路，死路！”</p><p>“咳咳，老人家，我拿你什么东西了。”胖子干咳道。</p><p>“你应该见过一个戴铁面具的人吧，这块乌石也是从他那儿拿到的吧。”老者淡淡说道。</p><p>胖子瞳孔微缩，大概知道前因后果了。</p><p>前些日子，他在荒漠上遇到一个家伙，穿着木屐，戴着铁面具，应该是东洋浪人。估计在荒漠走久了，啃干粮啃腻了，死活要剁了他的毛驴当下酒菜。而且二话不说，直接挥舞着武士刀，嘴里八嘎八嘎地叫着，朝他奔了过去。</p><p>胖子虽说平时笑容可掬，菊花灿烂的，但也绝不是任人宰割欺压的羔羊，而且这东洋浪人在中原武林可谓是臭名昭彰，调戏糟蹋良家妇女的事可没少干。胖子老早就看东洋浪人不爽了，索性直接毙了那厮。并顺便搜刮了那厮身上的物品，想不到竟然有乌石这等稀罕物。</p><p>“乌石是我给那人的赏金，但是他还没有做成事便被你杀了，所以如果你想活命，就必须替他做完他未做完的事。”老者依旧面无表情，颇有深意地看着胖子。</p><p>“哦，那老人家要让我做何事呢？”胖子直视老者。</p><p>“帮我取一样东西。”老者缓缓答道，并不在意胖子的眼光。</p><p>“什么？”</p><p>“一把刀，一把断了的刀。”</p><p>“断刀！”胖子的脸色变了。</p><p>“没错，断刀。”老者脸色依旧。</p><p>“没兴趣，为了这把断刀，江湖上只不定要死多少人。”胖子耸耸肩，叹道。</p><p>“你会有兴趣去做的。”</p><p>“哦，说来听听。”胖子有些不以为然。</p><p>“因为一个女人，你喜欢的女人。”</p><p>“我喜欢的女人多了去了。”胖子，不自然地摸了摸鼻子。</p><p>“一个妓女，池妍雪。”</p><p>“好，我帮你拿！”沉默片刻，胖子抬头看着老者，一字一顿地说道。</p><p>“具体事宜，十天后我会找人通知你。”老者转身缓步而走。独眼跟在其后。</p><p>“不知老人家尊名？”胖子看着老者离去的背影，突然问道。</p><p>“尊号不敢当，江湖人抬举我这老骨头，叫我老刀。”老者顿了一下，便又举步离去。</p><p>“老刀！”胖子看着他们的背影消失在夜色下，喃喃自语，脸色凝重。</p><p>而后，转身骑上那头小毛驴，一夹驴身。那小毛驴一扬驴头，箭步如飞，朝都城奔去，竟比那骏马还跑得快，只留下一地的烟尘，转眼便已经看不见身影了。</p><h4 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h4><p>黑水城，毗邻荒漠，是古道上唯一的一座石城，同时也是扼守着关内与关外的重要通道。城墙皆为一块块一丈见方，重达数吨的黑石堆砌而成，紧密无隙，高十丈，厚五丈，承载了数百年的战乱和历史的沧桑，城墙上满是裂痕，尤其引人注目的是西面墙上那一道长达十丈，深近一丈的裂痕，那是剑的印记！传说乃是剑神一笑，一剑之威所致，每年都有许多剑客慕名来揣摩剑意。</p><p>剑，自古便被誉为百兵之君，王者之兵，那些剑客也往往出身名门王侯，或是大家之后，压根看不起在那些刀尖上舔血的刀客。而一些好事者也暗中拉拢，逐渐中原武林形成刀域还有剑门两大组织，刀客向来以关外的刀客见长，剑客则以中原武林的十大名剑家族为首。双方互相牵制，势如水火。</p><p> 但是，无论是剑客，还是刀客，没有人敢在黑水城内撒野，因为一个人，一个很有钱很有势的人，这样的人，往往很多人得罪不起，得罪得起的又往往不想得罪。公孙小白，无疑就是这样的人，因为黑水城历代都是由公孙家族所管辖的。</p><p>传说公孙家族的府内池子中都是美酒，树上都挂着金银珠宝，每一个丫鬟都有闭月之容，羞花之色，而且穿着打扮精细，据说一身的装束足够寻常百姓滋润地过上一辈子了。而公孙小白只有区区二十来岁，却已经是如今公孙家族的家主，所以也被叫做公子小白。</p><p>这样的人，并不是一般人可以认识的，而且还能一起喝酒聊天的人显然更不一般。而此时，同公孙小白喝酒聊天的只有一个人，一个屁股下要垫五张椅子才能勉强没坐到地上的胖子，而这个胖子便是古道上那个骑驴的胖子。</p><p>“老刀，刀域的那个老刀？”公子小白浅抿一口小酒，淡淡地问道。</p><p>“嗯，应该是那个老家伙。”胖子直接捧起一个大酒壶，咕咕喝了好几口酒。</p><p>“老刀出身不明，传言是刀域幕后的主事者之一，你觉得他的修为到达何等地步？”公子小白问道。</p><p>“深不可测，但是令我奇怪的是老刀的手，很光洁，完全看不出握刀的痕迹，恰恰相反更像是一名修习多年的剑客。”胖子疑惑道。</p><p>“哦，莫非你怀疑老刀是剑门混入刀域的奸细？”公子小白略带惊异。</p><p>“不，刀域中不乏能人，比如</p><p>“哈哈，那他们倒没有找错人，这世界如果连八爷都拿不到的东西那就没有人能拿到了。”</p><p>“少说风凉话，你也不是不知道那把刀的可怕！如今老刀出面想来是对那把刀志在必得，而中原剑门也绝不会坐看着刀域得到那把断刀。”</p><p>“呵呵，管他呢？我们公孙家族从不参合江湖上的琐事，只不过这边塞之地倒是刀剑纷争之地，我已经隐隐约约闻到黑水城上空弥漫着血腥味了。”公子小白浅笑道，似乎对此不屑一顾。“</p>]]></content>
      
      
      <categories>
          
          <category> store </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武侠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大荒</title>
      <link href="2020/10/27/store/%E5%A4%A7%E8%8D%92/"/>
      <url>2020/10/27/store/%E5%A4%A7%E8%8D%92/</url>
      
        <content type="html"><![CDATA[<p>  一间石室，一盏烛光，映着一个沧桑萧索的身影。四周一片寂黑，仿佛连时间都已经停止。唯有那晕冷的烛光，轻轻摇曳，不知何时便会幻灭于天地之间，如同那萧索的身影何时便会被这黑暗吞噬消陨。</p><a id="more"></a><h4 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h4><p>一间石室，一盏烛光，映着一个沧桑萧索的身影。四周一片寂黑，仿佛连时间都已经停止。唯有那晕冷的烛光，轻轻摇曳，不知何时便会幻灭于天地之间，如同那萧索的身影何时便会被这黑暗吞噬消陨。</p><p>“十年了，樱，当年你为何如此？要我的命，只要你一句话，何必用一身鲜血化与魂魄作这天地牢笼呢？哈哈哈哈···”，那枯寂的身影不禁苦笑起来，“还是，你从来都不曾爱过我呢？”那身影忽的沉默下去，“或许，当年，我真的做错了吧，樱，你为什么这么傻呢，来世我一定会握紧你的手，直到最后一颗星辰陨落···”</p><p>石室再次陷入一片空寂，那烛光却更加微弱，那个人或许心真的死了吧，热血的青春，年少轻狂的青葱岁月终已被时光一层层剥落，失去的永远都回不来了，今生不可能再次握紧她的手，于是他，终究选择将自己永远的锁在这暗无天日的天地牢笼中，希冀脱离她的生命轨迹，她会有一个新的人生开始，然而一切会照他的意愿下去吗？谁又能真的挣脱出交织着爱与恨的命运牢笼呢？</p><p>龙冢，传说轩辕大帝留下的神龙尸体所化，绵延千里，隐于龙家后山之中，是龙家的密地，传说里面有一个蕴藏着龙血的池子，名为化龙池，每一代龙家子弟中只有二十岁前达到灵境的天才才能踏入血池，脱胎换骨，洗净凡尘，有的甚至可以一举踏入化境，当真的鲤鱼跃龙门，成为人中龙凤。</p><p>今日又是十年一次的开启龙冢的日子了，如今竟有十人之多，十年前只有我与阿樱两人啊，呵呵，阿樱，你恨我吗？</p><p>龙傲，一身黑袍，绣着一只栩栩如生的黑龙，透着一股凌人的气势，不经意间从眉间流过一丝的无奈与伤感，此刻，他，仰望着苍穹，那天边的云彩真的很美，放佛是你，阿樱，我的妹妹，你，此刻，正在天际看着我吗？他，不禁痴了。</p><p>“龙傲哥哥，你想什么呢？”，一声清脆的声音在耳边响起，将他从遐想中唤回。</p><p>“是龙鹤啊，呵呵”，龙傲笑着摸了摸龙鹤的脑袋，“你还小，不懂的。”</p><p>“我都十六了，不是小孩子了.”龙鹤不满地嘟着小嘴，说不出的可爱，“你，在想龙樱姐姐是不？都十年了，你还忘不了她吗？”。</p><p>他，有些疑惑地看着龙鹤，的确，当初整天跟着自己屁股转的小屁孩，如今，也已经长成亭亭玉立的少女了，明眸皓齿，淡眉秋水，肩若削成，腰如约素，仿佛兮若轻云之蔽月，飘摇兮若流风之回雪。</p><p>依稀已经有你昨日的影子了，阿樱。“唉，走吧，龙鹤，洞门要开启了。”，龙傲叹息一声，一挥袖袍，凛然有股龙气蔓延，自顾自地大步地朝前方走去。</p><p>留下一脸委屈的龙鹤，哀怨看着龙傲离去的身影，泪水忍不住溢满了眼眶，“走吧，洞门开启了，小鹤。”忽的肩边被人轻轻地拍了拍，只见龙云一脸关切地看着自己，</p><p>“哇–”龙鹤忍不住扑到龙云的怀里，哭了出来，“为什么，小云，我拼命地修炼，就是为了成为像樱姐姐那样，可以陪在龙傲哥哥身边，都十年了，为何他还忘不了樱姐姐呢？”</p><p>龙云怜惜地拍了拍龙鹤的背部，看着她雨打梨花，泪雨阑珊，心里不禁有一股痛意与恨意交织成飓风，仿是要把自己的身体硬生生地撕成两半，龙傲，你怎么忍心？</p><p>龙云望着龙傲远去的身影，眼里一丝冰冷的寒芒掠过。小鹤，我们两个从小青梅竹马，两小无猜，我一直深爱着你啊，为什么你都没有察觉呢？哼，龙傲，总有一天，我会打败你的，等着吧，我才是家族年轻一代的最强者。</p><p> 绵延的洞穴，竟没有一丝黑暗，散发着乳白色的光芒，或许真的是传说中的龙之骨吧，龙傲缓缓地走着。他前面同样是一个穿着黑袍的人，无形中透着一股威严，便是当代龙家的家主龙越。</p><p>他有一对子女，十年前，进入化龙池，都一举进入化境，成为当时家族的人中龙凤。</p><p>然而，也是在十年前，他心爱的女儿便从此离他而去，白发人送黑发人，虽然修为直逼涅境，但是也因过度悲伤，两鬓都已苍白，或许苍老得更多的是心吧。</p><p>阿樱，奈何为父，一身修为，却依然救不了你啊。十年了，你是不是还怪为父当年棒打鸳鸯呢？但为父，不得不这么做啊，这不仅是事关家族的血脉传承，而是，叶尘，他竟然得到了上古魔神蚩尤的传承啊。</p><p>  这些都是族典记载的，只有长老与族长才能知晓。五千年前，蚩尤乱天下之德，先祖黄帝联合炎帝，战蚩尤于夷州之野，斩之，蚩尤首级化为枫树林。</p><p>虽然先祖黄帝炼蚩尤魔力打开星空之门，并将九黎族遗民封进逆乱空间，然而蚩尤毕竟是一代战神，旷世兵主，</p><p>其魔性与少许魔力仍然交织于天地之间，等待着有缘人的传承，期待着重生。</p><p>阿樱啊，当初你陷入爱河，不顾家族长老反对，将叶尘带回家族，为父，只有你这么一个女儿，本意想抗住家族那些老家伙的压力，成全你们。</p><p>然而，当时，我发现叶尘的额间有隐隐的闪电印记，那一瞬间，我，终于明白了，为何，你，一代天之骄女，竟会对凡世的人动了情，原来，那是魔性的力量啊，那种魔性的美，像漩涡一般，连你也深陷其中啊。 </p><p>阿樱，我看得出，他，叶尘，也是深爱着你的，但是，为父，却不得不那么做。魔性的力量，谁能掌控得了呢？</p><p>呵呵，叶尘，当初还是个腼腆的大男孩吧，看见我，头低低的，还会脸红，唉，谁让他，得到那种力量呢？或许这，便是宿命吧，谁又能挣脱出宿命的束缚呢？我们家族隐于这个世界五千余载，也是为了维持这个世界的稳定啊。</p><p>五千余载，有不少人得到了蚩尤的力量，但最后都无法掌控啊，而成了暴君，如最先的千古一帝秦始皇和几百年前的希特勒，都成了蚩尤的祭品，乱天下之德，致天下苍生于水火之中，所以我们家族不得不出手啊。</p><p>然而延绵数千年的魔的力量依旧是那么强大，我们家族都无法力抗，只能联合天下有志之士共抗之，无尽凡人的愿力集结起来力量是连我们都忌惮三分啊，所以才能一次又一次地扼住魔神的力量啊。</p><p>而且，这五千年来，这片土地上又诞生了多少旷世奇才啊，有的竟然能突破了涅境，到达了圣境，更是创出了属于自己的法则，如当年的佛陀，这片天地太小了，于是他们选择横渡星空，寻觅未知的世界，当时我们的一些祖先也跟他们一起去探索，最终却没有一个归来，或许早已迷失在浩渺的星空吧。</p><p>  五千年前，先祖黄帝带领强大的族人战士进入了星空之门，百年后回来，传下了轩辕诀，以及诉及那个叫做大荒的传奇世界境界的划分，便再次进入星空之门，因为那个世界正爆发着旷世的战争，先祖黄帝便封印了星空之门，从此再也没有回来。</p><p>也由此，来自先祖的血脉也越来越稀薄，五千年来，只有十个人突破涅境，圣境竟没有一个，更何况是那传说的虚境与飘渺的通天境界，要知道当初随先祖进入星空之门的，最低境界都在涅境啊，境界的降低，寿命也跟着减少。</p><p>奈何为父自认为天纵横才，也只在帝境九重天徘徊，现今，家族中也只有太上长老龙延达到涅境，那老家活可是活了一千年两百岁了，如果三百年内没能进入圣境，那么这辈子也到头了吧。而，残余的魔的力量竟是直逼圣境。</p><p>所以，叶尘必须死，如果让他激发蚩尤的血脉力量，一旦他无法掌控，天下又该有多少生灵涂炭呢？</p><p>而且，他当时已经有被魔性控住的倾向了，我曾问他，如何看待，当年秦帝的做法。他答，秦帝实乃千古一帝，振长策而御宇内，吞二周而亡诸侯，履至尊而治六合，执敲扑而鞭笞天下，何等威风，何等气概，晚辈十分敬仰。</p><p>我又问其，不觉秦帝做法有些残暴吗？</p><p>他答，成王败寇，弱肉强食，本就是这个世界不二的法则，当年，诸侯纷争，割据一方，天下苍生，置于水火，秦帝拯天下苍生于水火，扶大厦于将倾，又有何残暴可言。再者，为了成王立帝，屠戮千万又如何呢？弱者永远只能成为强者的垫脚石，又有何可怜惜的呢？</p><p>由此可知，叶尘，他淳朴的外表下面，隐藏着多么庞大的野心和多么强大的毁灭的力量啊，一旦，他内心的野兽释放出来，又有谁能抗衡得了呢？于是，我果断出手，想要废了他一身的修为，然而，我还是太低估了他的实力了，魔神的传承力量果然恐怖。最终，还是让他负伤而逃。</p><p>你不解为父，竟欲离家出走，寻觅他，无奈，我只好将你拘禁在家，率领几大长老，追杀叶尘，然而却再也找不到他的影踪。</p><p>莫道不销魂，帘卷西风，人比黄花瘦，看着你，日渐消沉，魂不附体，为父实在很痛心。想不到，你对他，用情竟是如此之深，甚至连你哥哥傲儿都不理了。为父知道当初你求他私自放你出去，他不答应。你怪他是不？</p><p>其实，傲儿并非我的亲生儿子。</p><p>五千年前，先祖黄帝遗留下一具神龙的尸体，化为如今的龙冢，龙冢中的血池，也便是如今的化龙池，四千年前孕育出一株青莲。三千年前青莲绽放出第一朵莲花，散发出的神力波动甚是恐怖，十丈之内，寂灭空虚，当时，修为直逼虚境的龙道长老竟被直接化掉半身神力，直接降到涅境。化龙池中的龙血也日渐稀薄，龙血的精气都被那一株青莲所吸收。</p><p>对此，历代长老，想了种种办法，都无可奈何，而那一株青莲也日趋内敛，苍翠，如碧玉一般晶莹，婷婷净植于血池中。</p><p>此后每一千年绽放出一朵莲花，但再也没有散发出恐怖的神力。三十年前，那株青莲竟化为一个婴孩，竟也不哭，而是哈哈大笑，那便是你哥哥龙傲了。</p><p>当时所有闭关的长老都被惊动了，最终决定由我将其抚养长大，因为所有人都知道，那个婴孩绝非池中之物，他日必将化龙归去，突破那飘渺的通天之境，真正的凌驾于九天之上，甚至可以达到先祖的境界。</p><p>龙延长老更是希望，等婴孩长大后，与族内的天赋异秉的少女结合，看是否能改善日益稀薄的先祖血脉。</p><p>然而，不知为何，傲儿长大后，虽然也表现惊人，但却没有表现出可以跟其来历相匹配的天赋，让族内长老大为失望，龙延长老推测傲儿体内可能有一道霸道的封印，束缚了他所应该具有的潜能。</p><p>自小，傲儿，跟你青梅竹马，你也一直视傲儿为兄长，但是，傲儿对你，却并不只是兄长对妹妹怜爱之情，相反更有一种淡淡的爱意，但是，你却从来没有发现。</p><p>当你将叶尘带回家，虽然他仍在你面前露出灿烂的笑容，好像依旧是那个阳光的哥哥，但我却发现这笑容之后，更多的是苦涩与心伤吧。</p><p>当初，他拒绝放你出去，也是为了你好啊。本来，我都打算将你嫁给他呢？奈何，半路跳出一个叶尘呢？或许，这真的是宿命吧，我们都是宿命的囚徒吧。</p><p> 你最后直接将自己闭进死关，整整三年啊，如果没有听到叶尘的消息，你是否会一直沉寂下去，直到生命的尽头呢？</p><p>是的，叶尘归来了，带着足以使这片土地化为灰烬的力量，蚩尤残余的力量在他体内仿佛彻底复苏了，竟然达到了圣境，更是带来了整整三百万如狼似虎的铁血军队，或许这就是兵主的力量吧，并状告天下，顺他者昌，逆他者亡，三日之后，如敢不屈服的，死。</p><p>当初，四国岛的黑龙将军最为傲气，率先提出不服，结果，一夜之间，四国岛八千万生灵尽数被屠戮殆尽，尸横遍野，血流成河，那日，四国岛的上空浮起了一朵巨大的血色云多，更是整整下了一礼拜的血雨，从此，四国岛方圆百里，沦为死域，夜晚不时传出凄厉的惨叫声，许多船只误入其中，便再也没有出来过。</p><p>当初，四国岛是多么美的地方，阳春三月，岛上盛开着繁茂的樱花，然而，一切都让他毁了，魔性已经彻底控制了他的思想，他，最终步了当年秦帝的后尘，成为了冰冷的杀戮的兵器。</p><p>你也很难以想象吧，本来因为心爱的人到来，而破关而出，谁也想不到你竟然达到了帝境，你更想不到的是心爱的人竟然便成了手沾鲜血的恶魔，当时那场大战，为父至今仍记忆犹新啊。</p><p>如果没有你的到来，或许，这个世界真的已经被他掌控了吧。魔神的力量，实在可怕啊，而凡人总是可笑的认为自己，可以掌控得了魔的力量，却不必为此付出任何代价。</p><p>叶尘，也是如此，却没想到换来的是你的香消玉殒。</p><p>我也没想到，你的脾气跟当初你娘亲一样，竟然如此的毅然决然。我，还清晰地记得，当时叶尘看见你，是何等的惊喜啊，想不到回应他的会是长剑贯胸。</p><p>当时，连我都惊呆了，更何况是叶尘啊，只见他呆呆地着看着你泪流满面，但还是坚决地将利剑一点一点地推进他的胸膛，神情由最初的惊喜到困惑再到委屈，最后像孩子一般嚎啕大哭起来，竟直接将你紧紧地抱住，那柄利剑也彻底的插进他的胸膛，但他却浑然不觉，任那鲜血肆意流淌，口中喃喃到：阿樱，为什么，这到底是为了</p><p>什么···</p><p>只见你摸了摸叶尘的脸庞，吻了吻他淌着泪的眼，叹息道：小尘，你做错事了，你知道吗？不要怕，今生我会陪着你的，别了，小尘。说完，你竟然拔出利剑反插进自己胸膛，大喝道：葬！</p><p>那一刻时间放佛已经停止了，所有人都惊呆了，那可是血咒啊，你不惜以一身鲜血与魂魄化作天地牢笼，锁住了叶尘。</p><p>叶尘，笑了，看着你一身白衣带血从天际飘落下来，那种凄凉的美是那么的令人震撼与动容，你哥哥傲儿接住了你，但你那时已经没有了生气，只有胸前盛开着一朵妖娆的血花，嘴角却带着一丝淡淡的幸福的笑意，或许你认为这是最好的归宿吧。</p><p>“哈哈哈哈···”，叶尘凄凉的笑声响彻天地，“阿樱啊”，突然，他沉默了下去，转头看着我，绝望又疲惫。</p><p>“你当年，为何对我痛下杀手！是认为我一个凡尘之人，配不上阿樱吗？”。我摇头叹道：不是。便向他诉说了魔神蚩尤的传说。</p><p>“魔，是吗？这个印记？！”，只见他竟用左手直接将额头上的皮肤撕下，鲜血淌满了他的脸庞，那种魔性的美是那么的惊心动魄，惨烈迷人。然而，那个闪电的印记依旧深深地嵌在他的额头上，散发着妖异的光芒。</p><p>“呵呵，还真顽固的啊，当初以为捡到了宝，想不到却招了一只恶魔上身，怎样除了它，需要我的命吗？”，叶尘笑道。</p><p>“没用的，杀了你，魔的力量便会消散在天地之间，寻找下任寄主，以我们现在的力量只能封印它，而无法消灭它。”我摇头叹道。</p><p>“那么，就让它永远囚进我的身体吧！阿樱，我又怎么会让你做得一切白费呢？” ，叶尘苦涩地笑了笑，“来吧，彻底封印我吧！”。最终，叶尘被封禁在龙冢下的封魔阵中。</p><p>那一刻，我明白了，是我们太高估魔的力量，而低估了人心所具有的力量，叶尘，对你那种疯狂的爱竟然连魔也无能为力啊！否则，仅凭天地牢笼又岂能束缚得了魔的力量呢？</p><p>而，如今，我却要借用这魔的力量，然道说这一开始就是个错误吗？是上苍对我们这些卑微的人开的玩笑，还是我们人自己自欺欺人呢？</p><p>“哈哈哈哈···”龙越突然大笑起来，龙傲脸上掠过一丝诧异，自从阿樱死后，父亲再也不曾如此爽然地笑过。</p><p>然道真的需要借用魔的力量吗？那些奇怪的东西是从哪儿冒出来的呢？而石牢那个人，如今又该是何种模样呢？十年了，他对阿樱的爱还是不曾改变吗？</p><p>龙傲摇了摇头。</p><p>前方便是化龙池了，不知为何每次到这里，总有一种莫名的情绪，那种血肉相连的感觉，真的好奇怪。</p><h4 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h4><p>龙冢，血池.</p><p>龙的血液似乎从没有因为岁月而褪色，在那十丈见方的池子中，妖艳而耀眼，如同一颗绚丽的红宝石，释放出夺目的色彩，辉映交织，如同梦幻一般。</p><p>那些年轻人平日里都是闭关修炼，哪见过此等景象，此刻不禁好奇地打量着血池。奇妙的是，血池竟丝毫没有一丝令人作呕的血腥味，反而有一种淡淡的馨香，使人闻之心旷神怡，竟想要立刻扑上去一吻芳泽，来个肌肤之亲。</p><p>而龙傲，感触最深，站在血池边，全身鲜血竟似乎要沸腾起来，他觉得自己对血池中的龙血竟有着一种来自骨子里的莫名的亲切感，仿佛那就是自己体内流的血似的，他，甚至认为自己竟可以掌控这血池的力量.</p><p>这不禁让他想起十年前，第一次进入血池时，那血池里的龙血竟然沸腾起来，拼命地闯进自己的身体之中，而自己竟没有一丝不适，反而觉得异常舒服。</p><p>倘若没有龙延长老制止的话，龙傲甚至认为自己可以吸收掉整池的龙血！</p><p>龙血是不可再生的，五千年前，血池有将近百丈见方，而如今，只剩十丈见方了。</p><p>这个世界，如今已没有龙的存在，就算有龙的存在，龙家也没有自大到可以屠掉一只龙.</p><p>那种传说只存在上古神话时代的强大的生物，实力已超脱了境界的界限，甚至在通天境界之上，也不知道当初黄帝在哪里得到那具龙尸，是自己屠杀的吗？又为何留下来？无人知晓，或许这只能到那个叫做大荒的传奇世界才能得到答案。</p><p>所以，龙血异常珍贵，为了家族的发展，龙血不可能让龙傲全部吸收的。</p><p>  此时，血池对面，盘坐着一个人，披着一件黑袍，看不清楚模样，仿佛亘古便打坐在那里，好似与石洞融为了一体，身上感受不到半丝生命的气息，然而却隐隐透着一种势的力量，竟让人不敢直视。</p><p>他便是龙家大长老龙延，龙家唯一一个达到涅境的人，甚至已经直逼圣境，在龙家地位崇高，负责看守龙冢和那个人。</p><p>“呵呵，转眼十年已过，弹指一挥间啊，如今族内年轻一代人才辈出，吾大感欣慰啊！”，龙延睁开双眼，环视一下四周，他的目光是那么的柔和，让人一眼便看到了彼岸，给人一种积极向上的力量。</p><p>接着，他站了起来，尘土从他身上纷纷洒洒落下，露出了一张苍老的面孔，那种历经岁月的沧桑感，让每个人的心都宁静下来。</p><p>“年轻的小家伙们，好好努力吧，你们人生的路还长着呢？现在，都下血池吧，能吸收多少龙血的力量，就看你们的造化了，龙血很霸道，适可而止。”老者一挥袍子，所有的年轻一辈都掉进了血池，有的不禁“啊”的叫了一声，那滋味如同被绑在火上烤似的，但之后他们都咬紧牙关拼命吸收龙血的力量，毕竟这种机会一生可能只有一次。</p><p>龙延欣慰地看了下年轻的一辈，走到龙越与龙傲身边，低声道：“你们跟我来吧。”</p><p>接着穿过血池，进入一个只有一人高的洞穴。龙越与龙傲一前一后也进入了那个洞穴。</p><p>“小越，不错啊，已达到帝境九重天大圆满了，进入涅境只是时间问题了，傲儿也还行，也有了帝境三重天的境界了。但还是要努力，知道不？”龙延看了看他们父子。</p><p>“龙傲，谨遵大长老的教诲。”龙傲向龙延拱了拱手。</p><p>“这些世俗的东西，免了吧，谈正事，族长，你真的要借用魔的力量吗？”龙延严肃地盯着龙越，带着一种绝对的威严，“谁也不知道，叶尘是否还是十年前那个为了阿樱甘愿被封的叶尘，再者，真的解开天地牢笼的束缚，释放出魔，你能保证叶尘不再被魔所控制吗？”</p><p>龙越直视大长老的目光，没有一丝退让，斩钉截铁道：“我们没有别的办法，你也感受得到，来自外太空那股敌意是多么的强大，绝对不低于圣境！</p><p>而且，一礼拜前，他的前锋队，虽然都被我们毁灭，但那恐怖的铠甲竟无视任何化境之下的攻击，而从那光枪中释放的能量竟也堪比化境。而且那些只是橙色的机甲，而那领头的黄色机甲竟堪比帝境，谁也不知道后面真正的主战力会是多么庞大？！我们只能赌，我们没有退路！”</p><p>“好吧，你是族长，一切由你定夺吧。”龙延走到洞最里面，掏出一把钥匙插进了墙壁，转动了一下，便拔了出来，片刻后，只听“轰”的一声，墙壁竟然裂开了，等他们三人进去后，墙壁重新合上，光滑无比，没有一丝痕迹。</p><p>那条密道很窄，只能容纳一个人通过，但并不阴深，密道上方的墙壁上每隔五十米镶嵌着一颗硕大的夜明珠，散发着柔和的淡绿色的光芒。</p><p>那条密道很深，但也很直，三个人不约而同地保持着缄默，默默地走着没有人知道密道的尽头究竟是什么？叶尘吗？亦或是魔！这是一场赌博，一场无法预知结果的赌博！</p><p>密道很静，只能听到脚步声由近及远消失在密道尽头。</p><p> 过了半个多钟头，密道尽头，石门伫立，给人一种厚重感与沧桑感。</p><p>龙延，深吸一口气，两掌从丹田托起，然后合在一起，手掌中闪现出一黄色的光芒，分开，出来一颗龙头，按在石门上那个龙头锁上，喝道：“破！”，只听“轰”的一声，石门打开了，一盏残烛忽地亮了一下，散发着极其微弱的光芒，放佛随时便又会熄灭。</p><p>“咳咳，想不到还有人会到这里来，咦？是你。”一个苍老的声音迎面扑来，他们三人都被眼前的景象惊呆了，只见一个白发苍苍的老者盘坐在石床上，骨瘦如柴，放佛只有一张皮披在骨架上，原本俊俏的脸竟然布满了皱纹。</p><p>看来十年岁月在这个年轻人刻下了多么深的痕迹啊，看上去竟然比龙延还苍老，或许是心已经彻底死了吧，对生已经没有了任何的眷恋吧。</p><p>“我们需要借用你的力量，有外来者入侵地球，希望你能出手！看在阿樱的面子上！”龙越向叶尘俯身拱了下手。</p><p>“咳咳，我受不起这么大的礼，再说，我这把生锈的老骨头，连炮灰都不过格吧。”叶尘淡淡地说道，除了听到“阿樱”时面部有一丝黯然的神色。</p><p>“我可以为你解开天地牢笼的封印！”龙越直视叶尘。</p><p>然而叶尘并没有任何的惊讶之色，而是淡淡地说道：“是吗？已经到了山穷水尽的地步吗？那，就让我这将死之躯再为阿樱做点事吧。”</p><p>“傲儿，玉瓶！”只见龙越朝龙傲喝了一声，便口中默念着咒语，右手的食指与中指合并，发出耀眼的金黄色的火焰，点向叶尘额头那只剩一点残痕的闪电印记，口中喝道:“现！”</p><p>而几乎同时，龙傲拿出了一个晶莹剔透的玉瓶，身体竟然有些抑制不住的颤抖。</p><p>只见叶尘周围突然出现了一些灰色与血交织的网将叶尘紧紧包住，那便是天地牢笼了。</p><p>此时，龙越的手指竟然也有一丝颤抖，接着喝道：“破！”</p><p>只见那天地牢笼渐渐破碎，紧跟着绕着叶尘转了三圈，然后拂过叶尘那苍老的脸庞，进入了那个玉瓶之中，随即龙傲塞上瓶塞。</p><p>“阿樱，是你吗？”叶尘看着那灰色的烟雾渐渐的消失，身体颤抖着，泪水已经在脸上纵横。</p><p>“是的，那是阿樱的魂魄，阿樱，还有救！”，龙越看着叶尘叹息地说道：“不过，得达到通天境界，才能有如此神通。不过传闻当初九黎族有种还魂异术，可惜被先祖封进了逆乱空间。”</p><p>“有希望就行，不过不知我是否可以看到阿樱复活的那天吗？”，叶尘站了起来，不知是对自己还是对龙越叹道,“人生如梦，十年前，往事历历在目，仿若昨日，走吧，让我最后一眼看看阿樱吧。”言毕，穿过龙越身边，朝密道外走去。</p><p>虽然声音听上去依旧那么沧桑，容貌依旧那么苍老，但是那单薄破败的身躯中，似乎有什么在呐喊，在愤怒地嘶吼着，魔的力量，终已渐渐觉醒，无形中透出的力量连龙延都为之动容。</p><p>怎么可能，禁闭十年，他的力量仿佛比十年之前还来得强大！龙越与龙延对视了一眼，眼中有欣喜也有担忧，随即叹息一声也朝密道外走去。</p><p>龙傲紧跟其后，但他的注意力始终在那玉瓶之上，轻柔地抚摸着玉瓶，口中喃喃道：“阿樱”，一滴泪水从他眼睛中滴落，掉在玉瓶之上，发出细微的清脆的响声，随即滑落到地面，渗进地面。龙越回头看了龙傲一眼，随即目光落到玉瓶之上，叹息一声，便又走了。 </p><p>血池中，只剩下两个身影还在苦苦坚持，一个是龙鹤，另一个是龙云。但是龙鹤似乎已经到了极限，虽然咬紧牙关，苦苦坚持，但是身躯却是止不住的颤抖，却竟是昏厥了过去。</p><p>龙延赶紧将龙鹤从血池中带了出来，左掌按在她的背上按抚着她体内那四处乱窜的龙血霸道的力量，龙鹤的苍白如纸的脸色也渐渐红润起来。</p><p>而龙云，仍然尚有余力，全身竟然发出金黄色的光芒。</p><p>“此子，天赋极佳，竟然可以直接突破到化境。”龙延赞赏地看着龙云，捋了捋长长的白胡须。</p><p>片刻后，龙云跃上血池，向龙延拱了拱手，担忧地看着龙鹤，向龙延问道：“小鹤，没事吧？”</p><p>“她，只是太好强了，强行吸收龙血，被霸道的龙血力量所反噬，如今已没大碍.不用担心，小云，你的天赋极佳，但是天道酬勤，还要多努力，知道不？”</p><p>“是，大长老，晚辈一定不忘前辈教诲。”龙云向龙延拜了一下，便走到龙鹤身边。</p><p>路过一个老者身边，那个老者身体羸弱，仿佛一阵风便可以将他吹倒，但是龙云在他身旁竟感到连在大长老龙延身边都没有的紧迫感与危机感，那家伙是谁？从没有见过，是家族中的长老吗？龙云疑惑地想着。</p><p>呵呵，想不到龙家中竟也有人有如此强大的黑暗心灵，那倒是魔最好的栖息所啊。算了，这些，又与自己有什么关系呢？叶尘抬头望着石室上空，目光穿过了石壁，穿过了地球的大气层，那遥远的星空所传来的战意越来越明显了，不用三天便能到达地球吧。</p><p>那股战意竟然那么强大，连拥有者魔的力量的他竟然有一丝的战栗，他仿佛看到那青色光辉中，睁开了一双冰冷的双眼，似乎天生只为杀戮而生的，带着嗜血的妖异的光芒，盯着他，仿佛看着一只将要被撕碎的小东西。</p><p>哼，真的把我当成案板上的肉吗？纵然死，你也要付出不菲的代价。呵呵，看来得动用当年遗留下来的两大杀阵了，阿樱，看来，今生终是与你错过了，能见你最后一面，我也满足了。</p><p>“走吧。带我见见阿樱吧。”叶尘看了龙越一眼，当年他硬生生地拆散他与阿樱，然而他却是阿樱的亲生父亲，自己竟然都恨他不起来。</p><p>或许，将一切画上一个圆满的句号，地狱，便是自己此生最好的归宿吧。</p><p> 龙冢出来向北，有一条蜿蜒的小路，行走大约半个钟头，便能看到一片樱花林。</p><p>如今正值阳春三月，正是樱花烂漫时，然而已有的樱花开始零落了，飘飘洒洒，说不出的凄美婉约。</p><p>樱花生命很短暂，曾有一民谚说：“樱花7日”，就是一朵樱花从开放到凋谢大约为7天，整棵樱花树从开花到全谢大约16天左右,形成樱花边开便落的奇特景象。</p><p>也正是樱花这种经历短暂的绽放便在一生中最美的时刻随即凋零，化作那漫天的飘洒的花雨，让龙越这爱花之人深深为之着迷，因此便为女儿取了龙樱这个名字，也在后山这沉寂着龙家英魂之地栽下这一片繁茂的樱树林。</p><p>花谢花飞花满天，红消香断有谁怜？</p><p>叶尘望着这漫天飞舞的樱花，不禁痴了。</p><p>阿樱，当初你我相遇于四国岛的樱花林，你就像这樱花一般，淡若出尘，白衣翩翩，仿若九天的仙女一般，让我深深地着迷。</p><p>而如今，那四国岛却因为当年我的一时气盛，而沦为一片死域，整整八千万生灵啊，现在，我都能听到那些怨灵在拼命地嘶吼着，恨不得喝了我的血，吃了我的肉啊。</p><p>的确，被我封禁了整整十年，八千万怨灵的怨念该变得多么庞大了？呵呵，越庞大越好，或许是时候给他们一个交代了。</p><p>阿樱，你说得对，这一生，我做错了太多事，不知能否弥补得了呢？</p><p>叶尘进入陵墓已经三日了了，只是默默地注视着身处冰棺里的龙樱，并没有说一句话，眼里饱含着深深地眷恋与伤痛，一动不动的，如同一尊雕像一般。</p><p>龙傲也守在不远处，看着叶尘那单薄的身影，蓦地生出一种无奈与悲哀，他能感到那个男人身躯中流露出的伤感，他不知道自己是不是应该恨叶尘，如果没有叶尘，或许阿樱便不会死吧。</p><p>但是同时，不知怎的，他对那个男人竟有一丝的佩服，阿樱，或许，他真的值得你爱吧。龙傲无奈的耸耸肩，不觉得有一种苦涩感。</p><p>阿樱，我一定会突破那通天之境，使你复活，这只是哥哥对妹妹的承诺。龙傲在心底默默说道。</p><p> 突然，天际传来一股浩荡的威压，霎那间，整个天空黑云密布，遮得严严实实。“呵呵，该来的总是要来的。”，叶尘站了起来，走过来，拍了拍龙傲的肩膀，“好好照顾阿樱。外面的交给我吧。”</p><p>“你放心，我不会让任何人打扰到我妹妹的，除非我死！”龙傲斩钉截铁道。</p><p>叶尘深深地看了看龙傲，龙傲也毫不回避他的目光。</p><p>忽的两人都哈哈大笑起来。</p><p>“走啦。”说完，叶尘身影消失在门口。</p><p>“保重。”龙傲淡淡得说道，也不知道叶尘是否能听到，更不知道他是否能活着回来，不禁内心有种悲戚感，竟对叶尘感到惜惜相怜起来，更有一种相见恨晚的情绪。</p><p>不知，我能为他做什么，然道只在这里等着吗？或许，我一直都那么无能为力吧！龙傲握紧双拳，突然感到体内血液竟然沸腾了起来，竟然想把他带到龙冢那里去。</p><p>而此时，庞大的龙冢竟然有一丝的颤动。</p><p>不过，此时，除了年轻一辈，龙家化境以上的强者都飞上了天空，没有人察觉到。龙家化境以上的强者有将近五百人，其中更有五十人达到了帝境，再加上达到涅境的龙延，的确是一股庞大的战斗力，毕竟五千年的底蕴也不是说笑的。</p><p>沧海龙战血玄黄，谁都知道这一场战役会是多么的惨烈，谁都无法预知自己是否能够活下来，但是没有一个人退缩，因为他们知道，在他们脚下，有他们要守候的东西，哪怕为之失去生命。</p><p>  雨，忽然下了起来，淅淅沥沥。</p><p>战斗终于要打响了吗？</p><p>叶尘，看着前方天际，握紧了拳头，眼里透着一股冷意···</p><h4 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h4><p>近了，更近了，就像一只洪荒猛兽，嘶吼着，咆哮着，恐怖的气息席卷了整片星球。</p><p>所有人都感到战栗，不安。</p><p>但是，所有的普通民众都已被撤离到安全的区域，因为三天前，联合国突然发布了全球预警的信号，发现外星人入侵地球。</p><p>而也就是在三天前，所有原本水火不容的，互相觊觎领土的，甚至正在开战的国家都暂时摒弃前嫌，联合在了一起，调动着庞大的军队，集合全部的军事力量，海陆空联合部署，在安全区域四周建立起了一道坚固的防线，一道由血与肉，钢与铁组成的坚固防线。</p><p>军人，战士，甚至是普通的群众都拿起了手中的武器。</p><p>的确，他们害怕，他们恐惧，但是他们依旧一脸的坚强与决然，不仅是因为这是生他们养他们的星球，更是因为在这个可爱的星球上面，生存着他们爱的人，以及爱他们的人，包括他们的朋友，亲人，初恋情人，甚至是落寞时一个给予微笑的陌生人。</p><p>这个星球装满了他们太多太多的爱与感动，这种爱与感动是他们即使失去生命也要守候的东西，也正是这种守候的力量可以瞬间给予一个懦弱的人无穷的勇气与决心，这也是人类最高贵的东西！</p><p>人性的伟大，在灾难面前显露无遗，也因此人类这种卑微缈小的物种才能一次一次的在大自然的选择之下，继续顽强地走下去，而不被淘汰，退出历史的舞台。</p><p> 这次全军的总指挥是华夏古国的司令，叫做胡一筒，不知是年轻时用脑过度还是咋的，脑袋一根毛也没有，所以也被叫做光头司令。今年刚满45，身材挺彪悍的，如果不是挺着一个大肚子，倒还算一表人才。</p><p>只见他摸了摸自己珵亮亮的脑瓜子，拍了拍圆滚滚的肚子，对他后面几个老家伙，岁数都比他大，也是其他一些大国的元帅或司令询问到：“都准备好了吗？。”</p><p>“一切都已准备妥当！”虽然对一个毛小子在他们头上指手画脚挺不爽的，但那群老家伙却都很服气，因为胡一筒封号军神，可不是自封的，那是公认的。</p><p>18岁参军，大小500多次战役未曾一败，典型就是东方不败啊。</p><p>其中更是有几次以少胜多，反败为胜，虽然年轻，但是有资本，不服不行。</p><p>胡一筒问完，也不鸟那群老家伙，而是望着前方天际的一群怪人。</p><p>丫的，竟可以直接停留在天空上，无视地球重力，强悍啊。虽然已经知道那是来自传说中的龙家，甚至外星人入侵的消息都是他们提供的，但是龙家一向低调，现在一下子冒出来，倒让人挺惊讶的，幸好他们是这次的先锋。</p><p>还是关心下自己吧，胡一筒摇了摇头，前几天是和小莲结婚20周年的纪念日，自己答应要好好陪她的，没想到温存没几天就碰上这档子事。</p><p>这群挨千刀的外星杂货竟敢到你筒大爷地盘上撒野，不把你们打成筛子，筒爷跟你姓，不会姓奥特曼吧。</p><p>算了，车到山前必有路，管他奶奶的嫁给谁？唉，这些年常年征战沙场，留小莲一个人在家担心受怕，独守空房，实在太对不起她了，自己当初答应她的事至今没实现一件，或许当初她跟那个小白脸会更幸福吧。</p><p>妈的，胡一筒，你是不是男人！自己的女人一定要自己照顾好！胡一筒忽然扇了自己一巴掌，暗暗下定决心，等这档子事了，如果还活着的话，就脱了这身军服，陪着小莲好好走过余半生，反正经过这次战乱，各国也不会很快搞起战争。</p><p>这么想着，胡一筒又露出他那自认为幸福而又灿烂的笑容。</p><p>他身后那群老家伙互相看了一眼，对这胡光头是不是脑残感到很是疑惑，除了脑残的人，谁会先打自己一巴掌忽的又露出这么傻的笑容，最后下了个结论，胡光瓜有时很冷很暴力，有时很傻很天真啊！</p><p>胡一筒太陶醉自己那美好的幻想中，竟没发现那群老家伙还在身后候着，猛的一阵尴尬，干咳道：“你们还在这干什么？没事做吗？”</p><p>结果那群老家伙一致地答道：“服从命令是军人的使命，司令没有让属下离开属下不敢离开！”胡一筒那光光的后脑勺猛的刷下五条黑线，大吼道：“现在马上回到你们各自的岗位！”</p><p>“是，司令！”看着那群老家伙渐行渐远的身影，胡一筒猛的一拍大腿，叹道：“唉，这些年费尽心血维持的大好形象就这样毁了呀！“</p><p>忽然，天际传来一阵轰鸣，那群飞着的人直接迎了上去，后面数万架战斗机也紧随其后，而地面，挺起数十万个炮弹筒，数千个激光炮筒以及数千万挺机枪，再后面是数百个核弹的发射中心。</p><p>该来的，终究来了。</p><p>胡一筒瞬间恢复了严肃面孔，坐到指挥</p><p>座位上，井井有条地下达一条条指令。</p><p>大战，终于拉开了帷幕，又有谁能活着见证这场战役的胜利呢？</p><p>一切未知。</p><p>亦或许这样的旷世之战只是某些东西，或许是神灵，无聊的时候看着解闷的玩意吧，谁又能说得准呢？</p><p> 叶尘，与他身后的龙家人，震撼地看着前方数百里的那架竟高达万丈的青色的光甲，闪耀着青濛濛的光芒，还依稀闪烁着蓝色光芒。</p><p>然而那光芒更多的是给人一种冰冷的机械的感觉，如同光甲那锐利的线条，带着沉重的杀气。</p><p>而那光甲的头盔里透出血红色的光芒，如同发狂的猛兽一般，竟让人内心不由地生出一股寒意。</p><p>光甲的一只手握着一柄也是长达万丈的长枪，另一只手拿着一块盾牌，一切竟是那么的完美，让人找不到一丝的瑕疵，与一点漏洞。</p><p>究竟是什么生物可以造出这么可怕的东西，还是这么可怕的东西本身就是一种生物呢？</p><p>一切是那么的不可思议。</p><p>“卑微的人类，要么臣服，要么毁灭，你选择什么？”光甲传出机械沙哑的声音，不带一丝一毫的情绪波动，但每一个字都是那么的清晰洪亮而有力，仿佛炮弹撞击在每个人的心中。</p><p>“毁灭！毁灭你！”叶尘坚定地答道。</p><p>光甲那血红的眼睛霎那间散发出耀眼的光芒，胸膛分成两半，露出一两千丈的通道，从中呼啸地冲出五千架红色光甲，五百架橙色光甲，五十架黄色的光甲，十架绿色光甲。红色光甲一丈多高，橙色光甲十丈多高，黄色光甲百丈多高，绿色光甲千丈多高。</p><p>人类在它们面前，实在过于渺小。</p><p>“那是你的选择，卑微的人类，这个星球的所有生灵都要为你的选择陪葬！去吧，</p><p>我的子民，释放你们的杀戮吧！”青色光甲咆哮着。</p><p>霎那间，所有光甲朝叶尘他们呼啸而来，龙家人迎上了那些橙色的光甲与黄色光甲。龙延一人拦下两架绿色光甲，龙越和四个与龙延同样年老的老者，那是闭关多</p><p>年的龙家太上长老们，如今也踏入了涅境，分别拦截下一架绿色的光甲。而叶尘，一人拦下了三架绿色的光甲，而那些红色的光甲则由地面上那些普通的人解决。</p><p>那架青色的光甲只是静静地停在远空，面无表情地看着那惨烈的战争，在他眼里，或许这群卑微的人类是不值得他出手的，亦或许他那高贵华丽的光甲又怎么能让这卑微的人类的鲜血所玷污呢？</p><p>直到叶尘，在他面前生生地一拳崩裂一架绿色的光甲！那爆发的黑色的力量散发的毁灭的气息，让他都不禁动容！</p><p>想不到人类的力量竟也可以如此的可怕！</p><p>这让他想起刚开始星际探险时，一个前辈对他说的话。</p><p>我们种族是这个宇宙最强的物种，整片天辰星域都是我族的领地。但是要小心一个种族，那就是人类！永远别小视这个种族，虽然渺小如蝼蚁，然而，几十万年前，这个种族某个强者，生生毙掉了我族的天神斗圣！那可是一根手指便可以捻碎一个星球的存在！</p><p>而青色光甲，自己一生的追求只是成为一名天斗士。而天斗士上还有神斗士，以及那只存在于圣殿传说中的天斗圣，神斗圣，最后才是那已经十万多年未曾现世过的天神斗圣。</p><p>而虽然自己天赋不错，将近两千年的修行却只到了圣斗士青阶，虽然离蓝阶只有一步之遥，但蓝阶上还有紫阶，紫阶上才是另一个境界天斗士。</p><p>而这几百年来，他到过很多地方，更是将十几个人类统治的星球变为自己的殖民地，然而见到的人类都是那么渺小，卑微，弱不可堪，以致在他眼中，只把人类当爬虫看待。</p><p>而如今就是这样的爬虫却在自己面前生生地毙掉了绿阶的圣斗士！</p><p> 这是不可饶恕的，于是他动了，手持青色的长枪刺向叶尘，枪头摩擦空气爆发出耀眼的光芒，发出刺耳的爆破声，如同流星一般闪过天际，那一刻，他仿若天神！</p><p>而就在此时，以叶尘为中心，猛的爆发出黑色的风暴，直接撕裂了一架绿色光甲，而另一架虽然险而又险地逃过一劫，但是左手握盾牌的手也被硬生生地扯裂了，之后，叶尘，一个漂亮的滑身，躲过了那一致命的一击，但是衣服却被那炙热的枪芒所焚毁，连胸前都有一道深深的印记。</p><p>很可怕，</p><p>叶尘的第一个念头，如果再慢一刹那的话，自己也许已经被钉在那杆青色的枪上了。</p><p>那青色的光甲封闭了叶尘所有的出路，对那一架断臂的绿色光甲吼道：“将地上那群卑微的爬虫给我屠戮干净”，接着，他恶狠狠地盯着叶尘，看着他那干枯的身躯，眼中红芒渐渐浓烈起来，“你的对手是我，我会将这根枪钉在你的</p><p>心上，直到你流尽最后一滴血液才让你死去！如此，才能弥补你所犯下的过错！”</p><p>言罢，那青色光甲忽的缩小，变为一丈多高，但那浓烈的杀气却更加猛烈的仿若狂风暴雨一般朝叶尘涌去，叶尘感觉自己就像是一只在滔天骇浪中颠簸的小船，蓦地生出一股无力感，但是眼神却越发的凝聚，死死地盯着青色的光甲。</p><p>叶尘知道自己根本不是那青色光甲的对手，自己借用魔的力量，最多只能达到圣境六重天，而那青色光甲的实力绝不下于圣境九重天，甚至已经一只脚踏入了虚境！在绝对的力量面前，自己没有一丝的胜算，但是自己没有一丝的退路，如果让这青色的光甲进入地球，那么绝对的单方面的屠戮，下面没有人仍挡得住这一击长枪。</p><p>是时候动用当年遗留下来的杀阵吗？</p><p>不，还不到时候，地面上有太多的人了，如果这时下去，肯定会给下面的人类带来灭顶之灾，那家伙的一击足以让方圆百里沦为废墟，下面也或许只有核弹才能勉强伤到得他，但是误伤自己人几率太大。不管了，反正他的目标是我，先拖住他再说。</p><p>叶尘转身向外太空疾驰去，就像一道黑色的闪电。</p><p>“你，逃不掉的，在我的脚下颤抖吧，卑微的虫子！”青色光甲咆哮着紧跟其后，瞬间已经冲到了叶尘身后。</p><p>该死的，他的速度太快了，根本摆脱不了。叶尘，转过身子，正视着青色的光甲，而那青色的光甲也停在了叶尘面前五十米处，此时，他们已经身在太空之中。</p><p>“来吧，要我的命，你也该付出相应的代价！”叶尘握紧双拳，额头上那黑色的闪电印记越发的明显，流动着黑色的光辉，最后竟然流出了鲜血，那红与黑交织着，在叶尘身后形成一道模糊的身影，看不清脸，但没有人敢无视它。</p><p>青色的光甲那血红的双眼也不禁缩了起来，他嗅到了危险的气息，虽然他感觉得到叶尘体内的力量明显的弱于自己，但是那道模糊的身影让他感到害怕，好像一只魔鬼，盯着自己的猎物，更像是一个黑洞，吞噬着周围的一切。</p><p>但是青色的光甲很快便镇定了下来，他们这个种族，天生的杀戮兵器，战斗狂人，很少有像人类那么丰富的情感。他们没有亲情，也没有爱情，因为他们并不需要男女结合产生后代，他们产生于圣殿的圣降门中。</p><p>天辰星域的圣殿有天，地，玄，黄四个等级，其中天圣殿只有一个，但没有人知道它在何处。</p><p>传说天圣殿的使者修为都在神斗圣之上，甚至有天神斗圣那样的存在，至于天圣殿的殿主是谁，更是没有人知晓，只传说数十万年来，天圣殿只下达过一道指令，必杀令，诛杀一个人族强者。</p><p>但是最后那个人族强者硬生生地毙掉一个天神斗圣，便消失了。天圣殿也撤销了必杀令，没有人知道那位人族强者究竟是谁，到哪里去了，是被天圣殿的强者诛杀了吗？亦或是逃脱了。</p><p>天圣殿的圣降门也没有人知道会产生何种东西，只知道地圣殿的圣降门出来的都是神斗士，玄圣殿的出来的都是天斗士，而黄圣殿的出来的只是圣斗士，而且这个种族都有进化的潜能，甚至遥远历史上就出现几个由黄圣殿圣降门中出来的圣斗士最后进化到了神斗圣，而成为了天圣殿的使者。</p><p>而因为天圣殿许久未曾问世，于是现在整片天辰星域分成十个区域，由十个地圣殿掌控，而每个地圣殿下来是一千个玄圣殿，每个玄圣殿下来是一万个黄圣殿。</p><p>每年的一个特殊的日子，称作圣降日，这个日子里，每个地圣殿圣降一个神斗士，每个玄圣殿圣降一百个天斗士，每一个黄圣殿圣降一千个圣斗士。</p><p>为了提升战斗力，格斗是最好的途径，因此每天黄圣殿都会举办一次神圣擂台赛，累计每月胜利的前十名会被送到玄圣殿进行第二轮的角逐，而累计玄圣殿每年胜利的前三名会被送往地圣殿进行第三轮角逐，最后由每个地圣殿角逐出的冠军再进行一次最终角逐，赢者奖励颇丰，最终获得总冠军的将被赐予圣化液，可以使神斗士进化为天斗圣，甚至得到天圣殿使者的考核资格。</p><p>但是，如果输的话，那么结果只由一个，那就是被毁灭，残骸会直接消散于天地之间，重新进入圣降门，等待着新一轮的圣降。</p><p>可以说，他们，这个种族生存的唯一意义就是杀戮与战斗，以及进行星际探险，寻找金属物质交给圣殿换取不同等级的强化液以提升自己的体质，从而进化。</p><p>他们只信奉力量也只追求力量，没有世俗的牵绊，他们相对于人类来说，进化得太过于迅速，圣斗士的阶别红橙黄绿青蓝紫分别与人类的境界灵化帝涅圣虚通天相对应，至于人类境界之上是什么，或许只有到了那个叫做大荒的传奇世界才能知晓吧，</p><p>  叶尘，已经不知道自己是否还能站得起来，这已经是不知道第几次他被击飞出去，他清楚地知道自己的肋骨又断了一根，身上也布满了深能见骨的枪伤，从伤口传来的灼热感，放佛烈焰一般焚烧着他的身躯，甚至要将他的身躯撕碎。</p><p>而那家伙只有左手握着的盾牌在自己数以千次的拳击下崩裂，头盔也有一丝破裂，其他地方完好如初。</p><p>太可怕了，好霸道的攻击力量，好强悍的防御能力。</p><p>忽的，那长枪再次朝叶尘呼啸而来，叶尘知道自己已经躲避不了，放佛下定了决心，叶尘，嘶吼着，也向着那青色的光甲冲去，他身后那模糊的影子似乎微微睁开了双眼。</p><p>最终叶尘一拳打在了光甲的胸膛上，陷进了一个凹痕，而那锐利的长枪也穿透了叶尘的胸膛，叶尘的身躯崩裂了，但是那黑色的影子却仍完好如初，而且重新凝聚叶尘那血肉横飞的身躯。</p><p>那青色光甲咆哮着，钉着叶尘，进入地球的大气层，像流星一般撞向地面，“轰”的一声，方圆五百里沦为灰烬。</p><p>所有人都呆住了，在那个巨大的坑中已失去了叶尘的身影，只有一杆枪透着冰冷的气息，钉在那个坑中，坑中一滩鲜血正在向四周蔓延。那个人，真的就在这一击之下灰飞烟灭了吗？</p><p>  那青色光甲手朝那杆长枪一抓，长枪便重新回到了他的手上，只见他长枪指天，张狂地笑着，“哈哈哈哈··”笑声久久地在天地中回荡。</p><p>而如今，地面的战斗也已经接近尾声，残留的只剩几十架红色光甲，零星的十几架橙色和黄色的光甲，和一架已经断了一臂的绿色光甲。</p><p>而龙家除了龙越和龙延外，其余四位达到涅境的长老都已经身殒，而达到帝境的长老只剩下七个人，化境的族人也寥寥无几，只有十几个人，而活着的都不同程度受了重伤。</p><p>龙家五千年积蓄的力量几乎在这一战中损失耗尽。</p><p>而地面上那些普通的人更是损失惨重，伏尸万里，血流成海，那道坚固的防线也被硬生生地撕开了一道百丈宽的口子，鲜血染红了整片苍茫的大地，不知有多少活生生的生命就这样流逝了，有许多连完整的尸骨都没有留下。</p><p>据战后不完全统计，战前地球人口将近八十亿，战后只剩不足十亿人。</p><p>而此时，青色的光甲重新恢复那高达万丈的身躯，俯视着地上那群蝼蚁一般的人类。</p><p>突然，防线后方传来呼啸声，那是数十发核弹直接击向了青色的光甲。</p><p>但是只见那青色光甲一挥手中的长枪，一道长达万丈的枪芒迎向了核弹，在天空盛开了一朵巨大的蘑菇云，放佛在庆祝着这场死亡的盛宴。 </p><p>紧接着，数万炮筒齐鸣，然而最终都被挡了下来。</p><p>“哈哈哈，卑微的人类，还有什么尽管使出来吧！”青色光甲得意的狂笑着，忽的手一挥，前方千里处形成一个方圆百里的巨大的坑，不知有多少生命在那一击下，灰飞烟灭。</p><p>这个世界，还有能够扼制他的力量吗？</p><p> 龙越与龙延对视了一下，点了点头，正欲向青色光甲杀去。</p><p>虽然知道是蚍蜉撼大树，可笑不自量力，但是他们也只能这样去做。</p><p>然而就在这时，突然，东方，龙家隐世的地方，一声龙吟震天动地，一条长达万丈的神龙乘风而起，直上九重云霄。</p><p>所有人都呆住了，那青色的光甲也呆住了。</p><p>龙越与龙延互相看了一眼，眼里有欣喜，有激动也有疑惑。</p><p>那是，龙冢？还是，龙傲！</p><h4 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h4><p>那是什么？龙吗？这天罚的一族怎么可能还存在于世呢？青色光甲感到无比的震骇.</p><p>据圣殿典籍记载龙族，早在万年前便已经被屠戮干净，而且当时自己的种族战族也曾经参与过屠龙计划.</p><p>然而屠龙计划并不是天圣殿发起的，而是来自漠北星域的一个荒古家族古族，没有人知道这个家族存在了多久，甚至比战族都来得久远.神秘，低调是这个家族的特点，甚至在漠北星域都没有人知道古族的所在.</p><p>这个家族也没有多大的野心与欲望，对漠北星域也没有多大的支配欲望，但是没人能够无视这个荒古家族的号召力，甚至连天圣殿都要给这个家族三分薄面.</p><p>当初的屠龙计划如果没有天圣殿的默许，地圣殿也没有那么大的魄力胆敢参与。因为龙族，相当的强悍！</p><p>成年的龙族实力堪比神斗士，而且那些龙族的王者更是达到天斗圣的实力，皇者甚至达到神斗圣的水平。而，当时，战族只是负责屠戮那些普通的龙族，而那些龙族中的王者与皇者则由古族解决。</p><p>虽然战族一直标榜自己是宇宙最强的种族，但是青色光甲知道，如果跟古族比起来，还是略有不足的，当然这并不算上天圣殿所拥有的实力，因为天圣殿已经太久未曾现世过，连青色的光甲都认为天圣殿或许只是战族的一个古老的传说罢了。</p><p>而古族万年前的铁血手段，让龙族一族族灭！只能用可怕来形容。</p><p>奇怪的是古族具有与人族无异的外貌与体型，只不过他们体内流着金色的血液，头发是银白色的，更是号称是天神的后裔！</p><p>而屠龙计划正是天神下达的指令，他们深信他们的祖先来自那遥远的九天之上，凌驾于万物之上，是这个宇宙的主宰！</p><p>而现如今知道的有三大星域，除了天辰星域由战族掌控外，漠北星域与星月星域上都生存的不同的种族，其中人族的数目最为庞大，当然也是最为卑微的。</p><p>除了少许的几个传承较为久远的人类家族，很多的人族都是由星际探险，将一些落后的人族统治的星球变为殖民地，捕获大量的人类，这些人大都沦为了奴隶，在漠北星域与星月星域中苟延残喘，过着连蝼蚁都不如的卑贱人生。</p><p>甚至有的种族，如战族更是以屠戮人族为乐，他们将数以百万计的人族囚禁在一个巨大的牢笼中，然后放进残暴嗜血的宇宙野兽。有长达千丈的吞天蟒，高达百丈的剑齿虎，甚至一口可以吞进数千人的洪荒巨鳄。</p><p>人类在这些野兽面前简直就是那么的弱小不堪，他们不敢反抗，甚至没想过反抗！</p><p>他们唯一的希望就是这个牢笼的四个方位在每间隔一柱香的时间会打开一个狗洞，一个只能由一个人爬过去得狗洞，狗洞会开启一分钟，之后又重新关闭。</p><p>按理说，数百万人中应该有很多人可以逃出来，然而可笑的是，最终能逃脱的仅有寥寥几人，屈指可数，有时甚至全部覆灭！</p><p>而这并不是野兽的杰作，恰恰是人类自己！</p><p>每当狗洞开启的时候，所有的人都会疯狂地朝狗洞涌去，期间，不知有多少的人类会被同伴拽倒在地，而下场只有一个，那便是被活活的踩死！</p><p>甚至有的人已经爬进了狗洞，却仍被后面的同伴活活的拖曳回，这真是赤倮倮的讽刺啊！</p><p>自己逃不出来，却要生生地扼杀别人生的希望，这种人性的自私与丑陋，最终葬送的只是人类自己啊！</p><p>纵然野兽再怎么的残暴嗜血，数百万人的力量如果团结起来，然道没有一战的能力吗？</p><p>就像两大星域中，如果所有的人类都团结起来，又岂会被打上卑贱的烙印，甚至像奴隶那样过着连狗都不如的生活？</p><p> 也因此身为战族的青色光甲对人族，向来充满了鄙夷，只把人族当爬虫看待。然而这次星际探险，误入虫洞，来到一个陌生的星空，不属于三大星域的范围，甚至发现了一颗蓝色的美丽的星球，而且也是由人族统治的。</p><p>这让青色光甲十分欣喜，认为轻而易举便可以占领这个美丽的星球，而自己发现这个新的星空上报给圣殿，自己很可能得到高等级的强化液，甚至一举进入天斗士。</p><p>然而，出乎他意料之外的是这个星球的人族却是那么的团结，一致对外。</p><p>甚至还有那么多的人族的强者，尤其是那个领头的老者，那恐怖的黑暗的能量让他都感到莫名的惊骇。</p><p>而自己最终干掉那个老者，虽然自己的兵团已经所剩无几，但是青色光甲仍然自信，即使仅凭自己一人也可以扫平这个星球。</p><p>然而，现在却跳出了一只龙！青色光甲，都忍不住要爆粗口了，你奶奶的，这还玩啥啊，成年龙族的实力堪比神斗士，我还不一巴掌让他给拍死啊。</p><p>然而，他忽然发现，这只龙虽然长达万丈，声势惊人，但是却好像不是那么的神采奕奕，相反透着一股死气，而其中传出的能力波动最多也跟自己差不多，这让他稍微放下心来，握紧手中的长枪，应该有一战的可能。</p><p>龙傲苍穹，呼啸而至，一记神龙摆尾。</p><p>站在远空的那断臂绿色光甲，还没反应过来，“砰”的一声便被打到了龙越与龙延身边，等反应过来，只见龙越与龙延一脸奸笑的看着自己，便知大事不妙啊，刚想脚踩西瓜皮，溜之大吉。</p><p>无奈，事与愿违啊，只听见一阵“啊啊啊”的惨叫声，紧接着，便是残肢断甲满天飞啊！龙越与龙延那叫一个爽啊，紧接着，又看着其余的光甲，摩拳擦掌，露出一脸的痞子相，嘿嘿的贼笑着，如同邪恶的灰太狼看到了可爱的美羊羊啊！</p><p>其余光甲一看这猥琐痞子相，还玩个屁啊，迅速跑路啊！</p><p>青色光甲一看这情形，脸立刻绿了。</p><p>而那头龙上来也不跟他废话，直接亮出抓奶龙爪手啊，直取青色光甲胸部，那青色光甲也不是吃素的，用左手挡住这致命一击，然后趁着反作用力，腾空而起，双手抡起长枪，就是一当头一棒，龙一个侧身躲过，地面顷刻间出现一个深百丈，长万丈的裂痕。</p><p>龙尾瞬间呼啸而至，而青色光甲刚才那一当头一棒用力过猛，抽身不出，被龙尾扫中，直接掉到了海里去了。</p><p>刚又露出水面，迎面就是一记王八霸王拳，重重地击在青色光甲脸部正方向，直接蹦裂头盔，连门牙都崩断了两颗，在空中连滚了三下才停了下来。</p><p>眼见龙又欺身而上，又给自己来上一拳，如果打中，那牙齿还不全让这只龙爆掉啊，尼玛啊，青色光甲当机立断，立即缩小成一丈高，才勉强躲过这一致命一击。然</p><p>而紧随其后，便是那海水沸腾了起来，青色光甲暗道，不妙，龙族天生便具有操控水的力量，刚想从海水中挣脱出来。</p><p>然而，四周海浪竟然席卷而上，将其围得严严实实，而龙则盘卷着那海浪高速旋转起来，瞬间形成一个龙卷风暴。</p><p>而且龙卷风暴正一点点的向中间压缩，原本直径达到千丈的风暴，一点点地被压缩到百丈，再到十丈，可以想象得到，处于风暴中心的青色光甲所面对的何等的压力。</p><p>所有的人站在远方看着这天地奇观，眼里露出了不可抑制的激动与喜悦，然而一切会就这么轻易的终结吗？</p><p>答案是否定的！</p><p>因为龙的脸色越发的难看与苍白，暗道，怎么可能？</p><p>那个青色光甲的力量在一点点的增加，仿佛在蜕变！在重生！</p><p>“哈哈哈哈！”一阵畅快的狂笑声从风暴中传出来，竟然盖过了那惊涛骇浪的轰鸣声。所有人的脸色都变了。</p><p>突然，“砰”的一声，风暴破碎了，而龙则被重重的甩在沙滩上，身上伤痕累累，有些鳞片已经从龙身上脱落了下来。</p><p>而那漫天飞溅的海浪之下，露出了一个伟健的身影，一个蓝色的光甲，高达十万丈，在阳光之下灼灼生辉，身上没有一丝一毫的破损，连原本破碎的盾牌和头盔也恢复如初，一切就像当初那般的完美无暇，而且透露出的气息比当初更加的强大与恐怖，以致于所有的人都站立不住，被迫匍匐下去，连龙延直逼圣境的修为也无法承受那股威压，也屈下了身子，垂下了那高傲的头颅。</p><p>绝望，不甘，与无奈在每个人的心头蔓延，然道今天就是地球的末日吗？</p><p>只见，蓝色光甲张狂地笑着，那么的不可一世，让人忍不住都想用鞋子狠狠地拍他两个响亮的嘴巴子。</p><p>“哈哈，说起来都谢你啊，你这只天罚的龙。”蓝色光甲一步一步地朝龙走过去，“如果没有你施加的压力，我另一只脚也不会那么快踏入蓝阶。</p><p>现在让我扒了你的皮，看看传说的龙肉滋味如何吧。哈哈哈哈··”</p><p>龙拼命的挣扎，勉强站立起来，怒视着蓝色的光甲。</p><p>“怎么，你以为你还有一战的可能吗？现在在我眼前，你就是一只臭爬虫 ！”蓝色光甲直接出手，一把卡住了龙的脖子。</p><p>龙也拼命的用身子紧紧缠绕着蓝色光甲的右臂，然而一切都是是徒劳。</p><p>蓝色光甲左手也抓住龙的脖子，残忍地笑道“现在终结你的生命吧，可怜的小爬虫！”说罢，两只手用力一撕，龙硬生生的被撕成两半，然而并没有想象中的龙血飞溅，而是一道身影从龙的身体中飞掠了出来，那，便是龙傲！</p><p>蓝色光甲也是一惊，看着那个穿着黑色龙袍的年轻人，发觉他体内的力量竟是那么的微弱，只不过才达到黄阶圣斗士级别罢了，很快便明白了过来，戏谑道：“想不到你竟然可以操控龙的尸体，我说吧，这天罚的种族怎么可能还会存留在这世间呢？哈哈哈哈··卑微的爬虫们，现在让我来收割你们的生命吧！”</p><p>而就在此时，遥远的海上突然传来嘶吼声，只见一个身影出现在一个岛屿的上空。</p><p>那是？该死的，那个家伙还活着！怎么可能！不过，如今，我已经踏入蓝阶，他还有什么资格可以跟我对抗呢？蓝色光甲也不急，那是自信的表现，望着那道身影，露出冷笑。</p><p>那个身影，赫然是叶尘！</p><p>所有的人都激动万分！</p><p>“嘿嘿，别高兴太早，他是你们最后的希望吧，卑微的虫子，现在，让我扼杀你们最后的希望吧！”蓝色光甲注视着那道单薄的身影，冰冷地说道。</p><p>他，不相信那个家伙，还有跟他一战的资本，但是他错了。</p><p>叶尘，终究启动了十年前留下的杀阵，只不过这代价太大了，不是一般人可以承受得起的。</p><p>那座岛屿便是四国岛了，其中封印着当初的三百万兵魂，那都是自古以来游荡在天地之间的兵魂。</p><p>而蚩尤身为兵主，更是九黎族的族长，拥有着那种可以操控亡灵的匪夷所思的巫术，然而越强的巫术反噬能力越强，即使是九黎族的大巫师也不敢轻易施展。而还魂异术只有历代的九黎族的大巫师才能习得。</p><p>不然，即使付出多大的代价，叶尘也会为龙樱还魂的。</p><p>而其实那三百万兵魂并不是主杀阵，真正的具有杀伤力的是当年惨遭屠戮的八千万四国岛的亡灵，积攒了太多太深的怨气，如今已经成为了怨灵恶鬼了吧。</p><p>只见叶尘，拿出一把剑，插进自己的心脏，口中喝道：“祭！”</p><p>瞬间，整个四国岛沸腾起来了，无数怨灵冲天而起，整片天都暗了下来。</p><p>只见那个孤独单薄的身影就这样淹没在怨灵之中，那群怨灵正在一点一点地啃噬着他的血与肉。</p><p>或许这一切都是冥冥之中注定的吧，叶尘，当年所犯的错，所造的杀虐，如今也正通过怨灵一点一点地啃噬中一点一点偿还吧！</p><p>所有的人都震撼地看着这一幕，有的甚至失声哭了出来。</p><p>那个蓝色的光甲也呆住了，这是干嘛？玩自尽吗？但同时，他又感到了深深的不安，一种危险的感觉蔓延全身，不能等下去了，他握紧手中的长枪准备出手。</p><p> 而此时，那漫天的怨灵中突然一缕黑色的烟雾冒出，消散在天地之间。</p><p>“那是？”龙傲疑惑道。</p><p>“魔啊！魔以血肉为媒，如今，叶尘以自己的一身血肉为祭品换取暂时拥有怨灵的力量，那个身体已经不适合魔栖息了。”龙越淡淡地说道。</p><p>“那叶尘呢？舍弃一身血肉他还能活吗？”</p><p>“不能！”龙越看着远方那越来越浓烈怨灵悲痛的叹道。</p><p>那个男人再次地出乎他的意料，疯狂而又决然，竟有那样的胆识与气魄，或许，我真的错了吧，这样的男人，又岂是魔能控制得了的呢？</p><p>或许，阿樱，当初跟他在一起的话，真的会幸福吧。</p><p>然而，现在，想这些又有什么用呢？龙越摇了摇头。对了，傲儿，怎么可以掌控龙的尸体呢？那具龙的尸体应该便是龙冢吧。龙越正欲向龙傲询问，忽然，远方传来一声惊天巨响！龙越立刻被吸引了过去。</p><p>原来那蓝色光甲，终于忍不住出手了，直接将那长达十万丈的长枪掷了出去，然而却被反弹了回来。</p><p>而此时，叶尘，八千万怨灵已入体，只见一具洁白的骨架闪闪发光，而白骨周围无数的怨灵在嘶吼着，咆哮着，那声势竟然连天地都为之变色，整个天空乌云密布，倾盆大雨从天飞泻而下，一道道黑色的闪电在那具白骨四周纵横，竟然仿佛连空间都欲被撕裂。</p><p>而四国岛也褪下了灰暗的面纱，原本滔天的瘴气也已散去，重新明朗地出现在世人的面前，依旧是当初那个世外桃源般，樱花繁茂的岛屿。</p><p>或许一切都没变吧，变的只是人吧！</p><p>阿樱，一切，由我开始，也让我来结束吧。</p><p>白骨温柔地看着四国岛，眼眶中竟然滚落了一滴泪珠，落到一朵娇嫩的樱花花苞上面，而那花苞竟一点一点地展开，露出那淡然出尘的容颜。</p><p>白骨笑了，笑得多么的欢快啊，两个牙床张得大大的，骨架也前后摇摆，有点滑稽也有点可爱。</p><p>所有人看着那白骨，也笑了，心也静了下来，原本愤怒而充满怨恨的心灵也一点一点地舒张，明天会更好吧！</p><p> 只有那蓝色的光甲，头盔下的脸色越发的难看，他，只剩一具骨架，为什么还能如此淡然地笑着，还笑得那么的畅快。</p><p>而那种快乐，自己竟然重来没有过，回顾这一生，每天除了战斗还是战斗，除了杀戮还是杀戮，而自己最终得到了什么呢？是杀戮那一瞬间带来的快感吗？</p><p>曾经，自己有一个多么好的朋友啊，从小一起长大，然而却在黄殿的神圣擂台赛上相遇，而擂台赛的规则是只能允许一个人活下来。</p><p>于是，最终，他深深地将长枪插进了那个跟他从小一起长大的好朋友胸上，因为他自私，他爱自己的生命胜过好友的生命！</p><p>而他知道，他一直知道，那个好友一直对他手下留情！否则，单轮实力，他绝不是他好友的对手，然而最后抓住好友的一丝漏洞，他冷酷地将长枪一点一点地推进好友的胸膛。</p><p>看着好友身躯一点一点地破碎，一点一点地消散在天地之间，而他的好友却笑了，看着好友那笑意的眼神，他真的很想找个洞将自己深深地埋葬起来，那种痛苦让他的身子都要裂开。</p><p>从此，他再也没有一个朋友，因为，他，知道，自己忍受不了那一种痛！</p><p>圣殿使者说得对，我们战族是不能有朋友的，也不需要有朋友，我们只需服从上面的命令，一点一点地往上爬，而我们要做的也只有战斗与杀戮。</p><p> 看着叶尘那淡然的笑，蓝色光甲，嫉妒，痛苦在体内蔓延，该死的，我都没有的东西，这该死的爬虫怎么可以拥有！</p><p>他握紧长枪，带着冷酷的眼神，朝叶尘走去，一股杀气弥漫在他周围，很浓很浓的杀气。</p><p>而那具白骨也合上了牙床，收起了笑容，看着那蓝色光甲，一步一步地走来，一切该结束了，</p><p>阿樱，</p><p>所有的一切···</p><h4 id="伍"><a href="#伍" class="headerlink" title="伍"></a>伍</h4><p>“卑微的爬虫，你倒是让我惊讶啊！现在让我看看你是否还能否挡得住我这一枪吧！”说罢，蓝色光甲握着长枪的末端，身体迅速旋转化成一个漩涡，推动着长枪，朝那具白骨刺去.</p><p>顷刻间，整个天地仿佛只剩下了那一杆枪，瞬间爆发出的蓝色的绚丽的光芒，连日月都为之失色.</p><p>而雨仿佛也越下越大，雷电交织，一次一次地撕裂天空。</p><p>然而白骨的周围是一片暗寂，那种纯粹的黑暗，如同一个可怕的漩涡，吞噬着一切，竟好像连光线也无法挣脱。</p><p>而那杆原本耀眼，绚丽的蓝色长枪一点一点地没入那一片暗寂之中，竟没有一丝光线透出来。</p><p>最终那蓝色的光甲也没进黑暗中，如同被沼泽吞噬一般，没有泛起一丝涟漪.</p><p>然而不等人们露出宽心的笑容，一道夺目的蓝色的光芒撕裂黑暗，挣脱出来，赫然是那蓝色的光甲，而那黑暗也渐渐的散去，露出一具白骨，而白骨的胸膛赫然插着一杆长枪，四周的骨骼也正一点一点地裂开。</p><p>“哈哈哈哈，卑微的爬虫，如果没有踏入蓝阶差点就命丧于此了，而如今，你还有跟我相抗衡的资本吗？”蓝色的光甲那张狂的笑声在天地之间久久回荡。</p><p> 然而那具白骨只是低着头，咬着牙，一点一点地将那杆长枪拔出来，长枪摩擦骨胳发出刺耳的“嗞嗞”的声音。</p><p>之后，白骨将长枪扔给蓝色光甲，抬起了头，掷地有声地说道：“有！但不是我有，而是被你屠戮的数十亿的生灵有！睁大你的眼睛看看这数十亿的生灵的怨气吧！”</p><p>随及，白骨伸出双手，对着这片天地吼道：“出来吧！游荡在天地之间的怨灵，把你们的力量借给我，让我来平息你们的怨恨！”</p><p>只见从无数的尸体中涌出灰色的烟雾，那些灰色的烟雾在白骨周围凝聚起来，形成了一股强烈的黑色风暴，一股足以毁天灭地的风暴，七海都为之沸腾，天地都为之失色，漫天黑色的闪电交织着，甚至出现了血色的闪电，连空间都一次一次地的被撕裂开来。整片天地都暗了下来。</p><p>所有人都感到了莫名的惊骇，与战栗。</p><p>蓝色的光甲脸也白了下来，身子竟然惹不住的颤抖起来，怎么可能？他竟然感到连在圣殿使者身上都不曾有过的威压，要知道圣殿使者的实力都至少在天斗士基准啊！</p><p>这不可能，那卑微爬虫怎么可能会有这种强大的力量，是来自那些怨灵吗？该死的，从那些死人身上怎么可能凝聚这么可怕的力量？</p><p>不可抵抗，蓝色光甲当机立断，转身朝外太空掠去。然而，那黑色风暴中的那具白骨又岂会让他轻易逃脱呢？</p><p>只见黑色风暴瞬间朝蓝色光甲袭去，将其吞噬，只听到蓝色的光甲一声凄厉的惨叫声以及叫嚣着：“我已经上报给圣殿了，你们这些卑贱的爬虫最终也会为我陪葬的！啊···”</p><p>之后一片寂静，而那黑色风暴也渐渐的散去，露出那具全身骨骼已经布满裂纹的白骨。</p><p>他，本该立马随蓝色光甲消散于天地之间，但是他不能，一种力量，来自骨子里的那种执着与坚持，让他硬生生地支撑着这已经粉碎的骨架。</p><p>但是，他知道，他坚持不了多久了的，只见他飞到龙越身边，急促地喝道：“带我去黄帝当年封印的星空之门！”</p><p>“星空之门！星空之门需要输入庞大的力量，曾经也有几位长老尝试过，但无一例外直接被那霸道的封印所吞噬，化为虚无，你可要想清楚！”龙越震惊地看着那具破碎的白骨。</p><p>“你没看到，我已经坚持不了多久了吗？让我死前再做一件事吧！”</p><p>“唉，跟我来吧！”龙越叹息一声朝龙家飞去，白骨紧跟其后，再后面是龙傲与龙延。</p><p>一场旷世浩劫终于落下了帷幕，余生的人们，激动，欣喜以及对已逝人们的惋惜与悲痛，有很多人都流下了泪水，其实有时候泪水并不是代表懦弱，而是对新生的一种洗礼。</p><p>所有人都投入救助那些奄奄一息，那些被埋在废墟下面的人们的队伍中，而一幕一幕令人为之感动，为之落泪的画面也一次一次的上演，灾难面前，大爱无疆，人类再次以他们的高贵深深震撼着这片浩渺璀璨的星空。</p><p> 幕一：</p><p>一片倒塌的废墟中， 当十几个人一起合力才将最后一块厚厚的石板抬起来时侯，人们震撼地看着这一幕，许多人都已无法抑制住眼里的泪水。</p><p>那是一个年轻的母亲，双手撑着大地，两脚跪在黑暗中，四肢已经血肉模糊，却仍用孱弱的背弯顶着上方五层楼房的废墟，而在她单薄的身子下面躺着她的孩子，包裹在一个红色带小黄花的被子里，只有三，四个月大，因为母亲的庇护，孩子安然无恙，正含着母亲的乳头，安静地熟睡着，甚至还带着一丝微微的笑意。</p><p>或许，他根本就没有感受到危险吧，因为那位年轻伟大的，母亲！毅然用自己羸弱的身躯为自己的孩子撑起了一片生命的蓝天。</p><p>的确，女人是弱小的，但是母亲却是伟大的！那种母爱的力量连死神都望而却步！</p><p>那位年轻的母亲已然失去了生机，当人们小心翼翼将婴孩抱出来的时候，从那件红色带小黄花的被子中滑落下一部精美的手机。</p><p>人们下意识地打开手机屏幕，那是一条已经写好了的短信：亲爱的宝贝，如果你能活着，一定要记住我爱你！那一刻，所有的人哭了···</p><p>幕二：</p><p>徐玲紧紧地抱着怀里的那个男人，那个曾经冷冷地抛弃了她的男人。</p><p>她至今无法忘记当初他那冷酷的面孔和那冰冷的话语：对你，我只是玩玩而已，现在我玩腻了，麻烦你滚出我的生活！她简直无法相信，也无法明白，如果说，只有风花雪月而无相濡以沫的爱情是苍白无力的，她相信，也明白。</p><p>但是她跟李东相恋四年了，从大一开始，一路出来，虽然李东家里并不富裕，也不像那些曾追过自己的人那么的浪漫，有情调，时常给自己买一些花啊，草啊的。</p><p>但是，那个男人，给她一种实在的感觉，在他宽阔的肩膀上，她可以睡得很安稳，很宁静。</p><p>这些年遇到了很多的风雨，与艰辛，但她与李东同舟共济，虽然凭她的条件，本可以找个比李东更帅，更有钱的男人，但是她没有，毅然与李东过着那虽然艰苦平凡但却温馨的小家日子。</p><p>然而，当两人正要步入婚姻殿堂，她憧憬着为人妻子的那种幸福时，李东竟抛下那么一句冷酷的话，瞬间扯碎了她所有美好的憧憬。</p><p>那一夜，她哭了，就站在大街上，在风雨交加的夜里，而那个男人就这样走了，带着所有他的东西，头也不回地离开了她的世界。</p><p>之后，她发烧了，躺了整整一个礼拜，也打了一礼拜的吊瓶，她突然发现自己是那么的悲哀，甚至想就这样永远地睡下去，但是看着年老的父母亲，她知道除了爱情，自己还有亲情，那永不会褪色也永不会变质的亲情。</p><p>她振作了起来，随后又遇上了一个男人，一个也曾经追过她的富家少爷，很有钱，也很浪漫，在他的温柔中，她渐渐地接受了这份感情。</p><p>她不知道自己当初为什么会这么傻，竟然会爱上李东那样一无所有的男人，甚至还被那样的男人那么狠狠地抛弃，而自己竟然还忘不了他，在无数难眠的深夜，曾经的那道心伤，却仍在隐隐作痛。</p><p>然而，在这场浩劫中，当那些红色的怪物冲进来的时候，那个富家少爷竟然抛下她，独自的逃跑了。</p><p>看着红色的怪物举着长枪一步一步地朝自己走来，她闭上了双眼，凄美地笑了，突然只听见一声“小玲！”随后她便被人扑倒了。</p><p>是他，是他的声音，怎么可能。</p><p>等她慢慢地睁开自己的双眼，只见那个人，李东浑身淌着鲜血，安静地躺在自己的怀里，嘴角带着一丝笑意，是他用自己的身子替自己挡住那重重的一击。</p><p>徐玲哭了，梨花带雨，紧紧地搂着李东，这一切究竟是为了什么啊！</p><p>只见李东吃力地睁开沉重的双眼，深情地看着徐玲，右手抚摸着玲的脸颊，露出心满意足的笑容。</p><p>“为什么，李东，当初你将我无情抛弃，如今为何又要舍身救我？”徐玲此时已泣不成声。</p><p>“小··小玲，婚检··婚检时查··查出我已··已是癌症晚期，只··只有··至多半年··半年的生命，而你还··还这么年轻，这··这么漂亮，这么优秀，我不··不能耽误你啊！有时··时候，爱··爱一个人并··并不需要占··占有。你··你的世界，我··我来过，这就足够了，我··我情··情愿用我剩下的生命在··在你的世··世界边缘··默默地注视着··你，守望着··你，只要你··你幸··幸福，快··快乐··小玲，我··我不行了，答应··答应我，好··好好的··活着，我··不··不能··再··再照··照顾你··你了，找··找个爱··爱你··你的··的人··”</p><p>话还没说完，那个男人便永远地离开了。</p><p>小玲紧紧地搂着李东，低下头靠近李东的耳朵悄悄地说道：“亲爱的，黄泉路上，我又怎么会让一人独行，我的父母已经走了，而今，你也走了，这个世间还有什么值得我眷恋的呢？</p><p>等着我，如果还有下一世，我一定还要做你的妻子，帮你生个胖娃娃，执子之手，与子偕老。等着我，亲爱的。”</p><p>徐玲笑了，幸福地笑了，从地上捡起一把刀，划开了自己的喉咙，鲜血涌出来，她倒在了李东的怀里，一地的鲜血蔓延，形成一个大大的心型，或许对他们来说，这便是最好的结局吧。其实，死，有时，并不可怕啊。</p><p> 幕三：</p><p>陈刚已经不知道自己挖了多久了，两只原本用来拿画笔的娇嫩白皙的手，此时已经沾满了泥土，血肉模糊，鲜血淋漓，连指甲也脱落了。</p><p>然而那种钻心的痛，他视若无睹，夜幕下，他就这么一个人，拼命地挖着，就像一只疯狗。</p><p>因为下面是生他养他的父母啊！</p><p>他并不是一个富家子弟，而是生活在大山中那偏僻的小山村中，只有一条崎岖蜿蜒的小路连接着外面的世界，来过几个的支教老师，但无一例外，都无法忍受这偏僻山村的艰苦环境。</p><p>那里没有电，夜晚只有摇曳的烛光，和那漫天的繁星。</p><p>每日的三餐是那种黑色的馍馍，那种硬邦邦的比石头还硬的东西，在外面连当猪食都不够格。</p><p>如果碰上大的日子，可以吃上半碗猪油拌饭，那已经是奢侈了。</p><p>而在支教老师中有一个叫张静的，教画画的，那精美的线条与绚丽的色彩让陈刚深深着迷，从此，他爱上了画画，也表现出了非凡的天赋，连张静老师都为之震撼。</p><p>最后，张老师也是无法忍受这里艰难的生活环境，离开了，留给陈刚那一盒画笔。</p><p>而，张刚对外面的世界也越发充满了向往，最终向已被生活重担压弯的父母提出了自己的想法。</p><p>虽然他知道，这对于这个原本已经摇摇欲坠的家来说，无疑是雪上加霜。</p><p>但是他还是这么做了，他不甘，不甘一辈子就这样在这个荒芜的山村中耗尽自己的青春，更不甘为何外面的人可以整天吃肉喝酒，而自己却要啃着那连猪都难以下咽的东西！</p><p>他本以为父母会对他大为斥责，但是没有。</p><p>他的父母只是默默地将家里仅有的一头老黄牛卖了，换来了够他远行的路费。</p><p>那一年，他十八岁，带着满腔的热血与对付父母深深的愧疚，他沿着那蜿蜒崎岖的小路来了外面的世界。</p><p>他，农村娃子，很能吃苦，加上绘画的天赋以及贵人的扶持，最终他在外面这个灯红酒绿的世界站稳了脚跟。</p><p>然而此时已经十年过去了。当他再次步入那个大山深处的那个偏僻的山村，他的父母，他的父母已经连腰都直不起来了，分明是被生活的重担压得喘不过气，脸上也满是苍老深刻的皱纹。</p><p>那些就像一把把刀一样划过他那愧疚的心灵。</p><p>如果当初自己没有离开，自己年迈的父母或许还不至于如此的苍老，而这个家的重担本该由自己的肩膀来扛！</p><p>看着父母那满头飘零的白发，陈刚暗暗发誓，一定要让父母余生过得幸福快乐。然而当他将父母接来外面的世界，要好好尽孝时，竟然发生这样的灾难。</p><p>当那一声震天动地的声响后，头上的房子便坍塌了，而就在此时，他年老的父亲却不知哪来的力气，将他从那漫天掉下的石头中推了出来。等他回过神来，后面已是一片废墟。</p><p>那一刻，他仿佛感觉天都要塌了下来，</p><p>那么的无助，那么的痛苦，他扑在那废墟上，像疯狗一样挖了起来···</p><p> 幕四：</p><p>那一身白衣裙，虽然泥泞， 但却高洁。</p><p>那个女人就这样躺在胡一筒的怀里，脸上挂着满足的笑容。</p><p>是的，那个魂牵梦绕的怀抱，她生命的避风港，她终于可以安安稳稳地就这样躺着，不用担心 ，突然响起的电话铃声会将那个温暖的怀抱带走，让她自己一个人在那冰冷的床上发抖。 </p><p>爱上一个军人，她不后悔。</p><p>这些年来，那个男人的确对家庭关心得太少。</p><p>但是她知道，他还是爱这个家的，还是爱他们那可爱的女儿。</p><p>只不过，他有更崇高的责任，维护这个国家的和平与稳定。</p><p>就像面临着这一场旷世的灾难，他的男人，还是不能陪伴着她渡过，他那温暖的怀抱并不是她一个人的专属，那里也是无数人民的避风港。</p><p>她，嫁给他之后，也不曾想过要霸占那个温暖的怀抱。</p><p>她是个聪慧贤淑的女子，她只有一个小小的愿望，那就是可以死在那个温暖的怀抱中，嗅一嗅那温暖的气息，这样让她能够牢牢地记住那个气味，即使，喝下孟婆的汤，走过那奈何桥，在下一个轮回中，她依然可以通过这个气味，找到那个温暖的怀抱。</p><p>而今，这个愿望实现了，所以她已经很满足了。</p><p>胡一筒紧紧地搂住怀里的女人，那个他辜负太多的女人，如果自己放下救援的工作，早点赶到她的身边，或许，她就不会死。</p><p>但是，他不能啊，因为这是他的使命与职责所在，身为一个军人，他绝不能因为自己的一己私情而弃人民而不顾，更何况是一军统帅呢？</p><p>就像现在，他真的希望就这样陪着小莲而去，但是他不能，这个世界还有这么多人需要他，他那可爱的女儿，年迈的父母，以及那成千上万的人民。</p><p>他从不认为自己是个英雄，更不是一个救世主，因为他连自己的女人都保护不了，在他看来，这只是一个责任。</p><p>胡一筒抱着小莲站了起来，缓慢而又坚定地朝前方走去，眼眶终于无法承受住那一颗沉重的泪珠，滚落了下来。</p><p>而就在他的前方，一轮朝阳正在徐徐升起。</p><p>这个世界又重新恢复了光明，恢复了温暖，新的一天，新的希望。</p><p>​    ·············</p><p> “想要我的力量吗？献祭你的灵魂吧，这样你就可以打败那个人，得到自己心爱的女人了”只见一团黑色的烟雾中竟然传出这样的话语。</p><p>而在那团黑色烟雾面前，是一个年轻人，只能看到他那孤傲的背影，而身上的服饰竟然是龙家人！</p><p>只见他握紧双拳，握得是那么的紧，指甲深深地陷进手掌中，鲜血淌了下来，而他的身子正在不住的颤抖。</p><p>突然，他抬起了头，正视着那一团黑色的烟雾，眼中透着一股沉重与冷酷，</p><p>“我愿意！”</p><p>话音刚落，那黑色的烟雾便钻进了他的身躯，消失不见了。</p><p>而那个人，看着苍茫的星空，久久无语。</p><p>龙家，后山之上，一座无字天碑，高达千丈 ，直插云霄，光滑无比，如同一面镜子。</p><p>叶尘默默地伫立在天碑前，看着自己映在碑中的影像，那一具已经布满裂纹的骨架，久久不语。</p><p>“你们退后吧，远离这里。”叶尘淡淡地说道。</p><p>而后那些灰色的烟雾重新从他的白骨中冒了出来。</p><p>龙越看了叶尘一眼，龙延和龙傲也神情复杂地看着那一具白骨，最后三人叹息一声，飞到了远方的天际。</p><p>而那具白骨周围的灰色烟雾也越来越多，重新凝聚成那一股足以毁天灭地的黑色风暴，狠狠地撞向了那座无字天碑，然而却没有发出想像中的巨响。</p><p>那股黑色风暴如同鲸吞一般，被那无字天碑，吸入其中。</p><p>龙越三人大惊，上前查看，只见那具白骨已经消失了，彻底地凐灭于天地之间，没有留下一点尘土。</p><p>“然道，没有成功吗？”龙越叹息道。</p><p>突然，只听见“嘣”的一声，原本光滑无比的无字天碑出现了一条裂纹，接着是第二条，第三条···顷刻间裂纹布满了整座天碑，天碑轰然倒塌，露出一个黑色的洞口。</p><p>而此时，洞的另一边，一樽雕像突然睁开了眼睛，身上突然崩裂开来来，尘土飞飞洒洒，露出一位老者身影，也不知在那里打坐了多少年了。</p><p>那是？</p><p>然道？</p><p>只见他的面前那一座无字天碑竟然裂开了，露出了一个幽深的洞口。</p><p>依稀还能看见星光闪烁···</p><h4 id="陆"><a href="#陆" class="headerlink" title="陆"></a>陆</h4><p>灰暗的天空，如同一张苍白的无力的死人的面孔，毫无生机，偶尔几只寒鸦掠过，带着嗜血妖艳的瞳孔。</p><p>一个少年，穿着兽皮，略显得有些瘦弱，站立于山巅巨石之上，默默地注视着那最后一抹残阳余晖彻底被那暗黑的深山所吞噬。</p><p>阴风怒号，凄清的冷月也缓缓的爬上了山腰，沉甸甸的，月华如水，晕冷而冰凉，如同一只刚从棺材中伸出来的阴尸的手，轻轻抚摸着你的面庞 ，温柔而又满怀深情。</p><p>夜来了，十万大山中，群兽也沸腾起来，兽声鼎沸，似乎连这片天地也跟着震荡起来。</p><p>“该回去了？呵呵？”少年喃喃自语，看着山下那灯火阑珊的村落，嘴角露出一抹跟他年龄不符的沧桑笑容，慢慢地朝山下走去。</p><p>少年看起来不过十三四岁罢了，然而却没有一丝的稚气和童真，实在很是奇怪。</p><p> 阴深的丛林，闪烁着无数妖异的灯火，盯着少年幼小的身躯，不觉地舔了舔嘴角的獠牙。</p><p>然而少年似乎毫无察觉似的，继续慢慢地走着，留下一地长长的带着些落寞的身影。</p><p>“唰！”终于一只剑齿虎忍不住出手了，从丛林中一跃而出，两只前爪闪着寒光朝少年扑去，眼见就要将少年撕成了碎片，少年却突兀地消失了。</p><p>剑齿虎吓得眼珠子都快跳出来了，身上的毛也根根冲天，正鼓足十二万马力欲溜之大吉，却只感到脖子上的毛皮突兀的被人一抓一提一丢，然后“唰”的一声消失在了天际。</p><p>少年拍了拍手掌，摇了摇头，继续缓慢地走着。</p><p>丛林中那些妖异的灯火也一点点消失，这些野兽大都通灵，知道这家伙绝非它们能惹的，它们只是十万大山外围的最低等的野兽，即使像剑齿虎那样凶残的角色在这片广袤的大陆上也只是低等的存在，因为它们只是简单的靠着庞大的强壮的肉体，和那锋利的牙齿和爪子，来掠取食物和领地。</p><p>而在十万大山越里面的野兽也越来越可怕，背生双翼的天狼，三个脑袋的巨猿，长达几千丈的竹叶青，甚至那传说可以进化为龙的九头蛟龙。</p><p>而越高等的野兽也越聪明，有的甚至可以操纵风火雷电，纳息吐气，那便可以称为魔兽，它们体内有魔核，那是它们力量的源泉。</p><p>但是即使强如魔兽的存在也不是这片大陆的主宰，当然真正的主宰也并非巫族，也就是那九黎族，那数千年前被放逐到这片大陆的种族，永久的封禁， 彻底沦为岁月的囚徒，尽管挣扎了数千年依旧挣脱不了宿命的锁链。</p><p>没有人是这片大陆的主宰，确切的说是没有人真正地踏遍这片土地的每一个角落，纵然是巫族的最强大的战士也没敢真正的进入十万大山的深处，而最里面的顶级的魔兽也几乎不曾走出来过，维系着微妙的平衡。</p><p> 巫族的村落坐落在山脚之下，此时万家灯火，地上生起了一堆堆篝火，许多巫族人围坐在地上，烤着硕大的野猪或是健壮的剑齿虎等一些野兽，肉香四溢，显得和谐又温馨。</p><p>男人们大口喝酒，大口吃肉，女人也是彪悍十足，不甘落后，有的还即兴热舞起来，一片喜气洋洋，欢歌笑舞。</p><p>  然而少年却依旧冷冷地穿梭在篝火中，独自走着，置身于喧嚣之外，是不在乎吗，还是觉得可笑呢？</p><p>但是那平静冷然的外表之下的那颗心又是那么激动地跳动着，是在嘲讽吗，还是在渴求呢？少年不觉得裹紧了兽衣，似乎想藏起自己颗激烈跳动的心。</p><p>可笑啊，可笑自己还是族长的儿子啊，但是却不曾感受到那种家的温暖，相反是莫名的距离，甚至是淡淡的敌意，于是虽然年少，但却要装出一副冷然的面孔，来显示自己的傲骨与尊严，并不需要那所谓的亲情的温暖。</p><p>到家了吗，呵呵，少年踏进家中，迎面而来的是一道锐利的眼光，如同一把匕首，狠狠地朝自己扎来，那就是自己的母亲吗？</p><p>既然那么恨我，当初又为何把自己生下来呢？少年平静地看着自己的母亲。</p><p>那个已经略显苍老的妇人，妇人楞了一下，继续埋头吃饭。</p><p>“吃饭吧，等会到祖庙去，巫咸长老要见你。”他的父亲说道，语气不缓不急，从来都是那么的平淡，如同对一个外人一般，甚至不曾抬头看过少年一眼。</p><p>少年嗯的一声也不在言语，端着一碗饭坐在门口吃了起来。</p><p>从小到大，他都不曾跟自己的家人一起坐在一张桌子上或是围在一团篝火上吃过饭。那对于同龄人来说是那么常见的一件事对于他来说却是那么的奢侈，而又遥不可及。</p><p> 祖庙默默地栖息在村子的北方，就如同一块石头一般厚实而又沉重，而且外围的围墙都是由野兽的骨架拼凑起来的，随处可以见到狰狞的野兽的头颅。</p><p>少年默默地看着眼前的祖庙，不知为何祖庙总给人一种莫名的压迫感，虽然很淡，但是却深可入骨，有时他竟然感到有什么东西被束缚住，正在不甘得嘶吼着，咆哮着，挣脱着，来自于祖庙的很深很深的地底之下。</p><p>算了，这些又有自己啥事呢，少年摇了摇头，慢慢地走进祖庙。</p><p>祖庙是神圣而又庄严的，平时偌大的祖庙也就只有十巫十个长老，就连自己的父亲–巫族的族长除非有长老的召唤否则也很少踏足。</p><p>除了每年的年初的一次祭庙大会和六月的少年满16岁的成年礼，祖庙才会热闹一些，否则平时一般都紧闭大门。</p><p>十巫十个长老在族里是天神一般的存在，具有无上的地位和权威，但是也从不过问族里的俗事，除非有重大的紧急的事，连族长都解决不了才会求长老出面。</p><p>但是自己却经常出入祖庙，少年也不知道为何，长老们似乎对他寄予厚望，对他跟孙子似的，他也叫长老们爷爷奶奶的，填补了从父母那里缺失的亲情。</p><p>长老们时常传授他一些巫术和秘法，这让族里许多年轻一辈都对他带有一种敌意，还有淡淡的惧意，除非几个自小玩大的伙伴。</p><p>对此，他也只是一笑而过，虽然只是个十三四岁的少年，有时他甚至认为自己的灵魂其实并不属于这具躯壳，这真是既可笑又荒谬啊。</p><p>想到这儿，他也忍不住摇了摇头，笑了。</p><p>祖庙中有一座高耸入云的石塔，上面住着十巫中的巫祝，也是十巫中唯一的两个女性之一，每天斜倚在石塔上的观月台，观测着满天璀璨的繁星。</p><p>巫族相信人世间的兴灾与星辰天象是紧密相结合的，甚至是人的宿命也可从星象中观出一二，这是一门博大精深术法，名曰星术，自古由巫祝掌管，传说星术大成者甚至可以移动星辰日月，改变天地的格局。</p><p>少年从未见过巫祝踏出石塔一步，而且似乎岁月永远在她身上留不下一丝一毫的痕迹。</p><p>巫祝偶尔也会透过石窗用深邃而又爱怜的目光微微地注视着少年，她的容貌永远停留在二十年华，也永远是那一袭白衣，淡然而又娴静，高雅又不失柔情，宛然一朵深夜中默默绽放的百合，高贵淡雅，清尘出骨。</p><p>也不知道风河咋样了，少年看着石塔无奈地摇了摇头。</p><p>五年前风河被选为巫女，入住石塔跟巫祝学习星术，至今未曾踏出石塔一步。</p><p>想起以前经常跟自己屁股后头转的小丫头，少年不禁会心一笑，不知再见到她时，会不会跟巫祝一样呢，呵呵。</p><p>自小也就风河跟石野对自己不错，跟自己玩得开。</p><p> 而石野如今也就十七八岁，就长成了敦敦实实的一条精壮汉子，阔脸浓眉，膀大腰圆，自小就力气惊人，五岁时就可以拖着迅猛象，那一只几百吨的大家伙满山跑了。</p><p>如今更是成为了族里年轻一辈的第一勇士，力拔山兮气盖世，三年前就跟着父辈们深入十万大山中狩猎去了。</p><p>一个月前也再次进入大山，还没回来，少年多么向往也可以到深山中去闯一闯，毕竟年少轻狂，一腔热血，豪情万丈，总想有可以施展的地方。</p><p>经过石塔，沿着一条弯曲的小路，大概百步行程便可以看见九间朴素无华的院子，一字排开，都是茅草木头盖成的，多了几丝的清新和自然，少年不觉连心都宁静下来。</p><p>院子后面便是那高拔的苍翠的群山，山间云雾缭绕，仿若仙境。</p><p>人，仿佛就在此时，仰视着那堪比天高的群山才会感到自己的渺小吧。</p><p>或许，人于天地，就只是一粒砂吧，而就是一粒砂，其中包含着的谁敢说不是另一个天地呢？</p><p>最中间的院子，便是巫咸长老的了，少年推门而入，只见一老者白发苍苍，一身黑袍，横卧于一十人合抱都不见得合抱得来榕树之下，身前是一块黄梨木的桌子，桌上是一个茶几，上面放着两个茶杯，和一个已经放入茶叶的茶壶。</p><p>桌前是两个个凳子，少年默默地走到桌子前，轻轻地坐在一个凳子上。</p><p>老者似乎不曾知道少年前来，眼睛专注着那茶壶中的几片嫩绿的茶叶，徐徐地拿起刚于炭火上煮沸的装有泉水的陶泥做的水壶，缓缓地注入茶壶之中。原本紧缩的茶叶在沸水下一点一点地舒张，散发出清新的茶香。</p><p>少年深深地吸着那茶香，内心空灵，偶尔几声清脆的鸟叫更添几分宁静。</p><p>老者拿起茶壶徐徐地注入两个茶杯，茶水绿意盎然，晶莹剔透，茶香四溢，缠绕不绝。少年默默地拿起茶杯，凑到鼻间，嗅一嗅那诱人的茶香，然后慢慢地移到嘴唇，缓缓地注入口中，只感觉茶水倾喉咙而下，奔流而下，自己的内心如同被这茶水荡涤了一般，顿觉气爽神清。</p><p>老者也拿起茶杯，抿了一口，又放了下来，深邃地望着少年。</p><p>少年也并不避讳老者的目光。</p><p>“人生如茶，没有这沸水浸泡，又哪会有这清新的茶水呢?小尘啊，你也是时候该去大山历练一下啦。”</p><p> “好啊，巫咸爷爷，这一天，我也期待很久了。”</p><p>“石野那小家伙他们可能遇到危险了。”</p><p>“怎么会，石野那家伙那么强?！”少年有点着急，因为石野可是他的好兄弟。</p><p>“呵呵，小尘，莫急”，巫咸捋了捋那白花花的胡子继续说到，“巫罗那小子有跟石野那小家伙在一起呢。”</p><p>“巫罗爷爷？”</p><p>“是啊，石野这小家伙可是千年难得一见的奇才呢，其天赋之高连你都稍微不如。”</p><p>“呵呵，这我知道，从小就一直是被他虐着长大的。”想着小时候被石野那家伙一次一次虐倒在地，自己一次一次地不服输，一次一次地爬起来，又一次一次地找石野决斗，最后石野见了他跟老鼠见了猫似的，掉头就跑，少年不禁笑了起来。</p><p>“这次，我们十巫长老决定给石野祭炼一条兽魂，便让巫罗那小子领头深入十万大山，不料碰上狠角色了，连那小子巫罗都摆平不了，还不知羞地发信息回来求援。你看.”巫咸将茶具移到桌子旁边，一抚桌面，立刻出现一幅景象。</p><p>只见一头怪兽，形貌似牛，体色苍灰，独腿，头上无角。它的目光如日月辉映，声音似雷霆轰鸣，周围伴随着狂风暴雨，电闪雷鸣，屹立于海洋之上。</p><p>而在它的前方上空，一个黑袍身影伫立，手边不时出现一些诡异的黑色的符号，朝怪兽涌去，形成一张巨大的黑色的网，欲将怪兽牢牢束缚住。</p><p> 然而只见那怪兽大吼一声，如同九天惊雷，声震五百里，而那海水也霎那间席卷而上，硬生生地扯碎了满天交织着的那些诡异符号组成的巨大的网。</p><p>那个黑色身影一看这架势，差点没栽倒，横掠进海边的树林，喝到，走！瞬间消失无影。</p><p>而那巨大的怪兽看到人跑了，狂吼起来，整片天地都似乎颤动起来，波涛汹涌，惊涛骇浪，形成一个巨大的漩涡，直上九天，怪兽屹立于漩涡之上，威风凛凛，扫视着四方，忽地嘴巴一张，一个巨大的包裹着雷霆之力的水球瞬间轰击而出，远处的一处山峰竟被轰得连渣都不剩。</p><p> 怪兽似乎还不解气，但不等它有所动作，突然，北方，十万大山更深处传来一声低沉的吼叫，并不震耳，但是却生生地把那头怪兽的声音压了下去。</p><p>怪兽蓦然惊恐地睁大双眼，战栗地看着声音传来的方向，不甘地进入海里。</p><p>瞬间，天地之间又是一片寂静，风平浪静，万里无云。</p><p>景象渐渐消散，又出现那一块黄梨木的桌子，少年此时满脸惊愕，嘴唇发白，仿佛只听见胸腔里那颗心脏那般剧烈的跳，仿佛挣扎出来，突然肩上多了一只干瘦的手掌，如同一股清流，缓缓地让颤动着的心灵平静了下来。</p><p>“巫咸爷爷，刚才那是什么？好可怕的东西啊！石野和巫罗爷爷该不会有事吧？！”</p><p>“不会，它们出不来的，那些十万大山最里面的野兽，或许该叫圣兽吧！就刚才最后那声吼声连我的心跳都会加速，呵呵，人老了。”</p><p>“巫咸爷爷怎么会老呢？”自小巫咸爷爷在少年心中就像天神一般的存在，少年总以为巫咸爷爷是不会老的，与世长存的。</p><p>“啥孩子，在时间面前没有什么东西是不老，最后都会化成尘土一般，消散于天地之间，只是不知道此生我的使命是否可以实现啊！呵呵，已经几千年了，真不知道还是否还有挣扎的必要。”巫咸爱怜地看着少年，眼中闪过一丝痛楚，真的值得吗？</p><p>“我看巫祝奶奶就不会老啊？看起来最多只有二十多岁的样子啊？”</p><p>“那是那个老太婆臭美，硬用巫术给自己整个二十多岁如花似玉的脸蛋，其实，算算，也有四百多岁了吧，估计也一只脚踏进棺材了，呵呵。”</p><p>“这样啊，嘻嘻。”少年不禁笑了，只有在这些老爷爷老奶奶面前，他才能保持那颗童心，问一些幼稚的问题。</p><p>“刚才那只独角的怪兽知道是啥不？小尘。”</p><p>“不知道耶，貌似很厉害的样子！”</p><p>“当然厉害啦，那是夔牛，上古的灵兽了，虽然还算不上圣兽，但也相差不多了。相传上古时代，黄帝就是派人把夔牛的皮剥下来做成鼓皮，又深入雷泽抓了雷神杀了，抽出两根大腿骨当鼓槌。雷神骨槌，夔牛鼓是何等的不同凡响，要不然涿鹿一战，我们九黎族又岂会败得如此之惨，咳咳，呵呵，跟你说这些干啥呢？”，巫咸苦笑一声，继续道，“倒是想不到这里竟然也有夔牛此等灵兽，如果能够收服的话，那么石野那小家伙绝对会比现在强一大截。”</p><p>“真的吗？那太好了！”</p><p>“他变强，你那么高兴啊？”</p><p>“那当然啦，我们是兄弟吗？再说越强越有挑战性，我会努力打败他的！”少年握紧拳头，看着巫咸长老，一脸的豪气。</p><p>“呵呵，那就好，你先回去收拾一下，明天巫彭爷爷会带你去找石野那小家伙的。”</p><p>“嗯，那我先下去了，巫咸爷爷。”少年向巫咸挥了挥手，缓缓地走出了院子。</p><p>片刻后。</p><p>  巫咸重新拿出两个杯子，一一放在桌上，重新泡上两壶茶。</p><p>此时，只见从院子外飘进两个身影，一男一女，一黑一白，慢慢地坐在凳子上。</p><p>“好啊，老家伙，竟敢在小尘面前说我是老太婆！”白衣女子，也就二十年华，此时嘟着小嘴，哀怨地看着巫咸，说不出的可爱动人。</p><p>巫咸和另一个黑袍男子相视一下，哈哈大笑起来。</p><p>哈哈哈哈哈哈哈·····</p><p> 笑声久久地回荡，</p><p>而后院子再次寂静下来，不闻鸟雀声。</p><h4 id="柒"><a href="#柒" class="headerlink" title="柒"></a>柒</h4><p>“好吧，我错了。”，巫咸无奈地捋了一捋那白花花的胡须，收敛笑容，正色道：“其他几位都在闭关，就咱几位比较清闲了，找你们来是想问问你们对关于从十万大山深处发出吼叫的那只魔兽，额，圣兽吧，有啥看法，影像我已经给你们看过了。”</p><p>一听这问题，一男一女都不禁皱起了眉头。</p><p>“巫彭你先说吧，论武力十巫属你最有发言权了。”巫咸举起茶杯，深深地抿了一口，深邃着看着对面那个黑袍男子。</p><p>只见黑袍男子看上去也就四十多岁，脸上布满着硬性的线条，就如同一青铜雕像一般，此时默默地放下手中的茶杯，正襟危坐,道：“很强，我估计挡不住它十次攻击。”</p><p>似乎早有意料，巫咸脸色亦无明显变化，转向那白衣女子，问道：“你觉得呢，巫祝。”</p><p>“我曾试图用星术感应它的存在，但是被隔绝了，十万大山最里面的百座大山似乎是个禁地，硬生生地切断外界的一切感知，纵然连星术也奈何不了，或许是我实力不够吧。”</p><p>“不是！你天资聪慧，在星术上更是超越了祖辈，不然十四年前，咳咳，你们都知道，就不提了。”，巫咸又抿了一口茶水，“先祖沦落此地已五千余载，期间，不知有多少大胆识者，武力通天者进入最深处的百座大山之中，但无一例外，无一人生还。还有那浩瀚无垠的修罗海，祖辈也曾企图横跨修罗海，看看海的对岸究竟是何方天地，但亦无一人回来过，或许已经葬身于修罗海底吧。还记得咱们两百年前吗？”。</p><p> 对面一男一女皆默然点了点头。</p><p>“两百年前，咱们年轻一辈陆续成为新的十巫，年少轻狂，满腔热血，企图横越修罗海。不曾想到，行进不到五千里，就碰到了修罗鸟那恐怖的八阶魔兽，集十人之力，废了九牛二虎之力，才毙了两只修罗鸟，看着眼前依旧漫无边际的海面，有心无力，便退了回来。八阶魔兽亦称为灵兽，九阶则为圣兽，十阶为神兽，如当年随黄帝出战的应龙大将，便是有了神性的存在。”</p><p>  巫咸顿了顿，继续说道：“据咱们巫族上古传下的一些甲骨文字记载，十阶之上还有天阶，或许是洪荒传说中的妖帝鲲鹏之类的存在吧。”</p><p>“妖帝鲲鹏？那真的存在吗？”巫祝疑惑道。</p><p>“是啊，太久远了，少说也是几百万年，甚至几千万年前了，当时的妖族势力极其庞大，而人族还未诞生。但当时咱们巫族也是极其强悍的，十二祖巫横扫天地，最终妖族被天道所弃，被我们巫族战败，泯灭了神性，沦为魔兽之类的存在，妖帝鲲鹏及其他妖族巨擘，例如孔宣等也不知所踪了，或许早已经泯灭于天地间了吧。</p><p>可笑的是我们巫族最终也是被天道所弃，沦为人族的垫脚石，最后竟然被黄帝封禁在这片逆乱空间中。哈哈哈···”</p><p>  巫咸凄凉地笑着，巫祝和巫彭也是一脸的黯然。</p><p>“天道？何为天道？”巫彭眼中闪过一丝冷光。</p><p>“我也不知道，冥冥中似乎有一股庞大的力量干涉着这六道的轮回，种族的兴衰。当年先祖蚩尤的确做得有点出格了，乱天下之德，妄想称霸天下，却不曾想到涿鹿之战会败得如此凄惨！”</p><p>“但是黄帝也不应该把我们整个巫族封禁于此，近五千于年了，而且竟然下了如此可怕的诅咒！”，巫彭愤然而起，青筋暴起，“五千余年来，我们巫族人杰辈出，不少星术大成者已经研究出施展强大的星术，移星换月，借助庞大的星辰之力硬生生地将族人转移出逆乱空间，但是··，哎··”</p><p>“的确！”，巫祝接过巫彭的话语说道，“也确实转移成功了，但是一旦脱离出逆乱空间，无论是武力乃至巫术何等高超的，只要是巫族，无一例外都是躯壳崩碎，化为粉末。而祖辈也曾试过将魔兽转移出去，魔兽毫发无损！”</p><p>“不错！”，巫咸斩钉截铁说道，“黄帝下了诅咒，深入灵魂的诅咒，只要是巫族，都无法挣脱这逆乱空间的束缚，即使挣脱了，也会被诅咒的力量所毁灭！”</p><p> 此时巫祝和巫彭都一脸的凄凉和哀默更多的是愤慨，五千于年多少杰出的祖辈在苦苦地挣扎着，尤其是身为十巫长老，更是身负着这一重任，为了族人而努力地奋斗着，希冀带领族人打破这一牢笼，回到魂牵梦绕的故乡！</p><p>这条路断断续续地走了五千于年，其间躺满了多少祖辈的尸体，浸泡了多少祖辈的血泪，这是无法承受的重担，压垮了一代又一代的十巫们。</p><p>又有谁知道，这条路还要走多远，何处是尽头。</p><p>巫咸也是叹息不已，见他二人默然无语，继续说道：“而上一任的巫祝长老想出了一个方法，更是用毕生精力和心血修复了九幽聚魂大阵··”</p><p>“别说了，十四年前的事，我不想再提起了，哎··”，巫祝一脸悲痛地打断了巫咸的话，“还是静等十年吧。逆乱空间以光速的速度，绕着一个点旋转，一千年一个周期，如今再有十年，千年周期就到了，那时将会离那个点最近，希望星辰的力量足以将，唉，送到那个点里吧。也希望他可以找到破解诅咒的办法，那时一切也就该画上一个句号了。”</p><p>“星辰之力的确强大，但是施展那么高深的星术耗费的灵力也是无比巨大的，十四年前，你已经施展一次了，整整闭关十年才恢复过来。即使现在，我都可以感受得到你的气血不足。不然也不会那么快选巫女··”</p><p>“闭嘴！老家伙，我的事我会处理好的。”巫祝狠狠地瞪一巫咸一眼。</p><p>巫咸无奈，只能苦笑，还是老样子啊，那么好强和臭美的一个女人啊，明明气血已经不足，还硬要耗费巫术维持着那吹弹可破的娟秀容颜。</p><p>内心不禁也有一些悲凉，或许再施展一次，估计另一只脚也快要迈进棺材了吧。</p><p>这一切真的值得吗，十四年前的事仍仿若昨日啊，哎···，罪孽啊··</p><p>“十年之后也将是两千年一次的，妖月临世了，圣兽的力量也将空前的庞大，封印的力量也将淡薄如纸，当初十万大山深处就蹦出了饕餮，见人就吃，当年那一战巫族就死伤了近两万，占了当时巫族人数的五分之一，最终集合十巫的力量启动太上封魔大阵才勉强将其封印。而十年后，谁又知道十万大山深处又是否会跳出跟饕餮一样的狠角色，而两千年的封印之力已经日渐稀薄，又是否能困住饕餮呢？想必你们也能感受得到来自地底那愤怒的咆哮与嘶吼吧！”巫咸摇头叹道。</p><p>“饕餮传说乃龙之第五子，实力自然强悍，但是给我的直觉，十万大山深处肯定还有比饕餮更强的的圣兽，甚至是神兽的存在，这片空间太过于神秘了，也过于庞大了，不知道其中隐藏着何等的秘密。我有时甚至认为，当初黄帝有点多此一举，黄帝本是杀伐果断之人，当初我们残留的巫族也就几万罢了，杀了又如何呢？为何要耗费巨大的力量把我们封禁这逆乱空间，还下了如此可怕的诅咒，是惩罚吗？我看不像！”巫彭眉头紧锁。</p><p>“够了，放肆！巫彭，你知道你在说什么吗？”，巫咸重重地放下茶杯，溅了一桌的茶水。</p><p>“罢了，你们也别猜了，我们十巫的使命就是早日带领族人挣脱这宿命的枷锁。先走一步了，看来真得再闭关十年，不然还不知十年后还可不可以折腾呢？”巫祝拿起茶杯，一饮而尽，飘然而走，只留下一个娟秀轻盈的背影，消失在院子门口。</p><p>“咳咳，罢了，该来的总是要来的，巫彭你先下去准备吧，明日带小尘进山吧。”巫咸自顾自的另取一勺茶叶置于茶壶底。</p><p>  而巫彭向巫咸一拱手，黑色身影也淡然消失在了门口。</p><p> 只留下巫咸，重新端起泉水已经烧沸的水壶，倒进茶壶中，茶叶沉沉浮浮几下，也便再一次一点一点的舒张开来，茶香四溢，徐徐升起。</p><p>一个人，一杯茶，一块桌子，一棵老榕树，简朴平淡，但是却似乎还带着一丝的悲凉，“哎····”，只听见院子中传出一声叹息声，久久的叹息声，之后又恢复了平静。</p><p>云淡风轻，月华如水。</p><p>少年离开祖庙，默默地走着，凄清的月光把他的身影托得很长很长。</p><p>也不知道他想什么，只是看着地面，看着自己的脚尖，慢慢地走着。</p><p>前面篝火的火焰依旧欢快地跳跃着，跳跃着的还有少女们那飘逸的柔软的身躯。</p><p>有的年纪大的娘们，虽然已是年老色衰，却也是彪悍劲十足，扭动着水桶腰，倒也有模有样的，势头不输年轻貌美的女子。</p><p>地面团坐着的彪悍的男人们那是大声叫好，手头也不闲着。</p><p>有的扛着比自己身躯还庞大的象腿死命地啃着，或许把那象腿想成娘们的那嫩白性感的美腿了吧，口水都能淌成河了。</p><p>有的扛着大酒缸，或者直接就把头浸泡在酒缸里了，昏昏睡去了。</p><p>有的就是同旁边几个评论哪个娘们脸蛋正点，屁股翘点，奶儿水点，再不就开些裤腰带里的荤段子。倒也是其乐融融，日子也还算有滋有润的。</p><p>少年默然地走到篝火的边缘处，看着欢笑的族人们，内心说不出的凄凉。</p><p>他的父亲，此时或许就坐在门槛上抽着半袋子旱烟吧，从自己记事起就那样，晚饭后就坐着抽，一直抽到午夜，等篝火都散了，才悄然起身，去睡觉。</p><p>而地上已是可以没过鞋底的厚厚的一堆烟灰了。而他的母亲则是没事缝补一些旧的衣物，实在没事干就干坐着，在发呆吧，就是半天。</p><p> 从来不曾看见过他们出来跟族人们一起欢歌笑舞，吃肉喝酒。</p><p>记得听那些跟自己父母年纪相仿的的叔叔伯伯说过，当年自己的母亲兮颜可是族里一支花，能歌善舞，而且生得是那叫一个水灵，眉清目秀，细皮嫩肉，身段子姣好飘逸，而且在巫术领悟上也是族里年轻一代数一数二的，当时巫祝还差点就选为下任巫女呢。族里一半的大老爷们都栽倒在其石榴裙下。</p><p>而自己的父亲尚皓也是族里的一个帅小伙，有勇有谋，响当当的一条汉子，还不到四十岁便当上族长，可以说年轻有为啊。</p><p>两人倒也般配，也互相对上眼了，暗生情愫，你侬我蜜的，族里选了个合适的日子也便成了这一对小情人。</p><p>新婚之夜，那是万人空巷，无比热闹，地面篝火欢快的跳跃着，小两口也是欢快着跳跃着，巫族汉子有的也光着膀子扭起来，风骚娘们更是扭得昏天暗地，忘乎所以。</p><p> 族长新婚，举族同庆，连十巫长老也是纷至踏来，为新人送上祝福，好不风光和幸福。</p><p> 婚后小两口也是和和美美，十分恩爱，君当作磐石，妾当作蒲丝，恨不得两人就用蜂蜜粘在一起，用麻绳捆在一起，倒是成了一段佳话，成为族里人人羡慕的恩爱眷侣。</p><p>兮颜倒也争气，一年不到就生了个大胖小子，取名尚尘。但是刚出生没三天，大胖小子，就被十巫带进祖庙，尚皓夫妇也被请到祖庙。</p><p>无人知道那一夜祖庙到底发生了什么，只记得巫咸长老曾告诫族人那一夜都不许出来，老老实实地呆在屋子里。</p><p>只感到那一夜似乎比往常更黑，更冷，原本漫天繁星，皓月千里，顷刻间被冰冷郁黑的天幕给吞噬，突然一道巨大的光束从祖庙石塔迸射出来，直接深深地扎进天幕之中，撕裂了整片虚空，仿若白昼。</p><p>紧接着，似乎地狱之门被打开了，无数游荡在宇宙的阴灵，似乎受到招引，被莫名的力量从宇宙中抽出来，沿着那耀眼的光束被硬生生地被注入石塔中。</p><p>紧接着传来阴灵凄冽的嘶吼，不安的咆哮，不时有许多灰色的烟雾从石塔中徐徐冒起，最终彻底消失在云端深处，不留一点痕迹。</p><p>持续了近一柱香的时间，突然只听见一声惊叹，“好强大的灵魂！”，似乎是巫咸长老的声音，紧跟着，光束消失了，天幕依旧寂黑如墨，冰冷如铁，天地间一片静寂。</p><p>唯有不时的风吹打着窗户发出“呼呼”的声音，仔细一听，似乎是有人在轻声叹息。</p><p> 过了不久，祖庙突然传出一声凄厉的惨叫声，又突然嘎然而止，而那声音竟然是来自兮颜的。</p><p>事后的整整一年，兮颜疯了，那时竟然拿着一把剪刀要刺死自己的孩子！</p><p>后来经过漫长的调养才慢慢的恢复过来，但是原本如花似玉的娟秀容颜却如枯萎的黄花一般憔悴黯淡，有的头发也白了。从此，笑，就不曾出现在她的脸上。</p><p>而，她也不曾在走出屋子半步，甚至都不曾抱过自己的孩子和给自己的孩子喂过一口奶，而那个孩子最初的三年都是生活在祖庙，由十巫照顾抚养吧。</p><p>无人知道，那一晚，到底发生了什么，有的族人好奇地问族长，但族长总是黑沉着大脸，只字未提。</p><p>而且，原本整天乐呵呵的，平易近人的尚皓，如今却变得沉默，呆板，总是默默地处理好族里的事，然后空闲时间，就在一边抽着闷烟，那袅袅升起的烟雾，迷糊着所有族人人对他的回忆，或许也模糊了他自己的回忆吧。</p><p>烟，麻痹得了颤动的心灵吗？或许，只有他知道吧。</p><p>三年后，族长黑沉着脸，从祖庙带回了自己的孩子，而那个孩子，才三岁，却已经会跑会跳会翻跟头了，而且也是乐哈哈的，不老实地跟在自己父亲身后，时而追着蝴蝶乱转，时而嗅嗅路边的小花小草的，还会腾空翻呢。</p><p>尚皓看着自己的孩子无忧无虑的样子，黑沉着的脸也稍微有一点缓和，更多的是无奈吧。</p><p>又三年过去了，但是刚出祖庙的天真无暇的孩子不见了，取而代之的是一个沉默少话的俊秀少年。</p><p>从第一次进自己家门，想抱一抱，亲一亲那个是自己母亲的女人，却被厌恶地一把推翻在地，被恶狠狠地骂道，“滚！”。</p><p> 日积月累，少年的心也麻木了吧，唯有看着别的族人一家其乐融融的，小孩子高高地坐在自己父亲肩膀上，像小猫一般安静地蜷缩在自己母亲温暖的怀里，那已经伤痕累累的心灵才会有那么一丝的颤抖吧。</p><p> 如今已是十四年华的少年，默默地坐在地上，怔怔地望着那冷清的月亮，高高地挂在高高的天空中，那么遥远啊。</p><p>沉甸甸的泪水最终漫过了那高高的眼眶，滴落在地，悄然无声。</p><p>不远处，篝火依旧欢快地跳跃着，跳跃着啊，一声声畅快淋漓的笑声是那么的刺耳啊，却又是那么的大声啊，以至于在飘荡在空中，风带着笑声飘啊飘啊···</p><p>此夜，注定无眠。</p><h4 id="捌"><a href="#捌" class="headerlink" title="捌"></a>捌</h4><p>黎明的曙光，驱散了破晓前的黑暗与寂静，几声婉转清脆的莺啼声，唤醒了沉睡的巫族村庄。村庄似乎伸了个懒腰，打了个哈欠，淡缕炊烟，袅袅而起，忙碌的一天又开始了。</p><p>男人该打猎的准备着刀具弓箭啥的，女人则安分地在家烧柴做饭，耕田织布，拉扯着调皮的娃，这日子虽平凡但也温馨。</p><p> 少年依旧坐在那里，昨夜篝火的边缘，静静地坐着，远处的篝火虽然已经熄灭，但有的还冒着些轻烟。</p><p>一夜的雨露，打湿了少年略显破旧的衣襟，旭日东升，朝阳如火，新的一天，新的希望，新的征程。</p><p>少年站了起来，转过身来，晨光熹微，跟随着少年的脚步，留下一地斑驳的影子。</p><p>此时，村外已经聚集不少彪悍的爷们，有的伸展着腰骨，有的擦拭着武器，有的眯着眼沐浴在清晨的朝阳下，很是惬意。</p><p>这次去的，无一例外都是打猎的好手，其中还有石野的父亲石虎。石虎跟尚尘的父亲尙皓是好兄弟，而少年自小跟石野玩大的，所以石虎俨然已经把尚尘当做半个儿子了，怜爱有加。</p><p>所以尚尘打心底非常尊敬石虎，尊称他为石伯伯。</p><p>石虎也是个大块头，熟话说，有其子必有其父吗，也是虎背熊腰，壮得跟头牛似的。尚尘还不到他的腰间。</p><p>此时，看见尚尘走来，石虎招了招手，叫尚尘过来。然后蹲下去，摸了摸尚尘那小小的脑袋瓜子，爱怜地问道：“小尘啊，这次也去吗？”</p><p>尚尘显然也一脸兴奋，说道：“是啊，巫咸爷爷让我去历练历练。石伯伯是去找石野吗？“</p><p>“嗯，这臭小子，还没回来，家里那婆娘没日没夜地唠叨，耳朵都快起茧了。索性去看看那臭小子到底咋样了。“石虎无可奈何地耸耸肩。</p><p>“石伯伯，你不用担心，石野那小子肯定还活蹦乱跳的。“</p><p>“也是，那臭小子比猴子还皮，比泥鳅还滑，搞不好正躲在哪里睡大觉呢？家里那婆娘纯粹瞎操心。“石虎喃喃自语。</p><p>而此时，尙皓也来了，手里还拿着几张大饼，走到少年面前，塞在他手里。依旧是面无表情地说道：“早饭还没吃，趁热吃点，到山上机灵点，见到不对劲，就跑。”</p><p>说完，尙皓又过去拍了拍石虎的肩膀，交代大伙两句便又转身离去了。</p><p>尚尘握着还热腾的大饼，看着父亲离去的背影，不觉得眼角有些湿润，狠狠咬了几口，便都吃完了，全身暖烘烘的，很温暖的感觉，很久没有的的感觉。</p><p>而此时，巫彭也来了，一身黑袍，神情严肃，招呼一下，一行人，三四十个，便启程了。</p><p>尚尘跟在巫彭旁边，走在队伍的中间。而石虎等十几个大汉，看起来显然是有了几十年经验的老猎人在前面开路，后面是十几个稍微年轻的汉子，看起来也有二三十岁，但是从凌厉的眼神，矫健的身手来看，都是不能小看的。</p><p>其中尚尘印象比较深刻的是，一个是前方那个拿着一把三尺多长烟杆子的老头子，大家都叫他烟老爷子。身体枯槁，瘦小，穿得也是破破烂烂的，估计十几年没换过衣服了，而且烟不离嘴，走一步吸一口。</p><p>看起来就是个糟蹋的老头子，尚尘原本也这么认为。直到他们开始深入十万大山时，遇到一了只三头青狼，背生双翅，而且还会喷吐冰柱，一棵千年大树冻裂成了好几大块。</p><p>然而这糟老头子却只打了个打喷嚏，从烟杆子烟嘴口喷出火来，直接把三头青狼吐的冰柱化了，而且席卷而上，三头青狼变成了三头烤狼，成了当晚的晚餐。</p><p>事后，尚尘才知道，三头青狼的三个脑袋分别可以吐出冰，火，闪电，威力巨大，可以算得上是五阶魔兽中的佼佼者了，没想到被烟老爷子一个喷嚏给烤了。</p><p>据石虎说那烟老爷子已经三百多岁了，算得上巫族的老一辈了。一身修为已经直逼十巫，也是当年的十巫候选人之一，不过败给了现在的巫彭。</p><p>不过，他和巫彭仍然是好友，所以这次，巫彭也把他叫上了。这老家伙也乐意到山上活动活动筋骨，晒晒太阳。</p><p>还有一个让尚尘比较有印象的是，后面那个背着弓的青年，约莫二十来岁，话很少，长得也很平凡，就跟石头一样，毫不起眼。但是就是这样的家伙，一箭爆了一头闪电鸟的脑袋。</p><p>闪电鸟也是五阶中上级别的魔兽，迅如闪电，而且一扇翅膀，还会挂出威力巨大的闪电风暴，足以扫平一大片山岭。</p><p>但是却死在一个看起来也就二十年岁，实际上也是二十来岁的青年手里。</p><p>那个青年叫奕轩，是上古传说中曾射下三足金乌神兽的后羿的后代。青年背着的那把弓便是后羿弓，其中蕴含着后羿的力量，也只有他的后代可以拉开那把弓。</p><p>所以，你也就不会对奕轩可以射下闪电鸟而惊异了，后羿弓的威力足以将一座山峰夷为平地。</p><p>算起来也已经走了近五天了，已经逐渐深入了十万大山之中。遇到的魔兽也越发的强大，今天赫然跳出了一只全身燃烧着黑色火焰的豹子。</p><p>连巫彭的脸色也不禁一变，因为那是七阶巅峰的存在，黑火豹。</p><p>这头黑火豹很优雅地站在远方，饶有兴致地打量着前方的人类，显然有些不屑，因为它是这方圆百里的王者。没有人敢挑衅它王者的威严，挑战者的下场只有一个，死亡。</p><p>可是，这次，它，遇到的挑战者是巫彭。</p><p>因为，它竟然一口把奕轩射出的箭给吞了。虽说很大可能是奕轩的功力不够，没能发挥出后羿弓真正的力量，但也足以说明黑火豹的恐怖。</p><p>巫彭，没有带武器，因为他不需要武器，他自己无疑就是一把武器。</p><p>巫彭，就那样站着，坦然面对着来自黑火豹的威压。</p><p>黑火豹决定给这个挑战者一点颜色瞧瞧了。</p><p>它动了，但是除了那个烟老爷子和巫彭外，没有人看清那只豹子的身影，尚尘也看不到。</p><p>黑火豹忽然消失了，然后突兀地出现巫彭上空，一爪直接要刮了巫彭的头颅。</p><p>但是巫彭当然也不是省油的灯，一拳迎了上去，只听砰的一声，黑火豹被轰到天上去，而巫彭脚则陷入了大地，没到膝盖处。</p><p>巫彭随即也冲上天去，一击重拳，仿若流星，朝黑火豹击去。但是被黑火豹一个侧身躲了过去，并且尾巴将巫彭困住甩了出去。然后，张开血盆大口，喷吐出黑色而又炙热的火焰，朝巫彭轰去。</p><p>但是巫彭反应神速，摔地后立即后翻身，躲过一击，但是大家还是心有余悸，只见巫彭刚才倒地处方圆一里沦为灰烬，如果击到巫彭身上，那么后果可想而知。</p><p>巫彭此时，一手撑地，默默地看着前方空中的黑火豹，眼神凝聚，仿似一把利剑。随即身体也像利剑一般冲了出去，狠狠地扎向黑火豹。</p><p>黑火豹张嘴又是一个吐出一个黑色的火焰团，但是令所有人目瞪口呆的是这时，巫彭竟然一拳将其轰得破碎。</p><p>这才是巫彭真正的战力， 那头黑火豹惨了。烟老爷子猛抽一口浓烟，饶有兴致地看着上空那一场大战。</p><p>黑火豹显然也没料到，巫彭突然变得这么生猛，但是反应也是神速，刚好闪了过去。</p><p>黑火豹感到害怕了，因为从那个人类身上涌起了滔天的战意，连它都无法承受。</p><p>巫彭看着黑火豹的眼神，眼中闪过一丝冷光，因为他已经从黑火豹的眼中看出了惧意，这场战斗也就没有悬念了，因为临敌对战，自信就是最强大的武器。失去了自信，在巫彭眼里，黑火豹只是一只小黑猫罢了。</p><p>黑火豹，突然转身跃进了下方丛林，犹如一道黑色的闪电。</p><p>但是巫彭又怎么会轻易放过它呢，随即也追了上去，转瞬便无影踪了。</p><p>余下的众人都不禁松了一口气，呆在原地，等着巫彭归来。</p><p>尚尘暗道：我一定要变得像巫彭爷爷一样强。</p><p>突然，烟老爷子抽烟的手抖动了一下，眼睛突兀地一缩，盯着远处的丛林，喝道：你们退后。</p><p>只见稀疏的丛林中，猛地露出了一只绿色的三角形的脑袋，赫然有一个茅草屋那么大，竟然是一只巨大的竹叶青。只见它盯着众人，妖异的眼光一闪而过，舔了舔那猩红的舌头，显然对这份到嘴的美餐还满意。</p><p>烟老爷子瞪着那条竹叶青，喝道：孽畜，还不退走，小心你烟大爷把熬成蛇羹当宵夜。</p><p>但是那头竹叶青显然对烟老爷子的恐吓不感冒，张开血盆大口就朝烟老爷子咬过来，烟大老爷立马一跃三丈多高，烟杆子朝竹叶青的脑袋砸了过去。</p><p>只见竹叶青脑袋摇晃了三下，便又清醒过来，蛇尾一卷直接将烟老爷子身体缠绕起来，烟老爷子那黑沉沉的脸立马比猴子的屁股还红。</p><p>石虎一声怒吼，举起一块赶得上竹叶青脑袋的巨石朝竹叶青砸了过去，但是显然跟鸡蛋碰石头没啥两样，巨石碎了，蛇的脑袋半片鳞片都没掉落。</p><p>但是趁着空档，石虎那硕大的拳头也重重地砸到了蛇的眼睛，而与此同时，奕轩搭弓射箭，箭如流星，直接射到竹叶青的七寸处。</p><p>竹叶青，一声痛呼，缠绕烟老爷子的蛇尾稍微一松，烟老爷子趁机脱逃出来，喝道：快走！</p><p>大家立马朝四面八方逃去，石虎一手直接把尚尘扛到肩膀上，跑得跟一阵风似的。</p><p>但是竹叶青发怒了，还从没有敢这么戏弄它。只见它上身直立起来，竟然有三十多米高，一个猛扎，一口将一个巫族的壮年猎人吞了下去，连骨头渣子都没吐出来。</p><p>烟老爷子猛地挡住在竹叶青面前，一跃而起，当头棒喝，但是还没打到竹叶青的脑袋便被其蛇尾抽飞出去，撞倒了一个合抱之木，烟老爷子吐了好几大口血。</p><p>这时，竹叶青也不管烟老爷子死活，继续朝奔跑的猎人盘过去。</p><p>这次，它的目标是石虎，更确切地说是尚尘。</p><p>妖异的蛇眼，如同棕色的宝石一般，盯着尚尘，那仿佛已经是自己腹中美餐的食物，张开了血盆大口。</p><p>石虎猛地将尚尘抛到一边，转身跃起，一拳砸在了蛇的鼻子上，但是被砸飞的反而是石虎自己，也撞倒了一个大树，想要爬起来，又被竹叶青一蛇尾给抽飞了。</p><p>随即，又有五个猎人被竹叶青生吞了，那锋利的牙齿活生生地切裂了肉体，鲜血从竹叶青的嘴角溢了出来，甚至有一个人的脑袋从竹叶青的嘴巴掉了下来，落到尚尘的面前。</p><p>尚尘，愤怒地注视着竹叶青，第一次感觉离死亡是那么的近，而自己却又是那么的无能为力，只能眼睁睁地看着身边的人活生生地被吞吃。</p><p>那一刻，他，迫切渴望力量，强大的力量。</p><p>但是，最终巨蛇的血盆大口成了他的归宿，顷刻间，尚尘没入巨蛇的血盆大口中。</p><p>“不，小尘！”远方传来一声怒吼，赫然是巫彭，只见他手中还提着一只垂死的黑豹子。</p><p>竹叶青一看，立马窜进丛林，因为它感觉那个家伙身上强大的力量，而且连黑火豹都死在他手上，而自己等级只不过比黑火豹高一点罢了。八阶初级的魔兽，已经属于灵兽了，智商已经堪比人类了，早已通灵了。</p><p>巫彭，丢下手中的黑火豹，追了过去。</p><p>那一刻，滔天的怒火，让巫彭狂暴起来，战力达到了前所未有的高峰。</p><p>虽然竹叶青曲线前进的速度很快，但是竟也摆脱不了巫彭，而且越来越近。</p><p>竹叶青不安了，求生的本能越激发它的潜力。</p><p>但是，也是摆脱不了巫彭，而此时也越来越深入十万大山深处，巫彭也知道越里面那些魔兽的可怕，但是他还是追了进去，因为巫彭知道，尚尘对于巫族的意义。</p><p>只见，巫彭追上了竹叶青，一拳砸向了竹叶青的脑袋，直接把百米长的竹叶青轰飞了，撞倒了一大片丛林。</p><p>巫彭随即又冲了上去，但是一只魔兽挡在了他的前面，赫然是八阶中等魔兽白骨蛛。</p><p>这等阶级的魔兽已经可以吐出人语了。</p><p>“巫族，这里不是你们的地盘。“白骨蛛显然也知道巫彭的强大，警告道。</p><p>竹叶青见此，赶忙窜进丛林，跑了。</p><p>巫彭随即想追上去，但是白骨蛛硬是挡下了他的去路。</p><p>“孽畜，滚开。“巫彭一声咆哮，一拳轰向白骨蛛，但是却被挡了下来。</p><p>但是挡下的却不是，白骨蛛，而是一只猪。</p><p>白骨蛛看到这只猪竟然跪了下去，嘴里虔诚地说道：“拜见菊花猪大人。”</p><p>巫彭一张老脸都给气得涨红了，但是却无济于事，那只猪，伸出右蹄子，他便被禁锢在空中，动弹不得，不由得一股无力感。</p><p>菊花猪打量一下巫彭，道：“巫族，我不想杀你，但是无论谁打扰到十万大山里面的老祖宗都得死。我劝你还是乖乖回去。”</p><p>“把那条蛇交给我，它吃了我的族人。”巫彭恶狠狠地盯着菊花猪。</p><p>“笑话，只允许你们巫族吃我们魔兽，不允许我们吃你们。几千年来，老祖宗睁一只眼闭一只眼，你们还真的以为我们魔兽好欺负吗？如果不是看在与你们祖辈的约定，今天，就杀了你又如何？”菊花猪冷哼一声，右蹄子一挥，巫彭随即被击飞出去。</p><p>“菊花猪大人，连老夫的薄面也不给了吗？”空间突然被撕裂开来，一声清冷的声音传了出来。</p><p>出现了一个老者，一身黑袍，赫然是巫咸，旁边还有一个女子，不用说便是巫祝了。</p><p>而菊花猪只不过是笑了笑，“想不到你这老家伙也会出来。”</p><p>巫咸冷声道：“今天无论如何，你要把那条蛇交出来。”</p><p>“我要是不呢？”菊花猪淡然笑道，赫然不把巫咸的恐吓当一回事。</p><p>“那你就试试我这把老骨头能不能拉你一块进地狱吧。”巫咸冷冷地说道，黑袍中传出可怕的能量波动。</p><p>菊花猪显然也没料到巫咸今天竟这么的强势，完全跟他低调朴实的作风不搭边。显然它没事也不想招惹巫咸，因为巫咸对巫术的精通说不定已经超越了巫族祖辈。它还犹记得两千年前，那一场旷世大战，当年它，还只是一只小猪罢了。</p><p>巫族的祖辈那通天的神通到现在，它还心有余悸，竟然可以硬生生地封禁住饕餮，要知道饕餮也是十万大山最里面百座山峰的主儿。</p><p>十万大山最深处的百座山峰有着来自于洪荒远古的封印，封禁住了那些老祖宗级别的妖兽。妖力越强，封禁的力量也就越庞大，所以饕餮能跑出来也只不过是因为它的妖力最弱罢了。</p><p>没有人知道最里面的老祖宗可怕的力量。但是没有人敢忽视，当年巫族的祖辈硬生生地想要攻入十万大山最里面，但是也畏惧那些老祖宗的力量，便定下了协议，魔兽不能私自离开十万大山，滥杀巫族族民，而巫族也不能到十万大山最里面撒野，打扰到老祖宗。</p><h4 id="玖"><a href="#玖" class="headerlink" title="玖"></a>玖</h4><p>“咳咳，巫咸老弟别动火，十万大山我比你熟，你先回去，我帮你找找那个娃，不过希望可不大。</p>]]></content>
      
      
      <categories>
          
          <category> store </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武侠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tlcl</title>
      <link href="2020/10/27/linux/sh/tlcl/"/>
      <url>2020/10/27/linux/sh/tlcl/</url>
      
        <content type="html"><![CDATA[<p>最近学习<strong>Linux Command</strong> ，瞄了下下 <strong>TLCL</strong> 文档，这里做个记录，感兴趣的可以去看下</p><p><a href="http://linuxcommand.org/tlcl.php">原版地址</a></p><p><a href="http://billie66.github.io/TLCL/book/">翻译版</a></p><a id="more"></a><h3 id="I-O-redirection"><a href="#I-O-redirection" class="headerlink" title="I/O redirection"></a>I/O redirection</h3><pre class="language-shell" data-language="shell"><code class="language-shell">ls -l &#x2F;usr&#x2F;bin -&gt; ls-output.txt&gt; ls-output.txtls -l &gt;&gt; &#x2F;usr&#x2F;bin &gt;&gt; ls-output.txt## While we have referred to the first three of these file streams as standard input, output and error, the shell references them internally as file descriptors zero, one and twols -l &#x2F;bin&#x2F;usr 2&gt; ls-error.txtls -l &#x2F;bin&#x2F;usr &gt; ls-output.xtx 2&gt;&amp;1 or ls -l &#x2F;bin&#x2F;usr &amp;&gt; ls-output.txt## The bit bucket is an ancient Unix concept and due to its universality, has appeared in many parts of Unix culture. When someone says he&#x2F;she is sending your comments to &#x2F;dev&#x2F;null, now you know what it means. For more examples, see the Wikipedia article on “&#x2F;dev&#x2F;null”.ls -l &#x2F;bin&#x2F;usr 2&gt; &#x2F;dev&#x2F;null</code></pre><h3 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a>Pipelines</h3><pre class="language-shell" data-language="shell"><code class="language-shell">ls -l &#x2F;usr&#x2F;bin | sort| uniq -d | lessls &#x2F;usr&#x2F;bin | sort | uniq | wc -lls &#x2F;bin &#x2F;usr&#x2F;bin | sort | uniq | grep zipls &#x2F;usr&#x2F;bin | tail -n 5tail -f &#x2F;var&#x2F;log&#x2F;messagels &#x2F;usr&#x2F;bin | tee ls.txt | grep zip</code></pre><h3 id="Expansions-and-Quoting"><a href="#Expansions-and-Quoting" class="headerlink" title="Expansions and Quoting"></a>Expansions and Quoting</h3><pre class="language-shell" data-language="shell"><code class="language-shell">echo *echo &#123;Z..A&#125;echo $USERecho $((1+2))echo $(ls)ls -l $(which cp)ls -l &quot;two words.txt&quot;echo &quot;$USER $((2+2)) $(cal)&quot;echo &#39;$USER $((2+2)) $(cal)&#39;echo &quot;The balance for user $USER is: \$5.00&quot;</code></pre><h3 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h3><pre class="language-shell" data-language="shell"><code class="language-shell">idless &#x2F;etc&#x2F;passwdless &#x2F;etc&#x2F;groupless &#x2F;etc&#x2F;shadowchmod 777  foo.txtchmod u+x,g&#x3D;rx,o-x foo.txtumaskchmod u+s programchmod g+s dirchmod +t dir&#x2F;etc&#x2F;sudoerssu -lsu -su -c &#39;ls -l &#x2F;root&#39;sudo ls -l &#x2F;rootchown bob foo.txtchown ob:users foot.txtchmod :users foo.txtchmod bob: foo.txtchgrppasswd bobadduseruseraddgroupadd</code></pre><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><pre class="language-shell" data-language="shell"><code class="language-shell">ps auxtopCtrl-cCtrl-zvim &amp;jobsfg %1bg %1kill [-signal] PIDkill -lkillallpstreevmstat</code></pre><h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><pre class="language-shell" data-language="shell"><code class="language-shell">hjkl0^$wWbBG:q!:wqiaAoux3xdd5dddWd$d0d^dGd20GypJffa&#x2F;:%s&#x2F;Line&#x2F;line&#x2F;gc#:The colon character starts an ex command.%Specifies the range of lines for the operation. % is a shortcut meaning from the first line to the last line. Alternately, the range could have been specified 1,5 (since our file is five lines long), or 1,$ which means “from line 1 to the last line in the file.” If the range of lines is omitted, the operation is only performed on the current line.sSpecifies the operation. In this case, substitution (search and replace).&#x2F;Line&#x2F;lineThe search pattern and the replacement text.gThis means “global” in the sense that the search and replace is performed on every instance of the search string in the line. If omitted, only the first instance of the search string on each line is replaced.#:n:N:buffers:r foo.txt:w foo1.txt</code></pre><h3 id="Package-Management"><a href="#Package-Management" class="headerlink" title="Package Management"></a>Package Management</h3><pre class="language-shell" data-language="shell"><code class="language-shell">pacman -S package_name1 package_name2 # add softpacman -R package_name # remove softpacman -Syu # update system and softpacman -Ss string1 string2 # search</code></pre><h3 id="Storage-Devices"><a href="#Storage-Devices" class="headerlink" title="Storage Devices"></a>Storage Devices</h3><pre class="language-shell" data-language="shell"><code class="language-shell">&#x2F;etc&#x2F;fstabmountumountfsckfdiskmkfsfdformatdddd if&#x3D;&#x2F;dev&#x2F;sdb of&#x3D;&#x2F;dev&#x2F;sdcwodim dev&#x3D;&#x2F;dev&#x2F;cdrw image.isomkisofsmd5sumdf</code></pre><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><pre class="language-shell" data-language="shell"><code class="language-shell">pingtraceroutenetstatnetstat -ieftpwgetssh root@remote-sysscp root@remote-sys:document.txtsftp root@remote-syslcd Desktopget ubuntu-8.04-desktop-i386.isobye</code></pre><h3 id="Find-File"><a href="#Find-File" class="headerlink" title="Find File"></a>Find File</h3><pre class="language-shell" data-language="shell"><code class="language-shell">locate &#x2F;bin&#x2F;ziplocate zip | grep binupdatedb# You may notice that, on some distributions, locate fails to work just after the system is installed, but if you try again the next day, it works fine. What gives? The locate database is created by another program named updatedb. Usually, it is run periodically as a cron job; that is, a task performed at regular intervals by the cron daemon. Most systems equipped with locate run updatedb once a day. Since the database is not updated continuously, you will notice that very recent files do not show up when using locate. To overcome this, it’s possible to run the updatedb program manually by becoming the superuser and running updatedb at the prompt.find ~ -type d | wc -lfind ~ -type f | wc -ltype: b,c,d,f,lfind ~ -type f -name &quot;*.JPG&quot; -size +1M | wc -lsize: b,c,w,k,M,G-cmin nMatch files or directories whose content or attributes were last modified exactly n minutes ago. To specify less than n minutes ago, use -n and to specify more than n minutes ago, use +n.-cnewer fileMatch files or directories whose contents or attributes were last modified more recently than those of file.-ctime nMatch files or directories whose contents or attributes were last modified n*24 hours ago.-emptyMatch empty files and directories.-group nameMatch file or directories belonging to group. group may be expressed as either a group name or as a numeric group ID.-iname patternLike the -name test but case insensitive.-inum nMatch files with inode number n. This is helpful for finding all the hard links to a particular inode.-mmin nMatch files or directories whose contents were modified n minutes ago.-mtime nMatch files or directories whose contents were modified n*24 hours ago.-name patternMatch files and directories with the specified wild card pattern.-newer fileMatch files and directories whose contents were modified more recently than the specified file. This is very useful when writing shell scripts that perform file backups. Each time you make a backup, update a file (such as a log), then use find to determine which files that have changed since the last update.-nouserMatch file and directories that do not belong to a valid user. This can be used to find files belonging to deleted accounts or to detect activity by attackers.-nogroupMatch files and directories that do not belong to a valid group.-perm modeMatch files or directories that have permissions set to the specified mode. mode may be expressed by either octal or symbolic notation.-samefile nameSimilar to the -inum test. Matches files that share the same inode number as file name.-size nMatch files of size n.-type cMatch files of type c.-user nameMatch files or directories belonging to user name. The user may be expressed by a user name or by a numeric user ID.find ~ \( -type f -not -perm 0600 \) -or \( -type d -not -perm 0700 \)-andMatch if the tests on both sides of the operator are true. May be shortened to -a. Note that when no operator is present, -and is implied by default.-orMatch if a test on either side of the operator is true. May be shortened to -o.-notMatch if the test following the operator is false. May be abbreviated with an exclamation point (!).()Groups tests and operators together to form larger expressions. This is used to control the precedence of the logical evaluations. By default, find evaluates from left to right. It is often necessary to override the default evaluation order to obtain the desired result. Even if not needed, it is helpful sometimes to include the grouping characters to improve readability of the command. Note that since the parentheses characters have special meaning to the shell, they must be quoted when using them on the command line to allow them to be passed as arguments to find. Usually the backslash character is used to escape them.# However, since the parentheses have special meaning to the shell, we must escape them to prevent the shell from trying to interpret them. Preceding each one with a backslash character does the trick.find ~ -type f -name &#39;*.BAK&#39; -delete-deleteDelete the currently matching file.-lsPerform the equivalent of ls -dils on the matching file. Output is sent to standard output.-printOutput the full pathname of the matching file to standard output. This is the default action if no other action is specified.-quitQuit once a match has been made.-exec command &#123;&#125; ;find ~ -type f -name &#39;foo*&#39; -ok ls -l &#39;&#123;&#125;&#39; &#39;;&#39;find ~ -type f -name &#39;foo*&#39; -exec ls -l &#39;&#123;&#125;&#39; +# Again, since the brace and semicolon characters have special meaning to the shell, they must be quoted or escaped.find ~ -type f -name &#39;foo*&#39; -print | xargs ls -lfind ~ -iname ‘*.jpg’ -print0 | xargs –null ls -lmkdir -p playground&#x2F;dir-&#123;00&#123;1..9&#125;,0&#123;10..99&#125;,100&#125;touch playground&#x2F;dir-&#123;00&#123;1..9&#125;,0&#123;10..99&#125;,100&#125;&#x2F;file-&#123;A..Z&#125;stat playground&#x2F;timestamp-depthDirect find to process a directory’s files before the directory itself. This option is automatically applied when the -delete action is specified.-maxdepth levelsSet the maximum number of levels that find will descend into a directory tree when performing tests and actions.-mindepth levelsSet the minimum number of levels that find will descend into a directory tree before applying tests and actions.-mountDirect find not to traverse directories that are mounted on other file systems.-noleafDirect find not to optimize its search based on the assumption that it is searching a Unix-like file system. This is needed when scanning DOS&#x2F;Windows file systems and CD-ROMs.http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;findutils&#x2F;</code></pre><h3 id="Compression-and-Archiving"><a href="#Compression-and-Archiving" class="headerlink" title="Compression and Archiving"></a>Compression and Archiving</h3><pre class="language-shell" data-language="shell"><code class="language-shell">gzip foo.txtgunzip foo.txt.gzbzip2 foo.txtbunzip2 foo.txt.bz2tar cf playground.tar playgroudtar tvf playground.tartar xf ..&#x2F;playground.tarzip -r playground.zip playgroundunziprsyncrsync options source destinationrsync -av playground foosudo rsync -av --delete &#x2F;etc &#x2F;home &#x2F;usr&#x2F;local &#x2F;media&#x2F;BigDisk&#x2F;backupalias backup&#x3D;&#39;sudo rsync -av --delete &#x2F;etc &#x2F;home &#x2F;usr&#x2F;local &#x2F;media&#x2F;BigDisk&#x2F;backup&#39;sudo rsync -av --delete --rsh&#x3D;ssh &#x2F;etc &#x2F;home &#x2F;usr&#x2F;local remote-sys:&#x2F;backuprsync -av -delete rsync:&#x2F;&#x2F;rsync.gtlib.gatech.edu&#x2F;fedora-linux- core&#x2F;development&#x2F;i386&#x2F;os fedora-devel</code></pre><h3 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h3><pre class="language-shell" data-language="shell"><code class="language-shell">grep [options] regex [file...]-iIgnore case. Do not distinguish between upper and lower case characters. May also be specified --ignore-case.-vInvert match. Normally, grep prints lines that contain a match. This option causes grep to print every line that does not contain a match. May also be specified --invert-match.-cPrint the number of matches (or non-matches if the -v option is also specified) instead of the lines themselves. May also be specified --count.-lPrint the name of each file that contains a match instead of the lines themselves. May also be specified --files-with-matches.-LLike the -l option, but print only the names of files that do not contain matches. May also be specified --files-without-match.-nPrefix each matching line with the number of the line within the file. May also be specified --line-number.-hFor multi-file searches, suppress the output of filenames. May also be specified --no-filename.^ $ . [ ] &#123; &#125; - ? * + ( ) | \grep -h &#39;.zip&#39; dirlist*.txtgrep -h &#39;^zip&#39; dirlist*.txtgrep -h &#39;zip$&#39; dirlist*.txtgrep -h &#39;[bg]zip&#39; dirlist*.txtgrep -h &#39;[^bg]zip&#39; dirlist*.txtgrep -h &#39;^[A-Z]&#39; dirlist*.txtgrep -h &#39;^[A-Za-z0-9]&#39; dirlist*.txtgrep -h &#39;[-AZ]&#39; dirlist*.txt[:alnum:]The alphanumeric characters. In ASCII, equivalent to: [A-Za-z0-9][:word:]The same as [:alnum:], with the addition of the underscore (\_) character.[:alpha:]The alphabetic characters. In ASCII, equivalent to: [A-Za-z][:blank:]Includes the space and tab characters.[:cntrl:]The ASCII control codes. Includes the ASCII characters zero through thirty-one and 127.[:digit:]The numerals zero through nine.[:graph:]The visible characters. In ASCII, it includes characters 33 through 126.[:lower:]The lowercase letters.[:punct:]The punctuation characters. In ASCII, equivalent to:[-!&quot;#$%&amp;&#39;()*+,.&#x2F;:;&lt;&#x3D;&gt;?@[\\\]_&#96;&#123;|&#125;~][:print:]The printable characters. All the characters in [:graph:] plus the space character.[:space:]The whitespace characters including space, tab, carriage return, newline, vertical tab, and form feed. In ASCII, equivalent to: [ \t\r\n\v\f][:upper:]The upper case characters.[:xdigit:]Characters used to express hexadecimal numbers. In ASCII, equivalent to: [0-9A-Fa-f]echo &quot;AAA&quot; | grep -E &#39;AAA|BBB&#39;grep -Eh &#39;^(bz|gz|zip)&#39; dirlist*.txt^\(?[0-9][0-9][0-9]\)?  [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$^\(?[0-9]&#123;3&#125;\)?  [0-9]&#123;3&#125;-[0-9]&#123;4&#125;$## Text Processingcat &gt; foo.txtcat -A foo.txtcat -ns foo.txtsort &gt; foo.txtdu -s &#x2F;usr&#x2F;share&#x2F;* | headdu -s &#x2F;usr&#x2F;share&#x2F;* | sort -nr | headls -l &#x2F;usr&#x2F;bin | headls -l &#x2F;usr&#x2F;bin | sort -nr -k 5 | headsort foo.txt | uniqcut -f 3 distros.txtexpand distros.txt | cut -c 23-cut -d &#39;:&#39; -f 1 &#x2F;etc&#x2F;passwd | headpaste distros-dates.txt distros-versions.txtjoin distros-key-names.txt distros-key-vernums.txt | headcomm file1.txt file2.txtcomm -12 file1.txt file2.txtdiff file1.txt file2.txtdiff -Naur old_file new_file &gt; diff_filepatch &lt; diff_fileecho &quot;lowercase letters&quot; | tr a-z A-Zecho &quot;lowercase letters&quot; | tr [:lower:] Atr -d &#39;\r&#39; &lt; dos_file &gt; unix_fileecho “secret text”tr a-zA-Z n-za-mN-ZA-Mecho “frperg grkg”tr a-zA-Z n-za-mN-ZA-Mecho &quot;aaabbbccc&quot; | tr -s abecho &quot;front&quot; | sed &#39;s&#x2F;front&#x2F;back&#x2F;&#39;echo &quot;front&quot; | sed &#39;s_front_back_&#39;echo &quot;front&quot; | sed &#39;1s&#x2F;front&#x2F;back&#x2F;&#39;sed -n &#39;1,5p&#39; distros.txtsed -n &#39;&#x2F;SUSE&#x2F;p&#39; distros.txtsed -n &#39;&#x2F;SUSE&#x2F;!p&#39; distros.txtsed &#39;s&#x2F;regexp&#x2F;replacement&#x2F;&#39; distros.txtsed &#39;s&#x2F;([0-9]&#123;2&#125;)&#x2F;([0-9]&#123;2&#125;)&#x2F;([0-9]&#123;4&#125;)$&#x2F;\3-\1-\2&#x2F;&#39; distros.txtecho &quot;aaabbbccc&quot; | sed &#39;s&#x2F;b&#x2F;B&#x2F;echo &quot;aaabbbccc&quot; | sed &#39;s&#x2F;b&#x2F;B&#x2F;g&#39;aspellnl distros.txt | headcat -necho &quot;The quick brown fox jumped over the lazy dog.&quot; | fold -w 12fmt -w 50 fmt-info.txt | headpr -l 15 -w 65 distros.txtprintf “format” argumentsprintf &quot;I formatted the string: %s\n&quot; fooprintf &quot;%s\t%s\t%s\n&quot; str1 str2 str3</code></pre><h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><pre class="language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure  --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;testmakemake install</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps</title>
      <link href="2020/10/27/play/gfw/vps/"/>
      <url>2020/10/27/play/gfw/vps/</url>
      
        <content type="html"><![CDATA[<p>VPS厂商很多，</p><p>如果使用<strong>vultr</strong>厂商注册新用户的话，请戳，<a href="https://www.vultr.com/?ref=7567014">vultr推广连接</a></p><p>如果使用阿里云的话，请戳， <a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=um4bcafi">阿里云大使</a></p><p>以下是vultr的官方测速服务器，你可以进行下载测试，因为运营商或是位置的不同，不同位置速度都有差异，自行选择最适合自己的。</p><a id="more"></a><table><thead><tr><th>Location 地理位置</th><th>Hostname 官方测试服务器ip</th><th>Download Test File 下载测试文件</th></tr></thead><tbody><tr><td>(Asia)Tokyo, Japan[日本 东京]</td><td>hnd-jp-ping.vultr.com</td><td><a href="http://hnd-jp-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://hnd-jp-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Singapore[新加坡]</td><td>sgp-ping.vultr.com</td><td><a href="http://sgp-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://sgp-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>(AU) Sydney, Australia[悉尼]</td><td>syd-au-ping.vultr.com</td><td><a href="http://syd-au-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://syd-au-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>(EU) Frankfurt, DE[德国 法兰克福]</td><td>fra-de-ping.vultr.com</td><td><a href="http://fra-de-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://fra-de-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>(EU) Amsterdam, NL[荷兰 阿姆斯特丹]</td><td>ams-nl-ping.vultr.com</td><td><a href="http://ams-nl-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://ams-nl-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>(EU) London, UK[英国 伦敦]</td><td>lon-gb-ping.vultr.com</td><td><a href="http://lon-gb-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://lon-gb-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>(EU) Paris, France[法国 巴黎]</td><td>par-fr-ping.vultr.com</td><td><a href="http://par-fr-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://par-fr-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Seattle, Washington[美东 华盛顿州 西雅图]</td><td>wa-us-ping.vultr.com</td><td><a href="http://wa-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://wa-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Silicon Valley, Ca[美西 加州 硅谷]</td><td>sjo-ca-us-ping.vultr.com</td><td><a href="http://sjo-ca-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://sjo-ca-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Los Angeles, Ca[美西 加州 洛杉矶**(推荐)**]</td><td>lax-ca-us-ping.vultr.com</td><td><a href="http://lax-ca-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://lax-ca-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Chicago, Illinois[美东 芝加哥]</td><td>il-us-ping.vultr.com</td><td><a href="http://il-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://il-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Dallas, Texas[美中 德克萨斯州 达拉斯]</td><td>tx-us-ping.vultr.com</td><td><a href="http://tx-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://tx-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>New York / New Jersey[美东 新泽西]</td><td>nj-us-ping.vultr.com</td><td><a href="http://nj-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://nj-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Atlanta, Georgiaa[美东 乔治亚州 亚特兰大]</td><td>ga-us-ping.vultr.com</td><td><a href="http://ga-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://ga-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr><tr><td>Miami, Florida[美东 佛罗里达州 迈阿密]</td><td>fl-us-ping.vultr.com</td><td><a href="http://fl-us-ping.vultr.com/vultr.com.100MB.bin">100Mb</a> <a href="http://fl-us-ping.vultr.com/vultr.com.1000MB.bin">1000Mb</a></td></tr></tbody></table><p>个人选择的服务器系统是centos7，所以以下shell命令都是基于centos7。</p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>创建一个用户进行操作，当然其实也没什么必要，因为现在基本vps都可以创建镜像快照可以进行恢复操作。所以下面还是都是使用root用户进行操作。</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 创建用户useradd wjcpasswd wjc# 授予sudo权限chmod u+w &#x2F;etc&#x2F;sudoersvi &#x2F;etc&#x2F;sudoerswjc     ALL&#x3D;(ALL)       ALL# 添加ssh公钥到vps主机，以实现免密登录ssh-copy-id user@vpsip</code></pre><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><p>身为一名程序猿，经常需要用到谷歌搜索引擎，所以来一瓶酸酸乳是很有必要的，网上很多一键安装脚本，比如<a href="https://shadowsocks.be/9.html">秋水逸冰</a> 或是通过<a href="https://github.com/xtaci/kcptun">kcptun</a></p><p>现在GFW升级，如果国内SSH端口22显示关闭，说明这个ip已经被封了，只能换一个IP地址了</p><p><a href="https://tools.ipip.net/ping.php">全国ping测速网页</a></p><p><a href="http://coolaf.com/tool/port">国内端口查看</a></p><p><a href="https://www.yougetsignal.com/tools/open-ports/">国外端口查看</a></p><pre class="language-shell" data-language="shell"><code class="language-shell"># 1.ssh 到vps服务器ssh  -o StrictHostKeyChecking&#x3D;no root@vpsip# 2.测试服务器性能wget -qO- git.io&#x2F;superbench.sh | bash# 3.一键安装ssr脚本wget --no-check-certificate https:&#x2F;&#x2F;freed.ga&#x2F;github&#x2F;shadowsocksR.sh;bash shadowsocksR.shvi &#x2F;etc&#x2F;shadowsocks.json&#x2F;etc&#x2F;init.d&#x2F;shadowsocks start&#x2F;etc&#x2F;init.d&#x2F;shadowsocks stop&#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart&#x2F;etc&#x2F;init.d&#x2F;shadowsocks status# 或安装kcptun for ssr一键脚本wget --no-check-certificate -O kcptun_for_ss_ssr.sh https:&#x2F;&#x2F;git.io&#x2F;fN2EOchmod 700 kcptun_for_ss_ssr.sh.&#x2F;kcptun_for_ss_ssr.sh install# 4.一键开启bbrwget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.shsysctl net.ipv4.tcp_available_congestion_control# 返回值一般为：net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno或者为：net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr# 或锐速# 更换内核yum -y install wget screen   &#x2F;&#x2F; For CentOS &#x2F; Redhatwget http:&#x2F;&#x2F;mirrors.linuxeye.com&#x2F;lnmp-full.tar.gz   &#x2F;&#x2F; Contains the source codetar xzf lnmp-full.tar.gzcd lnmp    &#x2F;&#x2F; If you need to modify the directory (installation, data storage, Nginx logs), modify options.conf filescreen -S lnmp    &#x2F;&#x2F; if network interruption, you can execute the command &#96;screen -r lnmp&#96; reconnect install window.&#x2F;install.shwget-N --no-check-certificate https:&#x2F;&#x2F;freed.ga&#x2F;kernel&#x2F;ruisu.sh &amp;&amp; bashruisu.sh# 一键安装锐速脚本wget -N --no-check-certificatehttps:&#x2F;&#x2F;github.com&#x2F;91yun&#x2F;serverspeeder&#x2F;raw&#x2F;master&#x2F;serverspeeder.sh &amp;&amp;bash serverspeeder.sh# 备用脚本wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;91yun&#x2F;serverspeeder&#x2F;master&#x2F;serverspeeder-all.sh&amp;&amp; bash serverspeeder-all.sh# 如果出现重启出现文件系统变为 read-only file system，无法执行写入操作mount -o remount rw &#x2F;</code></pre><h4 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h4><p>因为<code>ssr</code>很多不能用了，后面安装了<code>trojan</code>，这里备注下。</p><p>首先有个域名，然后指向<code>VPS</code>地址，然后申请证书，可以到<a href="https://freessl.cn/">freessl</a>申请免费证书，证书配置好了可以访问下<code>https</code>域名的地址看是否配置成功。</p><p>然后安装<code>trojan服务器</code>我使用的一键安装脚本</p><pre class="language-shell" data-language="shell"><code class="language-shell">wget -N --no-check-certificate -q -O trojan_install.sh &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;V2RaySSR&#x2F;Trojan&#x2F;master&#x2F;trojan_install.sh&quot; &amp;&amp; chmod +x trojan_install.sh &amp;&amp; bash trojan_install.sh</code></pre><p>设置开机启动，服务相关命令</p><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl enable trojansystemctl start trojan</code></pre><p>相关配置，如果需要可以修改trojan安装目录下的配置文件，<code>config.json</code>， <code>server.json</code>一般默认即可，<code>server.json</code> 里有设置密码，等下客户端连接需要用到。</p><p>然后安装<code>trojan客户端</code> <a href="https://github.com/trojan-gfw/trojan/releases">点击下载</a>  修改客户端的<code>config.json</code> ，一般修改<code>remote_addr</code>为你指向<code>vps</code>的域名，<code>remote_addr</code>也可以设置成<code>vps</code>的<code>ip</code>，这时<code>verify</code>和<code>verify_hostname</code>需要设置成<code>false</code>， <code>password</code>就是上面说的<code>taojan服务器</code> <code>server.json</code> 配置文件设置的密码  </p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"run_type"</span><span class="token operator">:</span> <span class="token string">"client"</span><span class="token punctuation">,</span>    <span class="token property">"local_addr"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"local_port"</span><span class="token operator">:</span> <span class="token number">1080</span><span class="token punctuation">,</span>    <span class="token property">"remote_addr"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"remote_port"</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"xxx"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>然后启动即可，启动不起来，安装下安装包里面的依赖</p><p>然后设置系统代理了，这个很多种，我这边是安装<a href="https://github.com/2dust/v2rayN/releases">v2rayN客户端</a></p><p>启动<code>v2ray客户端</code> 添加个<code>Socks</code>服务器，本地默认地址就是<code>127.0.0.1</code> ，本地默认端口就是<code>1080</code>，就ojbk了。</p><p>参考链接:  <a href="https://tlanyan.me/trojan-tutorial/">https://tlanyan.me/trojan-tutorial/</a></p><h4 id="Aria2-Google-Driver"><a href="#Aria2-Google-Driver" class="headerlink" title="Aria2 + Google Driver"></a>Aria2 + Google Driver</h4><h5 id="安装aria2"><a href="#安装aria2" class="headerlink" title="安装aria2"></a>安装aria2</h5><pre class="language-shell" data-language="shell"><code class="language-shell"># 安装aria2wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubiBackup&#x2F;doubi&#x2F;master&#x2F;aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh#备用地址wget -N --no-check-certificate https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Aria2&#x2F;aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh# 配置aira2vim &#x2F;root&#x2F;.aria2&#x2F;aria2.conf# 重新启动service aria2 resatrt# 创建 rcloneupload.sh</code></pre><h5 id="安装rclone"><a href="#安装rclone" class="headerlink" title="安装rclone"></a>安装rclone</h5><pre class="language-shell" data-language="shell"><code class="language-shell">curl https:&#x2F;&#x2F;rclone.org&#x2F;install.sh | sudo bashor wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;rclone_debian.sh &amp;&amp; bash rclone_debian.sh# 配置rclone config# 挂载yum install fuserclone mkdir &#x2F;root&#x2F;backuprclone mount gdrive:backup &#x2F;root&#x2F;backup --allow-other --allow-non-empty --vfs-cache-mode writes &amp;# 卸载fusermount -qzu &#x2F;root&#x2F;backup# 上传rclone -vv copy &#x2F;root&#x2F;backup gdrive:backup# 下载rclone -vv copy gdrive:backup &#x2F;root&#x2F;backup</code></pre><h5 id="创建-rcloneupload-sh"><a href="#创建-rcloneupload-sh" class="headerlink" title="创建 rcloneupload.sh"></a>创建 rcloneupload.sh</h5><pre class="language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashGID&#x3D;&quot;$1&quot;;FileNum&#x3D;&quot;$2&quot;;File&#x3D;&quot;$3&quot;;MinSize&#x3D;&quot;5&quot;  #限制最低上传大小，默认5kMaxSize&#x3D;&quot;157286400&quot;  #限制最高文件大小(单位k)，默认15GRemoteDIR&#x3D;&quot;&#x2F;root&#x2F;wjcgd&#x2F;&quot;;  #rclone挂载的本地文件夹，最后面保留&#x2F;LocalDIR&#x3D;&quot;&#x2F;root&#x2F;download&#x2F;&quot;;  #Aria2下载目录，最后面保留&#x2F;if [[ -z $(echo &quot;$FileNum&quot; |grep -o &#39;[0-9]*&#39; |head -n1) ]]; then FileNum&#x3D;&#39;0&#39;; fiif [[ &quot;$FileNum&quot; -le &#39;0&#39; ]]; then exit 0; fiif [[ &quot;$#&quot; !&#x3D; &#39;3&#39; ]]; then exit 0; fifunction LoadFile()&#123;  IFS_BAK&#x3D;$IFS  IFS&#x3D;$&#39;\n&#39;  if [[ ! -d &quot;$LocalDIR&quot; ]]; then return; fi  if [[ -e &quot;$File&quot; ]]; then    FileLoad&#x3D;&quot;$&#123;File&#x2F;#$LocalDIR&#125;&quot;    while true      do        if [[ &quot;$FileLoad&quot; &#x3D;&#x3D; &#39;&#x2F;&#39; ]]; then return; fi        echo &quot;$FileLoad&quot; |grep -q &#39;&#x2F;&#39;;        if [[ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]]; then          FileLoad&#x3D;$(dirname &quot;$FileLoad&quot;);        else          break;        fi;      done;    if [[ &quot;$FileLoad&quot; &#x3D;&#x3D; &quot;$LocalDIR&quot; ]]; then return; fi    EXEC&#x3D;&quot;$(command -v mv)&quot;    if [[ -z &quot;$EXEC&quot; ]]; then return; fi    Option&#x3D;&quot; -f&quot;;    cd &quot;$LocalDIR&quot;;    if [[ -e &quot;$FileLoad&quot; ]]; then      ItemSize&#x3D;$(du -s &quot;$FileLoad&quot; |cut -f1 |grep -o &#39;[0-9]*&#39; |head -n1)      if [[ -z &quot;$ItemSize&quot; ]]; then return; fi      if [[ &quot;$ItemSize&quot; -le &quot;$MinSize&quot; ]]; then        echo -ne &quot;\033[33m$FileLoad \033[0mtoo small to spik.\n&quot;;        return;      fi      if [[ &quot;$ItemSize&quot; -ge &quot;$MaxSize&quot; ]]; then        echo -ne &quot;\033[33m$FileLoad \033[0mtoo large to spik.\n&quot;;        return;      fi      eval &quot;$&#123;EXEC&#125;$&#123;Option&#125;&quot; \&#39;&quot;$&#123;FileLoad&#125;&quot;\&#39; &quot;$&#123;RemoteDIR&#125;&quot;;    fi  fi  IFS&#x3D;$IFS_BAK&#125;LoadFile;</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">chmod +x rcloneupload.shvim &#x2F;root&#x2F;.aria2&#x2F;aria2.confon-download-complete&#x3D;&#x2F;root&#x2F;rcloneupload.sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> play </category>
          
          <category> gfw </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> gfw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="2020/10/27/linux/soft/git/"/>
      <url>2020/10/27/linux/soft/git/</url>
      
        <content type="html"><![CDATA[<p>[<strong>Git</strong>][<a href="https://en.wikipedia.org/wiki/Git]">https://en.wikipedia.org/wiki/Git]</a> 是一个分布式的管理系统，作者 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>  2005 创建它，主要是维护linux内核，现在很多人用它作为大型项目的版本控制软件，来管理源代码，或是一些纯文本的笔记或者文档。本篇文字，很多的文本描述，或者图片资源来自互联网，我只是互联网的搬运工，本文仅作为个人学习的一个记录跟总结。我将在最下方列出部分链接，感兴趣的朋友可以去看看。</p><a id="more"></a><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>Git 有如下几个特点：</p><p>1.<strong>直接记录快照，而非差异比较</strong></p><p>2.<strong>近乎所有操作都是本地执行</strong>，所以速度很快</p><p>3.时刻保持<strong>数据的完整性</strong>，在保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git 一无所知。这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git 都能立即察觉。</p><p>Git 使用 <strong>SHA-1</strong> 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符（0-9 及 a-f）组成，看起来就像是：</p><pre class="language-none"><code class="language-none">24b9da6552252987aa493b52f8696cd6d3b00373</code></pre><p>Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</p><p>4.<strong>多数操作仅添加数据</strong>，不用担心数据丢失</p><p>5.<strong>文件的三种状态</strong>，对于任何一个文件，在 Git 内都只有三种状态：已提交（<strong>committed</strong>），已修改（<strong>modified</strong>）和已暂存（<strong>staged</strong>）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p><p>由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。</p><p><img src="https://git-scm.com/figures/18333fig0106-tn.png" alt="工作目录，暂存区域，以及本地仓库" loading="lazy"></p><p>每个项目都有一个 Git 目录（如果 <code>git clone</code> 出来的话，就是其中 <code>.git</code> 的目录；如果 <code>git clone --bare</code> 的话，新建的目录本身就是 Git 目录。），它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</p><p>从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</p><p>所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>基本的 Git 工作流程如下：</p><ol><li>在工作目录中修改某些文件。</li><li>对修改后的文件进行快照，然后保存到暂存区域。</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ol><p>所以，我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p><h4 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h4><p>文件内容并没有真正存储在索引(<em>.git/index</em>)或者提交对象中，而是以blob的形式分别存储在数据库中(<em>.git/objects</em>)，并用SHA-1值来校验。 索引文件用识别码列出相关的blob文件以及别的数据。对于提交来说，以树(<em>tree</em>)的形式存储，同样用对于的哈希值识别。树对应着工作目录中的文件夹，树中包含的 树或者blob对象对应着相应的子目录和文件。每次提交都存储下它的上一级树的识别码。</p><p>如果用detached HEAD提交，那么最后一次提交会被the reflog for HEAD引用。但是过一段时间就失效，最终被回收，与<code>git commit --amend</code>或者<code>git rebase</code>很像。</p><h3 id="Git-基本命令"><a href="#Git-基本命令" class="headerlink" title="Git 基本命令"></a>Git 基本命令</h3><p>Git 命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等，这个过程被称之为版本控制。</p><h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><p>git的基本配置，配置文件在用户目录下的**.gitconfig**</p><p><strong>user</strong> 设置当前系统的git用户的名称跟邮件</p><p><strong>alias</strong> 设置一些别名，简化命令，提高效率，当然本文档为了介绍git的命令的使用，在下文的shell中都没有使用别名。</p><p><strong>http</strong> 跟 <strong>https</strong> 设置shadowsocks的http代理，避免有的仓库被GWF墙，拉取不了。</p><pre class="language-shell" data-language="shell"><code class="language-shell">git config --global user.name &quot;jianchengwang&quot;git config --global user.email &quot;jiancheng_wang@yahoo.com&quot;git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080git config --global --unset http.proxygit config --global --unset https.proxyvim ~&#x2F;.gitconfig##[user]name &#x3D; jianchengwangemail &#x3D; jiancheng_wang@yahoo.com[alias]co &#x3D; checkoutbr &#x3D; branchci &#x3D; commitst &#x3D; statusunstage &#x3D; reset HEAD --dog &#x3D; log --all --decorate --oneline --graph[http]proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080[https]proxt &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</code></pre><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>Initialized empty Git repository， 在目录下为出现一个**.git**目录文件夹，是为你的项目存储所有历史和元信息的目录 - 包括所有的对象(commits,trees,blobs,tags)，这些对象指向不同的分支。</p><pre class="language-shell" data-language="shell"><code class="language-shell">mkdir git-tutorialcd git-tutorialgit init</code></pre><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>可以看到当前目录的git状态，比如所处分支，提交记录，未追踪的文件等，还有一个很好的命令提示作用，提示你可以使用哪些命令进行操作。</p><pre class="language-shell" data-language="shell"><code class="language-shell">git status##n branch masterNo commits yetUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)README.mdnothing added to commit but untracked files present (use &quot;git add&quot; to track)</code></pre><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>未追踪的文件，我们通过这个命令告诉git将这个文件进行版本控制，添加到暂存区 <strong>staged</strong>，暂存区的记录在**.git/index**</p><pre class="language-shell" data-language="shell"><code class="language-shell">git add README.mdgit status##On branch masterNo commits yetChanges to be committed:  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)new file:   README.mdgit rm --cached README.mdgit add -A</code></pre><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><p>移动或者重命名文件，目录，或符号链接，类比<code>linux mv</code></p><pre class="language-shell" data-language="shell"><code class="language-shell">git mv a.txt dir</code></pre><p>如果是<code>window，mac</code>系统对大小写不敏感，一般<code>git config ignorecase true</code>，这时候也可以用<code>git mv</code>修正文件大小写问题，</p><pre class="language-shell" data-language="shell"><code class="language-shell">git mv -f a.js A.js</code></pre><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>通过以下命令将暂存区的内容提交到本地仓库，会生成一个版本快照。</p><pre class="language-shell" data-language="shell"><code class="language-shell">git commit -m &quot;add README.md&quot;##[master (root-commit) 65f838e] add README.md 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 README.md</code></pre><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><p>如果我们需要跟别人进行协作开发，就要把本地的代码推送到远程的服务器的仓库上，比如这里我在github上创建一个远程仓库，然后将本地仓库添加一个远程仓库地址，名字命名为<strong>origin</strong> 一般，这个名字是约定俗称的，不建议去修改，但是假如你有多个远程仓库，可以自定义命名。</p><pre class="language-shell" data-language="shell"><code class="language-shell">## 添加远程仓库git remote add origin https:&#x2F;&#x2F;github.com&#x2F;jianchengwang&#x2F;git-tutorial.git## 查看远程仓库git remote -voriginhttps:&#x2F;&#x2F;github.com&#x2F;jianchengwang&#x2F;git-tutorial.git (fetch)originhttps:&#x2F;&#x2F;github.com&#x2F;jianchengwang&#x2F;git-tutorial.git (push)git remote -help</code></pre><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>我们可以将本地仓库当前分支的代码推送到远程仓库的分支上，**-u** 表示set upstream for git pull/status 即设置当前远程分支为默认上游仓库，下次直接使用git push即可</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 格式git push &lt;远程仓库名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建git push -u origin mastergit push origin master:master# 省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。git push origin :mastergit push origin --delete master# 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。git push origin# 如果当前分支只有一个追踪分支，那么主机名都可以省略。git push# 推送本地所有分支到远程仓库git push --all origin# 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。git push --force origin# git push不会推送标签(tag)，除非使用–tags选项。git push origin --tags</code></pre><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>克隆远程仓库到本地文件夹git-demo，然后进行一些简单的修改，然后推送到远程仓库，现在我们有两个本地仓库了，其中git-demo的代码已经发生改变，并且推送到远程仓库，远程仓库的代码也发生改变，但是之前的本地的git-tutorial代码还是旧的，这时候我们切换到之前的git-tutorial文件目录，拉取远程仓库的代码。</p><pre class="language-shell" data-language="shell"><code class="language-shell">git clone https:&#x2F;&#x2F;github.com&#x2F;jianchengwang&#x2F;git-tutorial.git git-democd git-demoecho &quot;hello git&quot; &gt; README.mdgit add README.md git commit -m &#39;modify README.md&#39;git push</code></pre><h4 id="git-fetch-pull"><a href="#git-fetch-pull" class="headerlink" title="git fetch | pull"></a>git fetch | pull</h4><p>取回远程主机某个分支的更新，再与本地的指定分支合并</p><pre class="language-shell" data-language="shell"><code class="language-shell">git pull &lt;远程仓库&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;git pull origin master:master# 如果远程分支与当前分支进行合并，则冒号后面的本地分支可以省略git pull origin master# 等同于git fetch origingit merge origin&#x2F;master# 如果当前分支与远程分支存在追踪关系git branch --set-upstream master origin&#x2F;mastergit pull origin# 如果当前分支只有一个追踪分支git pull</code></pre><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><p>在实现一些新功能或者修复 BUG 的时候，我们希望所有的修改环境都是独立的，Git 给我们提供了分支，它可以保证稳定版本的代码不会被破坏、不同的功能可以由不同开发者同时开发、开发者可以专注于自己的分支，不用担心被其他人破坏了环境。</p><p><strong>HEAD</strong> -&gt; 当前分支的最后一次更新，通常默认是指向master的最后一次提交。我们可以移动这个指针或者叫坐标，就可以变更使用的分支。</p><p>提交时使用<del>(tilde)和^(caret)就可以指定某个提交的相对位置。最常用的就是相对于HEAD的位置。HEAD后面加上</del>(tilde）可以指定HEAD之前的提交记录。合并分支会有多个根节点，您可以用^(caret) 来指定使用哪个为根节点。</p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup1_3_2.png" alt="用tilde和caret指定提交的相对位置" loading="lazy"></p><p><strong>STASH</strong> -&gt; 还未提交的修改内容以及新添加的文件，留在索引区域或工作树的情况下切换到其他的分支时，修改内容会从原来的分支移动到目标分支。</p><p>但是如果在checkout的目标分支中相同的文件也有修改，checkout会失败的。这时要么先提交修改内容，要么用stash暂时保存修改内容后再checkout。</p><p>stash是临时保存文件修改内容的区域。stash可以暂时保存工作树和索引里还没提交的修改内容，您可以事后再取出暂存的修改，应用到原先的分支或其他的分支上。</p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup1_3_3.png" alt="stash" loading="lazy"></p><p>我们在所在分支创建一个分支的时候，新建的分支会拥有当前分支的一份拷贝。</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 创建分支git branch feature1# 切换分支git checkout feature1# 创建并切换git checkout -b feature2# checkout 后面跟文件名，会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。git checkout -- &lt;filename&gt;# 查看当前分支，q键退出git branch# 查看远程分支git branch -r# 删除分支，如果当前分支处于feature2则不允许删除git branch -d feature2# 如果我们分支有进行版本的改变，跟master分支不一致，那么我么将分支的内容merge到master分支上，或是直接使用-D 进行强制删除git branch -D feature2# 推送分支到远程仓库并创建一个跟本地分支同名的分支git push origin feature1# 推送分支到远程仓库并创建一个名为f1的分支git push origin feature1:f1# 删除远程仓库的分支git push origin :feature1</code></pre><h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 <em>1.0.0</em> 的标签</p><pre class="language-shell" data-language="shell"><code class="language-shell">git tag 1.0.0 1b2e1d63ff</code></pre><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>通过日志，我们可以很方便的查看并且追溯各个版本快照，并且stackoverflow有人展示了很多漂亮的日志格式，我们可以借鉴下</p><p><a href="https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs">https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs</a></p><pre class="language-shell" data-language="shell"><code class="language-shell">git log# 只看某人的提交日志git log --author&#x3D;bob# 一行显示git log --online# 显示前10条git log --oneline -10# 显示某一次日志详情git show a2f5b8c# 因为命令很长，所以我们可以在.gitconfig里设置别名git log --all --decorate --oneline --graphgit dog</code></pre><h4 id="git-merge-rebase"><a href="#git-merge-rebase" class="headerlink" title="git merge | rebase"></a>git merge | rebase</h4><p>在做一些新特性或者修复 bug 的时候，我们通常会建立一个新的分支，而完成后我们需要做一个合并分支的操作。</p><p>合并分支默认使用fast-forward(<strong>–ff</strong>)模式，这种模式不会产生一个新的commit提交，如果你要使用**–no-ff**，如果是与他人协作开发，建议采用这种模式，因为它会原有的开发分支整个提交链的完整性。</p><p>使用<strong>rebase</strong> 会重写项目历史，能让我们的项目提交日志保持一条竖线，但是这破坏协作的工作流，所以有一条黄金法则，<strong>绝对不要在公共分支上使用rebase</strong></p><p><strong>merge</strong> 是合并操作，它会将两个分支的操作合并在一起，它关注点在真实的提交历史记录上</p><p><strong>rebase</strong> 没有合并操作，它只是将当前分支的修改复制到目标分支的最后一次提交上面，它的关注点在开发的过程上面</p><p>如果两个分支同时对一个文件进行修改，并且commit，那么合并的时候会产生<strong>conflict</strong> ，我们要解决冲突后才能进行合并操作。解决冲突一般会使用一些可视化的工具进行解决，命令行的话即使是使用vimdiff感觉也比较麻烦。</p><pre class="language-shell" data-language="shell"><code class="language-shell"># mergegit checkout mastergit merge feature1 git merge feature1 --no-ff# 将分支issue1的所有提交合并成一个提交并导入到master分支git merge --squash issue1# rebasegit rebase feature1# conflict</code></pre><h4 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h4><p><strong>git cherry-pick</strong> 可以选择某一个分支中的一个或几个commit(s)来进行操作。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交.</p><p>命令集合:</p><ul><li>git cherry-pick <commit id>:单独合并一个提交</li><li>git cherry-pick  -x <commit id>：同上，不同点：保留原提交者信息。<br> <strong>Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit。</strong> </li><li>git cherry-pick <start-commit-id>..<end-commit-id></li><li>git cherry-pick <start-commit-id>^..<end-commit-id></li></ul><p>前者表示把<start-commit-id>到<end-commit-id>之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；<br> 后者有”^”标志的表示把<start-commit-id>到<end-commit-id>之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。<br> 其中，<start-commit-id>到<end-commit-id>只需要commit-id的前6位即可，并且<start-commit-id>在时间上必须早于<end-commit-id><br> 注：以上合并，需要手动push代码。</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 从其他分支复制指定的提交，然后导入到现在的分支git cherry-pick 99daed2git cherry-pick &lt;commit id&gt;git cherry-pick --continuegit cherry-pick --quitgit cherry-pick --abo</code></pre><h4 id="git-reset-revert"><a href="#git-reset-revert" class="headerlink" title="git reset | revert"></a>git reset | revert</h4><p>时光不能倒流，但是 Git 可以做时光机让你的提交记录回到过去。git revert 撤销某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销作为一次最新的提交。git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。相比 git reset，它不会改变现在的提交历史。因此，git revert 可以用在公共分支上，git reset 应该用在私有分支上。</p><p>在reset可以遗弃不再使用的提交。执行遗弃时，需要根据影响的范围而指定不同的模式，可以指定是否复原索引或工作树的内容。</p><p><img src="https://backlog.com/git-tutorial/cn/img/post/stepup/capture_stepup6_3_1.png" alt="遗弃提交" loading="lazy"></p><p>除了默认的mixed模式，还有soft和hard模式。欲了解受各模式影响的部分，请参照下面的表格。</p><table><thead><tr><th>模式名称</th><th>HEAD的位置</th><th>索引</th><th>工作树</th></tr></thead><tbody><tr><td>soft</td><td>修改</td><td>不修改</td><td>不修改</td></tr><tr><td>mixed</td><td>修改</td><td>修改</td><td>不修改</td></tr><tr><td>hard</td><td>修改</td><td>修改</td><td>修改</td></tr></tbody></table><p><strong>主要使用的场合：</strong></p><ul><li>复原修改过的索引的状态(mixed)</li><li>彻底取消最近的提交(hard)</li><li>只取消提交(soft)</li></ul><pre class="language-shell" data-language="shell"><code class="language-shell"># 回退到之前一次提交git reset master^# 回退到之前5次提交git reset master~5# 回到之前某次提交git reset --hard HEAD~gti reset --hard 99daed2# 在reset之前的提交可以参照ORIG_HEAD。Reset错误的时候，在ORIG_HEAD上reset 就可以还原到reset前的状态。git reset --hard ORIG_HEAD# 会产生一次新的commit提交git revert --hard HEAD~</code></pre><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug, 先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。</p><pre class="language-shell" data-language="shell"><code class="language-shell">git statshdo some workgit statsh popgit stash          # save uncommitted changes# pull, edit, etc.git stash list     # list stashed changes in this gitgit show stash@&#123;0&#125; # see the last stash git stash pop      # apply last stash and remove it from the listgit stash --help   # for more info</code></pre><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>记录为.gitignore的文件是Git的非管理对象，但是需要提交.gitignore本身。</p><p>可以到 <a href="www.gitignore.com">Gitignore网站</a>上找忽略模板。</p><h4 id="fock-pull-request"><a href="#fock-pull-request" class="headerlink" title="fock | pull request"></a>fock | pull request</h4><p>我们经常fock其他上游仓库，来pull request做贡献等，首先是保证本地仓库跟上游仓库的同步。关于pr相关操作，可以看相关链接的工作流，这里不多做介绍。</p><pre class="language-shell" data-language="shell"><code class="language-shell">## 添加上游仓库git remote add upstream https:&#x2F;&#x2F;github.com&#x2F;jianchengwang&#x2F;git-tutorial.git## 查看远程仓库列表git remote -v## 拉取上游仓库dev分支，如果没有分支名，默认拉取master分支的代码git fetch upstrem dev## 合并分支git checkout git rebase upstream&#x2F;dev## 提交到我们自己的远程仓库git push</code></pre><h3 id="SSH-免密登录"><a href="#SSH-免密登录" class="headerlink" title="SSH 免密登录"></a>SSH 免密登录</h3><p>我们会发现每次进行git push的时候都要输入密码，这样比较麻烦，所以我们可以通过<a href="https://en.wikipedia.org/wiki/Secure_Shell">ssh</a>进行免密登录。</p><p>这里只列出了linux的简单命令，其他系统或是更详细的帮助信息请自行查看github的 <a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">相关帮助文档</a></p><pre class="language-shell" data-language="shell"><code class="language-shell">## 创建 ssh keyssh-keygen -t rsa -b 4096 -C &quot;jianchengwang@yahoo.com&quot;## 添加 ssh key -&gt; ssh-agenteval &quot;$(ssh-agent -s)&quot;ssh-add ~&#x2F;.ssh&#x2F;id_rsa## add ssh public key to your github accountcat ~&#x2F;.ssh&#x2F;id_rsa.pub</code></pre><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://git-scm.com/docs/">官方文档</a></p><p><a href="https://www.youtube.com/watch?v=lUQl6gZ5Yy0">互联网人都该懂点git</a></p><p><a href="https://backlog.com/git-tutorial/cn/">猴子都能懂的git入门</a></p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰git教程</a></p><p><a href="https://git.io/fpYgR">git工作流</a></p><p><a href="http://gitbook.liuhui998.com/">Git Community Book 中文版</a></p><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git指南</a></p><p><a href="https://www.vogella.com/tutorials/Git/article.html">Git Tutorial</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> soft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro</title>
      <link href="2020/10/27/linux/dist/manjaro/"/>
      <url>2020/10/27/linux/dist/manjaro/</url>
      
        <content type="html"><![CDATA[<p>之前使用 <strong>Deepin</strong> 的操作系统，虽然新版本稳定性跟易用性大大提高了，但软件源都比较旧，然后就安装下 <strong>Manjaro Linux</strong> 尝尝鲜，之前使用 <strong>i3</strong> 桌面，后面发现 <strong>Teamview</strong> 远程连接的时候，快捷键跟本机的经常冲突，所以还是使用 <strong>DDE</strong> 的桌面，懒得折腾。</p><p><a href="https://manjaro.org/">官网地址</a></p><a id="more"></a><h3 id="set-mirrors"><a href="#set-mirrors" class="headerlink" title="set mirrors"></a>set mirrors</h3><pre class="language-shell" data-language="shell"><code class="language-shell">## build china mirrorssudo pacman-mirrors -i -c China -m rank## add ustc mirrossudo vim &#x2F;etc&#x2F;pacman.conf [archlinuxcn]SigLevel &#x3D; Optional TrustedOnlyServer &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxcn&#x2F;$archServer &#x3D; http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$archsudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></pre><h3 id="pacman-amp-yay"><a href="#pacman-amp-yay" class="headerlink" title="pacman &amp; yay"></a>pacman &amp; yay</h3><pre class="language-shell" data-language="shell"><code class="language-shell">## pacmanpacman -S package_name1 package_name2 # add softpacman -R package_name # remove softpacman -Syu # update system and softpacman -Ss string1 string2 # search## yayyay &lt;Search Term&gt;yay &lt;Search Term&gt;        Present package-installation selection menu.yay -Ps        Print system statistics.yay -Yc        Clean unneeded dependencies.yay -G &lt;AUR Package&gt;        Download PKGBUILD from ABS or AUR.yay -Y --gendb        Generate development package database used for devel update.yay -Syu --devel --timeupdate        Perform system upgrade, but also check for development package updates and use        PKGBUILD modification time (not version number) to determine update.        Present package-installation selection menu.yay -Ps        Print system statistics.yay -Yc        Clean unneeded dependencies.yay -G &lt;AUR Package&gt;        Download PKGBUILD from ABS or AUR.yay -Y --gendb        Generate development package database used for devel update.yay -Syu --devel --timeupdate        Perform system upgrade, but also check for development package updates and use PKGBUILD modification time (not version number) to determine update.</code></pre><h3 id="config-amp-lib"><a href="#config-amp-lib" class="headerlink" title="config &amp; lib"></a>config &amp; lib</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo pacman -S gconfyay -S lib32-glibcyay -S glibc </code></pre><h3 id="fcit"><a href="#fcit" class="headerlink" title="fcit"></a>fcit</h3><pre class="language-shell" data-language="shell"><code class="language-shell">## add fcitxsudo pacman -S fcitx-imsudo pacman -S fcitx-configtool## because i use dde desktop, so i edit .profile vim ~&#x2F;.profileexport GTK_IM_MODULE&#x3D;fcitxexport QT_IM_MODULE&#x3D;fcitxexport XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;## add you like fcitx inputmodesudo pacman -S fcitx-sogoupinyinsudo pacman -S fcitx-googlepinyinsudo pacman -S fcitx-sunpinyinsudo pacman -S fcitx-cloudpinyin</code></pre><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo pacman -S gitsudo pacman -S zshsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;chsh -s &#x2F;bin&#x2F;zshsudo pacman -S gconf</code></pre><h3 id="environment-variables"><a href="#environment-variables" class="headerlink" title="environment variables"></a>environment variables</h3><pre class="language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.profileexport JAVA_HOME&#x3D;&#x2F;opt&#x2F;program&#x2F;jdk1.8.0_151export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre   export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;libexport MAVEN_HOME&#x3D;&#x2F;opt&#x2F;server&#x2F;apache-maven-3.5.2export NODE_HOME&#x3D;&#x2F;opt&#x2F;program&#x2F;node-v8.12.0-linux-x64export PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;NODE_HOME&#125;&#x2F;bin:$&#123;MAVEN_HOME&#125;&#x2F;bin</code></pre><h3 id="mount-amp-fstab"><a href="#mount-amp-fstab" class="headerlink" title="mount &amp; fstab"></a>mount &amp; fstab</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo mount &#x2F;dev&#x2F;sdb2 &#x2F;optvim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;sdb2                                &#x2F;opt           ext4    defaults&#x2F;dev&#x2F;sda6                               &#x2F;home&#x2F;wjc&#x2F;play  ext4    defaults&#x2F;dev&#x2F;sda7                               &#x2F;home&#x2F;wjc&#x2F;ext   ext4    defaults</code></pre><h3 id="install-soft"><a href="#install-soft" class="headerlink" title="install soft"></a>install soft</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo pacman -S python-pipsudo pacman -S curlsudo pip install uncurlpip install youtube-dlsudo pacman -S net-toolssudo pacman -S makesudo pacman -S autojump.zshrc plugins&#x3D;(git autojump)sudo pacman -S screenfetchsudo pacman -S speedtest-clisudo pacman -S redshiftsudo pacman -S vimsudo pacman -S wiznotesudo pacman -S typorasudo pacman -S foxitreadersudo pacman -S codesudo pacman -S sublime-text-devsudo pacman -S wps-office ttf-wps-fontssudo pacman -S vlcsudo pacman -S netease-cloud-musicsudo pacman -S spotify235170sudo pacman -S google-chromesudo pacman -S filezillasudo pacman -S teamviewersystemctl enable teamviewerdsystemctl start teamviewerdsudo pacman -S shadowsocks-qt5sudo pacman -S proxychains-ngsudo vim &#x2F;etc&#x2F;proxychains.confsocks5 127.0.0.1 1080proxychains wget https:&#x2F;&#x2F;wwww.google.comsudo pip3 install genpacgenpac --format&#x3D;pac --pac-proxy&#x3D;&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy&#x3D;&quot;SOCKS5 127.0.0.1:1080&quot; -o autoproxy.pac --gfwlist-url&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;gfwlist&#x2F;gfwlist&#x2F;master&#x2F;gfwlist.txt&quot;sudo pip3 install tldrtldr curlsudo pacman -S deepin.com.qq.officesudo pacman -S electronic-wechat-gityay -S deepin.com.thunderspeed## install win10 fontsudo pacman -U ttf-ms-win10-zh_cn-10.0.17763.1-1-any.pkg .tar## vmwaresudo systemctl start vmware-networks.servicesudo modprobe vmnet &amp;&amp; sudo vmware-networks --start## bumblebeesudo pacman -S virtualgl lib32-virtualgl lib32-primus primussudo mhwd -f -i pci video-hybrid-intel-nvidia-bumblebeesudo systemctl enable bumblebeedsudo gpasswd -a wjc bumblebeesudo rebootglxgearsoptirun glxgears## dota2vblank_mode&#x3D;0 primusrun %command% -perfectworld -console -cursor_scale_percent 100 -language schinese## mariadbsudo pacman -S mariadb mariadb-clientssudo mysql_install_db --user&#x3D;mysql --basedir&#x3D;&#x2F;usr --datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqlmysqladmin -u root password &#39;123456&#39; mysql -uroot -p 123456sudo systemctl enable mysqld</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> dist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl</title>
      <link href="2020/10/27/linux/sh/curl/"/>
      <url>2020/10/27/linux/sh/curl/</url>
      
        <content type="html"><![CDATA[<p><a href="https://curl.haxx.se/">curl</a>是一种命令行工具，作用是发出网络请求，然后获取数据，显示在标准输出<code>stdout</code>上面。最近学习 <code>oauth2</code> 经常需要用到此命令进行测试，所以这里简单记录下。</p><a id="more"></a><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="获取网页源码"><a href="#获取网页源码" class="headerlink" title="获取网页源码"></a>获取网页源码</h4><pre class="language-shell" data-language="shell"><code class="language-shell">curl example.comcurl -o example.html example.com # 保存网页curl -L example.com # 自动跳转</code></pre><h4 id="显示头信息"><a href="#显示头信息" class="headerlink" title="显示头信息"></a>显示头信息</h4><pre class="language-shell" data-language="shell"><code class="language-shell">curl -i www.baidu.com # http response跟网页curl -I www.baidu.com # 只显示http response</code></pre><h4 id="显示通信过程"><a href="#显示通信过程" class="headerlink" title="显示通信过程"></a>显示通信过程</h4><pre class="language-shell" data-language="shell"><code class="language-shell">curl -v www.baidu.comcurl --trace output.txt www.baidu.comcurl --trace-ascii output.txt www.baidu.com</code></pre><h4 id="表单信息"><a href="#表单信息" class="headerlink" title="表单信息"></a>表单信息</h4><p>GET方法直接拼接在网址后面，POST方法必须数据跟网址分开，</p><p>用到<code>-data</code>参数。</p><p>如果你的数据没有经过表单编码，还可以使用<code>--data-urlencode</code>编码</p><pre class="language-shell" data-language="shell"><code class="language-shell">curl example.com&#x2F;form?data&#x3D;xxxcurl -X POST --data &quot;data&#x3D;xxx&quot; example.com&#x2F;formcurl -X POST --data-urlencode &quot;data&#x3D;April 1&quot; example.com&#x2F;form</code></pre><h4 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h4><p>默认的HTTP动词是GET，使用 <code>-X</code> 参数可以支持其他动词。</p><pre class="language-shell" data-language="shell"><code class="language-shell">curl -X DELETE example.com&#x2F;1curl -X POST --data &quot;data&#x3D;xxx&quot; example.com&#x2F;form</code></pre><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>比如文件上传表单如下</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>multipart/form-data<span class="token punctuation">'</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload.cgi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>file</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>upload</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>press</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OK<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">curl --form upload&#x3D;@localfilename --form press&#x3D;OK[URL]</code></pre><h4 id="Referer字段"><a href="#Referer字段" class="headerlink" title="Referer字段"></a>Referer字段</h4><p>表示从哪里跳转过来</p><pre class="language-shell" data-language="shell"><code class="language-shell">curl --referer http:&#x2F;&#x2F;example1.com http:&#x2F;&#x2F;example2.com</code></pre><h4 id="User-Agent字段"><a href="#User-Agent字段" class="headerlink" title="User Agent字段"></a>User Agent字段</h4><p>表示客户端设备信息</p><pre class="language-shell" data-language="shell"><code class="language-shell">curl --user-aget &quot;[User Agent]&quot; [URL]</code></pre><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><pre class="language-shell" data-language="shell"><code class="language-shell">curl --cokkie &quot;name&#x3D;xxx&quot; example.comcurl -c cookies http:&#x2F;&#x2F;example.com # 保存网址的cookie信息到指定文件cookies中curl -b cookies http:&#x2F;&#x2F;example.com # 使用cookies这个文件作为cookie信息访问网址</code></pre><h4 id="头部信息"><a href="#头部信息" class="headerlink" title="头部信息"></a>头部信息</h4><pre class="language-shell" data-language="shell"><code class="language-shell">curl --header &quot;Content-Type:applicaion&#x2F;json&quot; http:&#x2F;&#x2F;example.comcurl -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiand0cmVzb3VjZWlkIl0sInVzZXJfbmFtZSI6InJvb3QiLCJzY29wZSI6WyJyZWFkIiwid3JpdGUiXSwiZXhwIjoxNTY1NzA2NzQ3LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIl0sImp0aSI6IjEyNWQzYTJkLTQ1ODktNDc4YS04ZTRiLTdiN2UwZDM5MGYyZCIsImNsaWVudF9pZCI6Imp3dGNsaWVudGlkIn0.AHudCbS_rctS0YQuBSADPIPnMGm9a-2hguR_I0uQ19o&quot; &quot;localhost:8080&#x2F;user&#x2F;&quot;curl -X GET &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;sys&#x2F;user?page&#x3D;0&amp;size&#x3D;10&amp;id&#x3D;1161156488191410178&amp;sort&#x3D;-createTime&quot; -H &quot;accept: *&#x2F;*&quot; -H &quot;Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJ3amMiLCJleHAiOjE1Njk4MjIyMTUsImlhdCI6MTU2OTczNTgxNX0.ORQOUeTeNORtwT6MyLy8SaOAwOmtUefyDk2korgtJPg&quot; | python -m json.tool</code></pre><h4 id="HTTP认证"><a href="#HTTP认证" class="headerlink" title="HTTP认证"></a>HTTP认证</h4><p>有些网域需要HTTP认证，</p><pre class="language-shell" data-language="shell"><code class="language-shell">curl --user clientId:clientSecret example.comcurl -u name:password example.com</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> sh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh</title>
      <link href="2020/10/27/linux/sh/ssh/"/>
      <url>2020/10/27/linux/sh/ssh/</url>
      
        <content type="html"><![CDATA[<p><strong>SSH</strong> 即 <strong>Secure Shell</strong>，是一个提供数据通信安全、远程登录、远程指令执行等功能的安全网络协议，由芬兰赫尔辛基大学研究员Tatu Ylönen，于1995年提出，其目的是用于替代非安全的Telnet、rsh、rexec等远程Shell协议。之后SSH发展了两个大版本SSH-1和SSH-2。</p><p>作为一名程序员或是运维人员，一般都会遇到 <strong>SSH</strong> 登录，或是 <strong>Git</strong> 提交等事物，每次都手动输入密码显然不是一个明智的选择，虽然有很多工具可以帮我们保存密码，但是命令才是核心，所以这篇文章简单记录下，SSH 的相关原理命令和如何实现免密登录。</p><a id="more"></a><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h4><p>现在一般的加密方法有两种，</p><p><strong>单钥加密/对称加密</strong> (private key cryptography)，</p><p>简而言之就一个密钥，所以密钥一旦泄露就，密码也被破解了。一般用来加密大量数据时候使用，算法公开，计算量少，加密速度快，加密效率高，主要算法有 <strong>DES</strong>,  <strong>AES</strong> ，<strong>3DES</strong>等</p><p>  <strong>双钥加密/非对称加密</strong> (public key cryptography)</p><p>有两把密钥，私钥可以解密公钥加密的数据，公钥可以解密私钥加密的数据，一般公钥可以给任何人，只要私钥不泄露，一般都是安全的，主要算法有 <strong>RSA</strong>，这种加密方式比较复杂，加密解密速度慢，一般只适用于对少量数据进行加密，比如用户账号密码等。</p><h4 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h4><p>数据一致性说得是如何保证一段数据在传输的过程中没有遗漏、破坏或者修改过。一般来说，目前流行的做法是对数据进行hash，<br>得到的hash值和数据一起传输，然后在收到数据的时候也对数据进行hash，将得到的hash值和传输过来的hash值进行比对，<br>如果是不一样的，说明数据已经被修改过；如果是一样的，则说明极有可能是完整的。</p><p>目前流行的hash算法有 <a href="https://en.wikipedia.org/wiki/MD5"><strong>MD5</strong></a> 和 <a href="http://link.zhihu.com/?target=http://en.wikipedia.org/wiki/Sha1"><strong>SHA-1</strong></a> 算法。</p><h4 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h4><p>身份验证说的是，判断一个人或者机器是不是就是你想要联系的。也就是说如果A想要和B通信，一般来说开始的时候会交换一些数据，<br>A怎么可以判断发送回来的数据就真的是B发送的呢？现实中有很多方法可以假冒一个机器。</p><p>在SSH里面，这主要是通过公钥来完成的。首先客户端会有一个公钥列表，保存的是它信任的机器上面的公钥。<br>在开始SSH连接之后，服务器会发送过来一个公钥，然后客户端就会进行查找，如果这个公钥在这个列表里面，就说明这个机器是真的服务器。</p><h4 id="数字签名-数字证书"><a href="#数字签名-数字证书" class="headerlink" title="数字签名/数字证书"></a>数字签名/数字证书</h4><p>简而言之，就是 <strong>发送者</strong> 根据 <strong>HASH</strong> 函数对发送信件的内容形成一个 <strong>摘要 (digest)**，然后通过私钥加密，生成 **数字签名(signature)</strong> 然后加密后的信件后面一起发送给**接收方 **，</p><p><strong>接收方</strong> 收到之后通过 <strong>发送方</strong> 给的公钥进行解密得到信件的摘要，再通过对解密后的信件内容进行再次 HASH 函数得到摘要，如果两个摘要一致，则说明信件没有被修改过。</p><p>但是接收方怎么确定公钥是发送方给的呢，这就需要 <strong>证书中心 (certificate authority，简称CA)</strong> 给公钥进行认证了。证书中心用自己的私钥，对发送方的公钥和一些相关信息一起加密，生成 **数字证书 (Digital Certificate)**。</p><p>这个建议看下</p><p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">阮一峰的翻译数字签名是什么</a></p><p><a href="http://www.youdzone.com/signature.html">翻译原文</a></p><h3 id="SSH-认证流程"><a href="#SSH-认证流程" class="headerlink" title="SSH 认证流程"></a>SSH 认证流程</h3><p>SSH 不像https一样，有一个CA提供数字证书认证，SSH 的认证有以下两种形式：</p><h4 id="基于口令"><a href="#基于口令" class="headerlink" title="基于口令"></a>基于口令</h4><p>就是输入账号跟密码了，这个一般第一次会提示</p><pre class="language-shell" data-language="shell"><code class="language-shell">The authenticity of host &#39;host (12.18.429.21)&#39; can&#39;t be established.RSA key fingerprint is 98:2e:d7:e0:le:​9f:ac:67:28:c2:42:2d:37:16:58:4d.Are you sure you want to continue connecting (yes&#x2F;no)?</code></pre><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？yes的话，远程主机的公钥会被保存在$HOME/.ssh/know_hosts里</p><pre class="language-shell" data-language="shell"><code class="language-shell">ssh -p 22 user@host </code></pre><h4 id="公钥认证-免密登录"><a href="#公钥认证-免密登录" class="headerlink" title="公钥认证/免密登录"></a>公钥认证/免密登录</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 生成公钥跟私钥，会在$HOME&#x2F;.ssh 目录生成id_rsa  id_rsa.pub两个密钥文件ssh-keygen -t rsa &#x2F;&#x2F; 默认生成2048位的RSA密钥ssh-keygen -b 4096 -t rsa &#x2F;&#x2F; 生成4096位的RSA密钥# 将本机公钥文件写入到远程主机.ssh&#x2F;authorized_keys 文件cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh user@host &quot;mkdir ~&#x2F;.ssh; cat &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys&quot;# 等价于ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh&#x2F;authorized_keys&#39; &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub# linux 可以使用ssh-copy-id, 不过他会将本地所有公钥文件上传到远程主机ssh-copy-id user@host# 或是cat id_rsa.pub&gt;&gt;authorized_keysscp -r authorized_keys user@host:~&#x2F;.ssh# 如果还是不能免密登录，则估计是权限问题，设置远程主机的文件权限chmod 700 ~&#x2F;.sshchmod 600 ~&#x2F;.ssh&#x2F;authorized_keys# 如果还是不行估计是远程主机ssh的配置文件是否有去掉注释vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config　　RSAAuthentication yes　　PubkeyAuthentication yes　　AuthorizedKeysFile .ssh&#x2F;authorized_keys　　service ssh restart &#x2F;&#x2F; ubuntu 体系&#x2F;etc&#x2F;init.d&#x2F;ssh restart &#x2F;&#x2F; debian 体系# 配置本机 $HOME&#x2F;.ssh&#x2F;config 文件vim ~&#x2F;.ssh&#x2F;configHost yourserver  HostName 192.168.11.22  Port 22  User username  IdentityFile ~&#x2F;.ssh&#x2F;id_rsa# 现在就可以免密登录了ssh youorserver</code></pre><h3 id="扩展实例"><a href="#扩展实例" class="headerlink" title="扩展实例"></a>扩展实例</h3><h4 id="SSH-数据传输"><a href="#SSH-数据传输" class="headerlink" title="SSH 数据传输"></a>SSH 数据传输</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># $HOME&#x2F;src&#x2F;目录下面的所有文件，复制到远程主机的$HOME&#x2F;src&#x2F;目录cd &amp;&amp; tar czv src | ssh user@host &#39;tar xz&#39;# 远程主机$HOME&#x2F;src&#x2F;目录下面的所有文件，复制到用户的当前目录ssh user@host &#39;tar cz src&#39; | tar xzv# 查看远程主机是否运行进程httpdssh user@host &#39;ps ax | grep [h]ttpd&#39;</code></pre><h4 id="SCP-拷贝"><a href="#SCP-拷贝" class="headerlink" title="SCP 拷贝"></a>SCP 拷贝</h4><p><strong>scp</strong> 是 <strong>secure copy</strong> 的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。</p><pre class="language-shell" data-language="shell"><code class="language-shell">-1 强制scp命令使用协议ssh1-2 强制scp命令使用协议ssh2-4 强制scp命令只使用IPv4寻址-6 强制scp命令只使用IPv6寻址-B 使用批处理模式（传输过程中不询问传输口令或短语）-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）-p 留原文件的修改时间，访问时间和访问权限。-q 不显示传输进度条。-r 递归复制整个目录。-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。-l limit 限定用户所能使用的带宽，以Kbit&#x2F;s为单位。-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，-P port 注意是大写的P, port是指定数据传输用到的端口号</code></pre><pre class="language-shell" data-language="shell"><code class="language-shell">scp source_file_path destination_file_path# 本地复制远程文件scp root@www.test.com:&#x2F;val&#x2F;test&#x2F;test.tar.gz &#x2F;val&#x2F;test&#x2F;test.tar.gz# 远程复制本地文件scp &#x2F;val&#x2F;test.tar.gz root@www.test.com:&#x2F;val&#x2F;test.tar.gz# 本地复制远程目录scp -r root@www.test.com:&#x2F;val&#x2F;test&#x2F; &#x2F;val&#x2F;test&#x2F;# 远程复制本地目录scp -r .&#x2F;ubuntu_env&#x2F; root@192.168.0.111:&#x2F;home&#x2F;pipi</code></pre><h4 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机ssh -D 8080 user@host# 假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。命令中的L参数一共接受三个值，分别是&quot;本地端口:目标主机:目标主机端口&quot;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。ssh -L 2121:host2:21 host3# 远程端口转发 ssh -R 2121:host2:21 host1# R参数也是接受三个值，分别是&quot;远程主机端口:目标主机:目标主机端口&quot;。这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口</code></pre><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://blog.csdn.net/pipisorry/article/details/52269785">ssh的用法及命令</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH的原理及应用</a></p><p><a href="https://www.jianshu.com/p/33461b619d53">图解SSH原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/28423720">SSH的免密登录怎么玩</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gradle</title>
      <link href="2020/10/27/java/tool/Gradle/"/>
      <url>2020/10/27/java/tool/Gradle/</url>
      
        <content type="html"><![CDATA[<p>软件行业的蓬勃发展，新旧交替，版本构建工具从 <strong>ant -&gt; maven -&gt; gradle</strong> 进行演变，个人不喜欢 maven 的 xml 的配置文件，基于  <strong>Groovy</strong> 语言作为构建脚本语言，相对于 JAVA 开发人员来说比较容易上手，动态语言也比 xml 配置文件更灵活，构建速度也更加的快速，所以入了 gradle 的坑。当然，目前，很多公司还是使用 maven 作为构建工具，所以建议maven 还是要懂点的。</p><p>本文仅供自己学习 gradle 的记录笔记，如果你想深入的学习，请戳 <a href="https://docs.gradle.org/current/userguide/userguide.html"><strong>官方文档</strong></a></p><p>个人觉得，官方文档是最好的学习文档，我简单过了一遍，感觉官方文档的例子都很精炼，总结得很到位，底下很多代码实例也是来自官方文档。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>每一次  Gradle  构建都是由一个或者多个 <strong>projects</strong> 组成，</p><p>比如一个  <strong>root projects</strong>  依赖多个 <strong>sub projects</strong> <strong>(module)</strong> 项目，每个 projects 又由编译，打包，生成javadoc，发布等多个 <strong>tasks</strong> 组成。<strong>tasks</strong> 之间也可以相互依赖，形成一个依赖关系图以确保他们的执行顺序。</p><h3 id="项目-Projects"><a href="#项目-Projects" class="headerlink" title="项目 Projects"></a>项目 Projects</h3><p>一个项目代表一个正在构建的组件，比如一个jar文件，当构建启动的时候，<strong>Gradle</strong> 会基于 <strong>build.gradle</strong> 实例化一个 <strong>org.gradle.api.Project</strong> 类，并且能够通过 project 变量使其隐式可用。</p><p>属性: <strong>group name version</strong></p><p>方法: <strong>apply denpendencies repositories task</strong></p><p>其他配置方式: <strong>ext gradle.properties</strong></p><h3 id="任务-Tasks"><a href="#任务-Tasks" class="headerlink" title="任务 Tasks"></a>任务 Tasks</h3><p>任务对应 <strong>org.gradle.api.Task</strong> ，主要包括任务动作和任务依赖。任务工作定义了一个最小的工作单元，可以定义依赖其他任务，动作序列和动作执行条件等。</p><p>方法: <strong>dependsOn doFirst do Last(&lt;&lt;)</strong>  </p><h3 id="构建生命周期-Build-Lifecycle"><a href="#构建生命周期-Build-Lifecycle" class="headerlink" title="构建生命周期 Build Lifecycle"></a>构建生命周期 Build Lifecycle</h3><p>A Gradle build has three distinct phases.</p><ul><li><p>Initialization</p><p>Gradle supports single and multi-project builds. During the initialization phase, Gradle determines which projects are going to take part in the build, and creates a <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html">Project</a> instance for each of these projects.</p></li><li><p>Configuration</p><p>During this phase the project objects are configured. The build scripts of <em>all</em> projects which are part of the build are executed.</p></li><li><p>Execution</p><p>Gradle determines the subset of the tasks, created and configured during the configuration phase, to be executed. The subset is determined by the task name arguments passed to the <code>gradle</code> command and the current directory. Gradle then executes each of the selected tasks.</p></li></ul><h3 id="配置文件-Settings-file"><a href="#配置文件-Settings-file" class="headerlink" title="配置文件 Settings file"></a>配置文件 Settings file</h3><p>简要概述，就是如果你是多项目，那么你要在 root project 里创建 <strong>settings.gradle</strong> 里去定义跟 sub project的关系，这个文件会在所有 project build.gradle 执行前执行。</p><p>每个 project 都有一个构建脚本 <strong>build.gradle</strong> 来完成每个 project 的构建。</p><p>在构建的时候，你如果需要对 gradle 运行一些通用的构建配置，你可以定义在 <strong>gradle.properties</strong> 里，比如全局的 group 跟 name 等。</p><p>另外，gradle 是插件配置，你可以通过 <strong>apply</strong> 引入各种现成的或者自定义的插件构建脚本。</p><p>关于 gradle 项目的几种构建脚本或者配置文件描述如下</p><h4 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h4><p>This is executed during the <strong>initialization</strong> phase.</p><p>The main role of settings.gradle is to define all included submodules and to mark the directory root of a tree of modules, so you can only have one <code>settings.gradle</code> file in a multi-module project.</p><pre class="language-java" data-language="java"><code class="language-java">rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'project-x'</span>include <span class="token string">'sub-a'</span><span class="token punctuation">,</span> <span class="token string">'sub-b'</span></code></pre><p>The settings file is also written in groovy, and submodule lookup can be adapted alot.</p><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>This is executed during the <strong>configuration</strong> phase.</p><p>There is one such file per module, it contains the build logic for this module.</p><p>In the <code>build.gradle</code> file of the <strong>main module</strong>, you can use <code>allprojects &#123;&#125;</code> or <code>subprojects &#123;&#125;</code>to define settings for all other modules.</p><p>In the <code>build.gradle</code> file of the submodules, you can use <code>compile project(&#39;:sub-a&#39;)</code> to make one submodule depend on the other.</p><h4 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h4><p>This is optional, it’s main purpose is to provide startup options to use for running gradle itself, e.g.</p><pre class="language-java" data-language="java"><code class="language-java">org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>jvmargs<span class="token operator">=</span><span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>configureondemand<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h4 id="gradle-utils-gradle"><a href="#gradle-utils-gradle" class="headerlink" title="gradle/utils.gradle"></a>gradle/utils.gradle</h4><p>(Any name of folder or file is possible.) You can define additional custom gradle files to reuse definitions, and include them in other gradle files via</p><pre class="language-java" data-language="java"><code class="language-java">apply from<span class="token operator">:</span> <span class="token string">"$rootDir/gradle/utils.gradle"</span></code></pre><h2 id="Groovy-基础"><a href="#Groovy-基础" class="headerlink" title="Groovy 基础"></a>Groovy 基础</h2><p>Groovy是一门jvm语言，它最终是要编译成class文件然后在jvm上执行，所以Java语言的特性Groovy都支持，我们完全可以混写Java和Groovy。</p><p>既然如此，那Groovy的优势是什么呢？简单来说，Groovy提供了更加灵活简单的语法，大量的语法糖以及闭包特性可以让你用更少的代码来实现和Java同样的功能。比如解析xml文件，Groovy就非常方便，只需要几行代码就能搞定，而如果用Java则需要几十行代码。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>深入学习或者有问题请戳 <a href="http://docs.groovy-lang.org/latest/html/groovy-jdk/index-all.html"><strong>Groovy Api文档</strong></a></p><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// 完全兼容 java 的语法</span><span class="token comment">// 分号可选</span><span class="token comment">// 类，方法默认都是 public</span><span class="token comment">// 编译器给属性自动添加 getter/setter 方法</span><span class="token comment">// 属性可以直接通过 . 号获取 </span><span class="token comment">// == 调用 equals 方法，判断对象是否同一个使用.is()</span>Object a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">assert</span> a <span class="token operator">==</span> b<span class="token keyword">assert</span> <span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">// 弱类型语言，可以直接用 def 定义</span><span class="token keyword">def</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">// assert 语句</span>version <span class="token operator">=</span> null<span class="token keyword">assert</span> version <span class="token operator">==</span> <span class="token number">2</span><span class="token comment">// 括号可选</span>println version<span class="token comment">// 方法返回值可省略</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 字符串</span><span class="token comment">// .1 单引号仅仅表示字符</span><span class="token keyword">def</span> s1 <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment">// .2 双引号可以引用变量</span><span class="token keyword">def</span> world <span class="token operator">=</span> <span class="token string">'world'</span><span class="token keyword">def</span> s2 <span class="token operator">=</span> <span class="token string gstring">"hello <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>world<span class="token punctuation">&#125;</span></span>"</span><span class="token comment">// .3 三个引号可以换行</span><span class="token keyword">def</span> s3 <span class="token operator">=</span> <span class="token string">''' hello world'''</span><span class="token comment">// 循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string gstring">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token number">4</span><span class="token punctuation">.</span>times <span class="token punctuation">&#123;</span>    println it<span class="token punctuation">&#125;</span><span class="token comment">// 集合api</span><span class="token comment">// .1 list -> ArrayList</span><span class="token keyword">def</span> buildTools <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token string">'maven'</span><span class="token punctuation">]</span>buildTools <span class="token operator">&lt;&lt;</span> <span class="token string">'gradle'</span><span class="token keyword">assert</span> buildTools<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ArrayList<span class="token keyword">assert</span> buildTools<span class="token punctuation">.</span>size<span class="token comment">// .2 map -> LinkedHashMap</span><span class="token keyword">def</span> map <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token keyword">def</span> buildYears <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">'maven'</span><span class="token punctuation">:</span> <span class="token number">2004</span><span class="token punctuation">]</span>buildYears<span class="token punctuation">.</span>gradle <span class="token operator">=</span> <span class="token number">2009</span>println buildYears<span class="token punctuation">.</span>antprintln buildYears<span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span>println buildYears<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 闭包 -> 类似于c语言的函数指针，可以作为方法的参数和返回值，也可以作为一个变量而存在。</span><span class="token keyword">def</span> c1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    v <span class="token operator">-></span>    println v<span class="token punctuation">&#125;</span><span class="token keyword">def</span> c2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    println <span class="token string">'world'</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">method1</span><span class="token punctuation">(</span>Closure closure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>方法<span class="token punctuation">:</span> apply denpendencies repositories task    <span class="token function">closure</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">method2</span><span class="token punctuation">(</span>Closure closure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>c1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">method1</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token function">method2</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token comment">// io</span><span class="token keyword">def</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string gstring">"a.txt"</span><span class="token punctuation">)</span>println <span class="token string gstring">"read file using two parameters"</span>file<span class="token punctuation">.</span>eachLine <span class="token punctuation">&#123;</span> line<span class="token punctuation">,</span> lineNo <span class="token operator">-></span>    println <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>lineNo<span class="token punctuation">&#125;</span></span> <span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>line<span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">&#125;</span>println <span class="token string gstring">"read file using one parameters"</span>file<span class="token punctuation">.</span>eachLine <span class="token punctuation">&#123;</span> line <span class="token operator">-></span>    println <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">&#123;</span>line<span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">&#125;</span>file<span class="token punctuation">.</span><span class="token function">eachLine</span><span class="token punctuation">(</span><span class="token string gstring">"utf-8"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    println it<span class="token punctuation">&#125;</span><span class="token comment">// wich 操作符</span>Book bk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bk<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span>bk<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string gstring">"android art"</span>bk<span class="token punctuation">.</span>press <span class="token operator">=</span> <span class="token string gstring">"china press"</span>Book bk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> bk<span class="token punctuation">.</span>with <span class="token punctuation">&#123;</span>    id <span class="token operator">=</span> <span class="token number">1</span>    name <span class="token operator">=</span> <span class="token string gstring">"android art"</span>    press <span class="token operator">=</span> <span class="token string gstring">"china press"</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为真</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 三元表达式</span><span class="token keyword">def</span> result <span class="token operator">=</span> name <span class="token operator">?:</span> <span class="token string gstring">"Unknown"</span><span class="token comment">// 非空判断</span>println order<span class="token operator">?.</span>customer<span class="token operator">?.</span>address<span class="token comment">// switch</span><span class="token keyword">def</span> x <span class="token operator">=</span> <span class="token number">1.23</span><span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token string gstring">""</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string gstring">"foo"</span><span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"found foo"</span>    <span class="token comment">// lets fall through</span>    <span class="token keyword">case</span> <span class="token string gstring">"bar"</span><span class="token punctuation">:</span> result <span class="token operator">+=</span> <span class="token string gstring">"bar"</span>    <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'inList'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"list"</span>    <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">..</span><span class="token number">30</span><span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"range"</span>    <span class="token keyword">break</span>    <span class="token keyword">case</span> Integer<span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"integer"</span>    <span class="token keyword">break</span>    <span class="token keyword">case</span> Number<span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"number"</span>    <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token punctuation">&#123;</span> it <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"number > 3"</span>    <span class="token keyword">break</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> result <span class="token operator">=</span> <span class="token string gstring">"default"</span><span class="token punctuation">&#125;</span><span class="token keyword">assert</span> result <span class="token operator">==</span> <span class="token string gstring">"number"</span></code></pre><h3 id="构建脚本解析"><a href="#构建脚本解析" class="headerlink" title="构建脚本解析"></a>构建脚本解析</h3><p>详细介绍或者想深入了解请戳 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#apply(java.util.Map)"><strong>官方api</strong></a></p><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//  PluginAware.apply(java.util.Map) </span>apply plugin<span class="token punctuation">:</span><span class="token string">'java'</span>version <span class="token operator">=</span> <span class="token string">'0.1'</span><span class="token comment">// voidrepositories​(Closure configureClosure)</span><span class="token comment">// Configures the repositories for this project.</span>repositories <span class="token punctuation">&#123;</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// void dependencies​(Closure configureClosure)</span><span class="token comment">// Configures the dependencies for this project.</span>dependencies <span class="token punctuation">&#123;</span>    <span class="token comment">// https://mvnrepository.com/artifact/com.google.guava/guava</span>compile group<span class="token punctuation">:</span> <span class="token string">'com.google.guava'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'guava'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'27.1-jre'</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>Gradle的设计理念是，所有有用的特性都由<a href="http://www.gradle.org/docs/current/userguide/plugins.html">Gradle插件</a>提供，一个Gradle插件能够：</p><ul><li><p>在项目中添加新任务</p></li><li><p>为新加入的任务提供默认配置，这个默认配置会在项目中注入新的约定（如源文件位置）。</p></li><li><p>加入新的属性，可以覆盖插件的默认配置属性。</p></li><li><p>为项目加入新的依赖。</p></li></ul><p>Gradle 用户手册提供了 <a href="https://docs.gradle.org/current/userguide/plugin_reference.html"><strong>一系列标准的gradle插件</strong></a>  </p><h4 id="The-Java-Plugin"><a href="#The-Java-Plugin" class="headerlink" title="The Java Plugin"></a>The Java Plugin</h4><p>比如 <strong>The Java Plugin</strong>， 提供了 java 相关的目录结构，属性配置，构建任务等等</p><p>如果我们使用标准的gradle插件，</p><p>注意这个不能在配置在 <strong>multi-project configurations(subprojects<code>, </code>allprojects)</strong></p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">plugins<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    id<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">&#125;</span></code></pre><p>当然我们也可以使用 <strong>apply</strong> 方法，就比较灵活了</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span></code></pre><p>我们还可以定义 jvm 的编译级别</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">sourceCompatibility<span class="token punctuation">:</span> <span class="token number">1.8</span>targetCompatibility<span class="token punctuation">:</span> <span class="token number">1.8</span></code></pre><h5 id="Project-Layout"><a href="#Project-Layout" class="headerlink" title="Project Layout"></a>Project Layout</h5><p>当我们使用 java 这个插件的时候，它默认的项目结构是</p><ul><li><p><code>src/main/java</code></p><p>Production Java source.</p></li><li><p><code>src/main/resources</code></p><p>Production resources, such as XML and properties files.</p></li><li><p><code>src/test/java</code></p><p>Test Java source.</p></li><li><p><code>src/test/resources</code></p><p>Test resources.</p></li><li><p><code>src/*sourceSet*/java</code></p><p>Java source for the source set named <em>sourceSet</em>.</p></li><li><p><code>src/*sourceSet*/resources</code></p><p>Resources for the source set named <em>sourceSet</em>.</p></li></ul><p>当然我们也可以更改它</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">sourceSets <span class="token punctuation">&#123;</span>    main <span class="token punctuation">&#123;</span>        java <span class="token punctuation">&#123;</span>            srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'src/java'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        resources <span class="token punctuation">&#123;</span>            srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'src/resources'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Dependency-management"><a href="#Dependency-management" class="headerlink" title="Dependency management"></a>Dependency management</h5><ul><li><p><code>compile</code>(Deprecated)</p><p>Compile time dependencies. Superseded by <code>implementation</code>.</p></li><li><p><code>implementation</code> extends <code>compile</code></p><p>Implementation only dependencies.</p></li><li><p><code>compileOnly</code></p><p>Compile time only dependencies, not used at runtime.</p></li><li><p><code>compileClasspath</code> extends <code>compile, compileOnly, implementation</code></p><p>Compile classpath, used when compiling source. Used by task <code>compileJava</code>.</p></li><li><p><code>annotationProcessor</code></p><p>Annotation processors used during compilation.</p></li><li><p><code>runtime</code>(Deprecated) extends <code>compile</code></p><p>Runtime dependencies. Superseded by <code>runtimeOnly</code>.</p></li><li><p><code>runtimeOnly</code></p><p>Runtime only dependencies.</p></li><li><p><code>runtimeClasspath</code> extends <code>runtimeOnly, runtime, implementation</code></p><p>Runtime classpath contains elements of the implementation, as well as runtime only elements.</p></li><li><p><code>testCompile</code>(Deprecated) extends <code>compile</code></p><p>Additional dependencies for compiling tests. Superseded by <code>testImplementation</code>.</p></li><li><p><code>testImplementation</code> extends <code>testCompile, implementation</code></p><p>Implementation only dependencies for tests.</p></li><li><p><code>testCompileOnly</code></p><p>Additional dependencies only for compiling tests, not used at runtime.</p></li><li><p><code>testCompileClasspath</code> extends <code>testCompile, testCompileOnly, testImplementation</code></p><p>Test compile classpath, used when compiling test sources. Used by task <code>compileTestJava</code>.</p></li><li><p><code>testRuntime</code>(Deprecated) extends <code>runtime, testCompile</code></p><p>Additional dependencies for running tests only. Used by task <code>test</code>. Superseded by <code>testRuntimeOnly</code>.</p></li><li><p><code>testRuntimeOnly</code> extends <code>runtimeOnly</code></p><p>Runtime only dependencies for running tests. Used by task <code>test</code>.</p></li><li><p><code>testRuntimeClasspath</code> extends <code>testRuntimeOnly, testRuntime, testImplementation</code></p><p>Runtime classpath for running tests.</p></li><li><p><code>archives</code></p><p>Artifacts (e.g. jars) produced by this project. Used by tasks <code>uploadArchives</code>.</p></li><li><p><code>default</code> extends <code>runtime</code></p><p>The default configuration used by a project dependency on this project. Contains the artifacts and dependencies required by this project at runtime.</p></li></ul><h5 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h5><p>插件也会提供很多构建任务，比如 <strong>compileJava</strong> ， <strong>processResources</strong>，<strong>classes</strong>，<strong>jar</strong>，<strong>clean</strong>，<strong>test</strong> 等等，这里只简要地提一下 <strong>jar</strong> 构建的 <strong>Manifest</strong></p><p>Each jar or war object has a <code>manifest</code> property with a separate instance of <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/java/archives/Manifest.html">Manifest</a>. When the archive is generated, a corresponding <code>MANIFEST.MF</code> file is written into the archive.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">jar <span class="token punctuation">&#123;</span>    from <span class="token punctuation">&#123;</span> configurations<span class="token punctuation">.</span>compile<span class="token punctuation">.</span>collect <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> it <span class="token punctuation">:</span> <span class="token function">zipTree</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    manifest <span class="token punctuation">&#123;</span>        attributes <span class="token string">'Main-Class'</span><span class="token punctuation">:</span> <span class="token string">'cn.jianchengwang.todo.gradle.HelloWorld'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="The-War-Plugin"><a href="#The-War-Plugin" class="headerlink" title="The War Plugin"></a>The War Plugin</h4><p>The War plugin extends the Java plugin to add support for assembling web application WAR files. It disables the default JAR archive generation of the Java plugin and adds a default WAR archive task.</p><p>这里只显示一些简单的配置脚本</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span>configurations <span class="token punctuation">&#123;</span>   moreLibs<span class="token punctuation">&#125;</span>repositories <span class="token punctuation">&#123;</span>   flatDir <span class="token punctuation">&#123;</span> dirs <span class="token string gstring">"lib"</span> <span class="token punctuation">&#125;</span>   <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">module</span><span class="token punctuation">(</span><span class="token string gstring">":compile:1.0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dependency <span class="token string gstring">":compile-transitive-1.0@jar"</span>        dependency <span class="token string gstring">":providedCompile-transitive:1.0@jar"</span>    <span class="token punctuation">&#125;</span>    providedCompile <span class="token string gstring">"javax.servlet:servlet-api:2.5"</span>    providedCompile <span class="token function">module</span><span class="token punctuation">(</span><span class="token string gstring">":providedCompile:1.0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dependency <span class="token string gstring">":providedCompile-transitive:1.0@jar"</span>    <span class="token punctuation">&#125;</span>    runtimeOnly <span class="token string gstring">":runtime:1.0"</span>    providedRuntime <span class="token string gstring">":providedRuntime:1.0@jar"</span>    testImplementation <span class="token string gstring">"junit:junit:4.12"</span>    moreLibs <span class="token string gstring">":otherLib:1.0"</span><span class="token punctuation">&#125;</span>war <span class="token punctuation">&#123;</span>    from <span class="token string">'src/rootContent'</span> <span class="token comment">// adds a file-set to the root of the archive</span>    webInf <span class="token punctuation">&#123;</span> from <span class="token string">'src/additionalWebInf'</span> <span class="token punctuation">&#125;</span> <span class="token comment">// adds a file-set to the WEB-INF dir.</span>    classpath <span class="token function">fileTree</span><span class="token punctuation">(</span><span class="token string">'additionalLibs'</span><span class="token punctuation">)</span> <span class="token comment">// adds a file-set to the WEB-INF/lib dir.</span>    classpath configurations<span class="token punctuation">.</span>moreLibs <span class="token comment">// adds a configuration to the WEB-INF/lib dir.</span>    webXml <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'src/someWeb.xml'</span><span class="token punctuation">)</span> <span class="token comment">// copies a file to WEB-INF/web.xml</span><span class="token punctuation">&#125;</span></code></pre><p>其他还有很多官方标准插件这里就不都叙述了，还有怎么编写 gradle 插件，官方文档里有详细的介绍，有兴趣可以去了解下。</p><h3 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h3><pre class="language-groovy" data-language="groovy"><code class="language-groovy">task hello <span class="token punctuation">&#123;</span>    doLast <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        println <span class="token string">'hello world'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>task count <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span>        <span class="token number">4</span><span class="token punctuation">.</span>times <span class="token punctuation">&#123;</span> print <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>it</span> "</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Task dependencies</span>task intro <span class="token punctuation">&#123;</span>    dependsOn hello    doLast <span class="token punctuation">&#123;</span>        println <span class="token string gstring">"I'm Gradle"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Dynamic tasks</span><span class="token number">4</span><span class="token punctuation">.</span>times <span class="token punctuation">&#123;</span> counter <span class="token operator">-></span>    task <span class="token string gstring">"task<span class="token expression"><span class="token punctuation">$</span>counter</span>"</span> <span class="token punctuation">&#123;</span>        doLast <span class="token punctuation">&#123;</span>            println <span class="token string gstring">"I'm task number <span class="token expression"><span class="token punctuation">$</span>counter</span>"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Manipulating existing tasks</span>hello<span class="token punctuation">.</span>doFirst <span class="token punctuation">&#123;</span>    println <span class="token string">'Hello Venus'</span><span class="token punctuation">&#125;</span>hello<span class="token punctuation">.</span>configure <span class="token punctuation">&#123;</span>    doLast <span class="token punctuation">&#123;</span>        println <span class="token string">'Hello Mars'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>hello<span class="token punctuation">.</span>configure <span class="token punctuation">&#123;</span>    doLast <span class="token punctuation">&#123;</span>        println <span class="token string">'Hello Jupiter'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Extra task properties</span>task myTask <span class="token punctuation">&#123;</span>    ext<span class="token punctuation">.</span>myProperty <span class="token operator">=</span> <span class="token string gstring">"myValue"</span><span class="token punctuation">&#125;</span>task printTaskProperties <span class="token punctuation">&#123;</span>    doLast <span class="token punctuation">&#123;</span>        println myTask<span class="token punctuation">.</span>myProperty    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Default tasks</span><span class="token comment">// Gradle allows you to define one or more default tasks that are executed if no other tasks are specified.</span>defaultTasks <span class="token string">'clean'</span><span class="token punctuation">,</span> <span class="token string">'run'</span>task clean <span class="token punctuation">&#123;</span>    doLast <span class="token punctuation">&#123;</span>        println <span class="token string">'Default Cleaning!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>task run <span class="token punctuation">&#123;</span>    doLast <span class="token punctuation">&#123;</span>        println <span class="token string">'Default Running!'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>task other <span class="token punctuation">&#123;</span>    doLast <span class="token punctuation">&#123;</span>        println <span class="token string gstring">"I'm not a default task!"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// working with files</span><span class="token comment">// .1 Copy</span>task <span class="token function">copyReport</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    from <span class="token function">file</span><span class="token punctuation">(</span><span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/reports/my-report.pdf"</span><span class="token punctuation">)</span>    into <span class="token function">file</span><span class="token punctuation">(</span><span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/toArchive"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>task <span class="token function">copyReportsForArchiving</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    from <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/reports/my-report.pdf"</span><span class="token punctuation">,</span> <span class="token string gstring">"src/docs/manual.pdf"</span>    into <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/toArchive"</span><span class="token punctuation">&#125;</span>task <span class="token function">copyPdfReportsForArchiving</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    from <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/reports"</span>    include <span class="token string gstring">"*.pdf"</span>    into <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/toArchive"</span><span class="token punctuation">&#125;</span><span class="token comment">// .2 Archive or UnPack</span>task <span class="token function">packageDistribution</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Zip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    archiveFileName <span class="token operator">=</span> <span class="token string gstring">"my-distribution.zip"</span>    destinationDirectory <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/dist"</span><span class="token punctuation">)</span>    from <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/toArchive"</span><span class="token punctuation">&#125;</span>task <span class="token function">unpackFiles</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    from <span class="token function">zipTree</span><span class="token punctuation">(</span><span class="token string gstring">"src/resources/thirdPartyResources.zip"</span><span class="token punctuation">)</span>    into <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/resources"</span><span class="token punctuation">&#125;</span><span class="token comment">// .3 Creating "uber" or "fat" JARs</span>plugins <span class="token punctuation">&#123;</span>    id <span class="token string">'java'</span><span class="token punctuation">&#125;</span>version <span class="token operator">=</span> <span class="token string">'1.0.0'</span>repositories <span class="token punctuation">&#123;</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'commons-io:commons-io:2.6'</span><span class="token punctuation">&#125;</span>task <span class="token function">uberJar</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Jar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    archiveClassifier <span class="token operator">=</span> <span class="token string">'uber'</span>    from sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>output    dependsOn configurations<span class="token punctuation">.</span>runtimeClasspath    from <span class="token punctuation">&#123;</span>        configurations<span class="token punctuation">.</span>runtimeClasspath<span class="token punctuation">.</span>findAll <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'jar'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>collect <span class="token punctuation">&#123;</span> <span class="token function">zipTree</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="管理依赖"><a href="#管理依赖" class="headerlink" title="管理依赖"></a>管理依赖</h3><h4 id="依赖类型"><a href="#依赖类型" class="headerlink" title="依赖类型"></a>依赖类型</h4><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// module dependencies</span>dependencies <span class="token punctuation">&#123;</span>    runtime group<span class="token punctuation">:</span> <span class="token string">'org.springframework'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'spring-core'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'2.5'</span>    implementation <span class="token string">'org.springframework:spring-web:5.+'</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">'org.ow2.asm:asm:6.0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        because <span class="token string">'we require a JDK 9 compatible bytecode generator'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// file dependencies</span>dependencies <span class="token punctuation">&#123;</span>    runtime <span class="token function">files</span><span class="token punctuation">(</span><span class="token string">'libs/a.jar'</span><span class="token punctuation">,</span> <span class="token string">'libs/b.jar'</span><span class="token punctuation">)</span>    runtime <span class="token function">fileTree</span><span class="token punctuation">(</span><span class="token string">'libs'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> include <span class="token string">'*.jar'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// project dependencies</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':shared'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="仓库类型"><a href="#仓库类型" class="headerlink" title="仓库类型"></a>仓库类型</h4><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// flat dir</span>repositories <span class="token punctuation">&#123;</span>    flatDir <span class="token punctuation">&#123;</span>        dirs <span class="token string">'lib'</span>    <span class="token punctuation">&#125;</span>    flatDir <span class="token punctuation">&#123;</span>        dirs <span class="token string">'lib1'</span><span class="token punctuation">,</span> <span class="token string">'lib2'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// maven repo</span>repositories <span class="token punctuation">&#123;</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    maven <span class="token punctuation">&#123;</span>        url <span class="token string gstring">"http://repo.mycompany.com/maven2"</span>    <span class="token punctuation">&#125;</span>    maven <span class="token punctuation">&#123;</span>        url <span class="token string gstring">"http://repo.mycompany.com/snapshots"</span>        mavenContent <span class="token punctuation">&#123;</span>            <span class="token function">snapshotsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    maven <span class="token punctuation">&#123;</span>        url <span class="token string gstring">"sftp://repo.mycompany.com:22/maven2"</span>        credentials <span class="token punctuation">&#123;</span>            username <span class="token string gstring">"user"</span>            password <span class="token string gstring">"password"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="版本冲突"><a href="#版本冲突" class="headerlink" title="版本冲突"></a>版本冲突</h4><p>如果存在依赖的版本冲突，那么 gradle 默认会选择最高版本的的依赖以解决依赖冲突，当然我们也可以手动解决，比如排除依赖，或者手动设置一个版本。当然，一般使用 gradle 默认的处理就可以了。</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">//  Excluding transitive dependency for a particular dependency declaration</span>dependencies <span class="token punctuation">&#123;</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">'log4j:log4j:1.2.15'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'javax.jms'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jms'</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'com.sun.jdmk'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jmxtools'</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'com.sun.jmx'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jmxri'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Excluding transitive dependency for a particular configuration</span>configurations <span class="token punctuation">&#123;</span>    implementation <span class="token punctuation">&#123;</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'javax.jms'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jms'</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'com.sun.jdmk'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jmxtools'</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'com.sun.jmx'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'jmxri'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'log4j:log4j:1.2.15'</span><span class="token punctuation">&#125;</span><span class="token comment">// Enforcing a dependency version</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.apache.httpcomponents:httpclient:4.5.4'</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">'commons-codec:commons-codec:1.9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        force <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h3><p>多项目构建就是在 <strong>root project</strong>配置一个 <strong>settings.gradle</strong> 引入需要的子项目即可，</p><p>比如我这边 <strong>root project</strong> 为  todo-gradle，有三个 <strong>sub project</strong> ，</p><p>则 <strong>settings.gradle</strong> 配置如下</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'todo-gradle'</span>include <span class="token string">'web'</span>include <span class="token string">'model'</span>include <span class="token string">'dao'</span></code></pre><p>如果，<strong>sub project</strong> 很多配置项一样，那我们可以在 <strong>root project</strong> 的 <strong>build.gradle</strong> 构建脚本里进行通用的配置，使其对子项目生效，</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">allprojects <span class="token punctuation">&#123;</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span><span class="token punctuation">&#125;</span>subprojects <span class="token punctuation">&#123;</span>    repositories <span class="token punctuation">&#123;</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    dependencies <span class="token punctuation">&#123;</span>        testCompile group<span class="token punctuation">:</span> <span class="token string">'junit'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'junit'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'4.12'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果自定义的配置的任务或者选项，则在每个 <strong>project</strong> 的 <strong>build.gradle</strong> 构建脚本里配置即可，比如我 <strong>web sub project</strong> 还引入了 <strong>The War Plugin</strong>，那么我在 <strong>web sub project</strong> 的<strong>build.gradle</strong> 构建脚本可以配置如下</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span></code></pre><p>最后就是项目依赖配置了，比如我 <strong>dao sub project</strong> 依赖 <strong>model sub project</strong></p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>因为依赖是可以传递的，所以假如我 <strong>web sub project</strong> 依赖 <strong>dao sub project</strong> 跟 <strong>model sub project</strong>，而 <strong>dao sub project</strong> 又依赖 <strong>model sub project</strong>，实际上我只要在 <strong>web sub projec</strong>t 构建脚本里面依赖 <strong>dao sub project</strong> 即可</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':dao'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>如果存在依赖关系，显而易见，那么被依赖的项目或者任务都会先执行。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>一般只要类继承 <strong>junit.framework.TestCase</strong> 或者 <strong>groovy.util.GroovyTestCase</strong> </p><p>或是假如使用 springboot 框架，带有 <strong>@RunWith</strong> 注解的类</p><p>最常见的就是任何至少一个包含 <strong>@Test</strong> 注解的类</p><p>当然，不同测试框架使用大同小异，你可以具体使用的时候查阅下资料即可，</p><p>下面官方的代码实例就显示了 <strong>test task</strong> 的相关配置。 </p><p>Executes JUnit (3.8.x, 4.x or 5.x) or TestNG tests. Test are always run in (one or more) separate JVMs. The sample below shows various configuration options.</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span> <span class="token comment">// adds 'test' task</span>test <span class="token punctuation">&#123;</span>  <span class="token comment">// enable TestNG support (default is JUnit)</span>  <span class="token function">useTestNG</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// enable JUnit Platform (a.k.a. JUnit 5) support</span>  <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// set a system property for the test JVM(s)</span>  systemProperty <span class="token string">'some.prop'</span><span class="token punctuation">,</span> <span class="token string">'value'</span>  <span class="token comment">// explicitly include or exclude tests</span>  include <span class="token string">'org/foo/**'</span>  exclude <span class="token string">'org/boo/**'</span>  <span class="token comment">// show standard out and standard error of the test JVM(s) on the console</span>  testLogging<span class="token punctuation">.</span>showStandardStreams <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">// set heap size for the test JVM(s)</span>  minHeapSize <span class="token operator">=</span> <span class="token string gstring">"128m"</span>  maxHeapSize <span class="token operator">=</span> <span class="token string gstring">"512m"</span>  <span class="token comment">// set JVM arguments for the test JVM(s)</span>  jvmArgs <span class="token string">'-XX:MaxPermSize=256m'</span>  <span class="token comment">// listen to events in the test execution lifecycle</span>  beforeTest <span class="token punctuation">&#123;</span> descriptor <span class="token operator">-></span>     logger<span class="token punctuation">.</span><span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token string gstring">"Running test: "</span> <span class="token operator">+</span> descriptor<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Fail the 'test' task on the first test failure</span>  failFast <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">// listen to standard out and standard error of the test JVM(s)</span>  onOutput <span class="token punctuation">&#123;</span> descriptor<span class="token punctuation">,</span> event <span class="token operator">-></span>     logger<span class="token punctuation">.</span><span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token string gstring">"Test: "</span> <span class="token operator">+</span> descriptor <span class="token operator">+</span> <span class="token string gstring">" produced standard out/err: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>message <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>一般测试的最终结果，会显示在 <strong>project</strong> 的 <strong>build/reports</strong> 目录里面</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>假如我们开发完一个功能模块，打包成一个 jar 包，需要提供给他人依赖引用，那么我们就可以发布出去了，一般 gradle 没有自己的仓库，如果是java 项目的话一般都是发布到 <strong>maven</strong> 仓库，因为 <strong>lvh</strong> 现在用的人比较少了，这里就简单的介绍一下怎么发布到 maven 仓库</p><h4 id="Maven-Publish-Pluging"><a href="#Maven-Publish-Pluging" class="headerlink" title="Maven Publish Pluging"></a>Maven Publish Pluging</h4><pre class="language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'maven-publish'</span>publishing <span class="token punctuation">&#123;</span>        publications <span class="token punctuation">&#123;</span>        <span class="token function">maven</span><span class="token punctuation">(</span>MavenPublication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            groupId <span class="token operator">=</span> <span class="token string">'org.gradle.sample'</span>            artifactId <span class="token operator">=</span> <span class="token string">'project1-sample'</span>            version <span class="token operator">=</span> <span class="token string">'1.1'</span>            from components<span class="token punctuation">.</span>java        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        repositories <span class="token punctuation">&#123;</span>        maven <span class="token punctuation">&#123;</span>            name <span class="token operator">=</span> <span class="token string">'myRepo'</span>            <span class="token keyword">def</span> releasesRepoUrl <span class="token operator">=</span> <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/repos/releases"</span>            <span class="token keyword">def</span> snapshotsRepoUrl <span class="token operator">=</span> <span class="token string gstring">"<span class="token expression"><span class="token punctuation">$</span>buildDir</span>/repos/snapshots"</span>            url <span class="token operator">=</span> version<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'SNAPSHOT'</span><span class="token punctuation">)</span> <span class="token operator">?</span> snapshotsRepoUrl <span class="token punctuation">:</span> releasesRepoUrl        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://docs.gradle.org/current/userguide/userguide.html"><strong>官方用户手册</strong></a></p><p><a href="https://www.imooc.com/learn/833"><strong>慕课网新一代构建工具gradle</strong></a></p><p><a href="https://github.com/jianchengwang/todo-java"><strong>TODO 代码</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7</title>
      <link href="2020/10/27/linux/dist/centos7/"/>
      <url>2020/10/27/linux/dist/centos7/</url>
      
        <content type="html"><![CDATA[<p>因为公司服务器都是centos7 服务器系统，所以这里对centos 7 的常规配置做一个简要的记录，方便后期维护。这里我用vmware 简单安装一个centos7 简单的演示。</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="安装基础软件"><a href="#安装基础软件" class="headerlink" title="安装基础软件"></a>安装基础软件</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># 使用ifconfig等命令yum -y install net-tools# 下载文件相关yum -y install wget# 测试网页交互yum -y install curl# 编辑配置文件yum -y install vim# ssh and sftpyum -y install openssh-servervim &#x2F;etc&#x2F;ssh&#x2F;sshd_config # 配置sshdservice sshd start or systemctl start sshd  # 启动sshd服务ps -e | grep sshd # 检查sshd服务是否启动netstat -an | grep 22 # 检查22端口是否监听systemctl enable sshd # 开启自启动sshd# 安装zshsudo yum install gitsudo yum install zshsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;chsh -s &#x2F;bin&#x2F;zsh</code></pre><h3 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h3><pre class="language-shell" data-language="shell"><code class="language-shell"># 列出默认镜像源[root@localhost ~]# ll &#x2F;etc&#x2F;yum.repos.dtotal 32-rw-r--r--. 1 root root 1664 Apr 29 00:35 CentOS-Base.repo-rw-r--r--. 1 root root 1309 Apr 29 00:35 CentOS-CR.repo-rw-r--r--. 1 root root  649 Apr 29 00:35 CentOS-Debuginfo.repo-rw-r--r--. 1 root root  314 Apr 29 00:35 CentOS-fasttrack.repo-rw-r--r--. 1 root root  630 Apr 29 00:35 CentOS-Media.repo-rw-r--r--. 1 root root 1331 Apr 29 00:35 CentOS-Sources.repo-rw-r--r--. 1 root root 4768 Apr 29 00:35 CentOS-Vault.repo# 备份[root@localhost yum.repos.d]#  mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup# 下载 163 or aliyun yum 镜像源配置文件wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.163.com&#x2F;.help&#x2F;CentOS7-Base-163.repo or wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo# 如果出现 wget: unable to resolve host address ‘mirrors.aliyun.com’nmcli connection showNAME    UUID                                  TYPE      DEVICE ens33   9086459f-a00c-4612-8123-3cc893e4f4a9  ethernet  ens33  virbr0  c5782ea3-b8df-4fc6-87ae-ed6a6439028a  bridge    virbr0 nmcli con mod ens33 ipv4.dns &quot;114.114.114.114 8.8.8.8&quot;nmcli con up ens33# yum makecacheyum makecache# yum updateyum -y update</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 查看系统内核cat &#x2F;proc&#x2F;version or uname -a # susu - # 切换到root权限（与su有区别）# shutdownshutdown -h now# 关机shutdown -r now# 重启# toptop# 罗列使用CPU资源最多的linux任务 （输入q退出）# pstreepstree# 以树状图显示程序# manman ping# 查看参考手册（例如ping 命令）# calcal -3# 显示前一个月，当前月以及下一个月的月历cal 10 1988# 显示指定月，年的月历</code></pre><h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># dfdf -h# 显示磁盘的使用情况# dudu -h file # 查看文件容量du -h --max-depth&#x3D;1 # 查看当前目录大小# fdiskfdisk -l # 显示所有分区信息# mkfsmkfs -t ext3 &#x2F;dev&#x2F;hdc6 # 对分区格式化系统# fsckfsck -C -f -t ext3 &#x2F;dev&#x2F;hdc6 # 强制检测&#x2F;dev&#x2F;hdc6分区# mountmount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6 # 将分区&#x2F;dev&#x2F;hdc6挂载到&#x2F;mnt&#x2F;hdc6目录umount &#x2F;dev&#x2F;hdc6 # 卸载</code></pre><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># cdcd &#x2F;home# 进入 &#x2F;home 目录cd ..# 返回上一级目录cd ..&#x2F;.. # 返回上两级目录cd -# 返回上次所在目录cp file1 file2# 将file1复制为file2cp -a dir1 dir2# 复制一个目录cp -a &#x2F;tmp&#x2F;dir1 .# 复制一个目录到当前工作目录（.代表当前目录）# lsls# 查看目录中的文件ls -a# 显示隐藏文件ls -l# 显示详细信息ls -lrt# 按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）# pwdpwd# 显示工作路径# mkdirmkdir dir1# 创建 dir1 目录mkdir dir1 dir2# 同时创建两个目录mkdir -p &#x2F;tmp&#x2F;dir1&#x2F;dir2# 创建一个目录树mv dir1 dir2# 移动&#x2F;重命名一个目录rm -f file1# 删除 ‘file1’rm -rf dir1# 删除 ‘dir1’ 目录及其子目录内容</code></pre><h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># catcat file1# 从第一个字节开始正向查看文件的内容# tactac file1# 从最后一行开始反向查看一个文件的内容# headhead -2 file1# 查看一个文件的前两行# tailtail -3 file1# 查看一个文件的最后三行# moremore file1# 查看一个长文件的内容</code></pre><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># grepgrep str &#x2F;tmp&#x2F;test# 在文件 &#x2F;tmp&#x2F;test 中查找 strgrep ^str &#x2F;tmp&#x2F;test# 在文件 &#x2F;tmp&#x2F;test 中查找以 str 开始的行grep [0-9] &#x2F;tmp&#x2F;test# 查找 &#x2F;tmp&#x2F;test 文件中所有包含数字的行grep str -r &#x2F;tmp&#x2F;*# 在目录 &#x2F;tmp 及其子目录中查找 str# diffdiff file1 file2# 找出两个文件的不同处# sdiffsdiff file1 file2# 以对比的方式显示两个文件的不同</code></pre><h4 id="文件查询"><a href="#文件查询" class="headerlink" title="文件查询"></a>文件查询</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># findfind &#x2F; -name file1# 从 &#x2F; 开始进入根文件系统查找文件和目录find &#x2F; -user user1# 查找属于用户 user1 的文件和目录find &#x2F;home&#x2F;user1 -name *.bin# 在目录 &#x2F; home&#x2F;user1 中查找以 .bin 结尾的文件find &#x2F;usr&#x2F;bin -type f -atime +100# 查找在过去100天内未被使用过的执行文件find &#x2F;usr&#x2F;bin -type f -mtime -10# 查找在10天内被创建或者修改过的文件find -name &#39;*.[ch]&#39; | xargs grep -E &#39;expr&#39;# 在当前目录及其子目录所有.c和.h文件中查找 exprfind -type f -print0 | xargs -r0 grep -F &#39;expr&#39;# 在当前目录及其子目录的常规文件中查找 exprfind -maxdepth 1 -type f | xargs grep -F &#39;expr&#39;# 在当前目录中查找 expr# locatelocate *.ps寻找以 .ps 结尾的文件，先运行 updatedb 命令</code></pre><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># chownchown -R user1 &#x2F;usr&#x2F;meng # 将&#x2F;usr&#x2F;meng下的所有目录文件归属为user1# chmodchmod 777 -R dir&#x2F; # 修改dir目录下所有文件权限未777chmod u+x,g+w f01　　# 为文件f01设置自己可以执行，组员可以写入的权限chmod u&#x3D;rwx,g&#x3D;rw,o&#x3D;r f01chmod 764 f01chmod a+x f01　　# 对文件f01的u,g,o都设置可执行属性</code></pre><h4 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># bzip2bzip2 file1# 压缩 file1bunzip2 file1.bz2# 解压 file1.bz2# gzipgzip file1# 压缩 file1gzip -9 file1# 最大程度压缩 file1gunzip file1.gz# 解压 file1.gz# tartar -cvf archive.tar file1# 把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）tar -cvf archive.tar file1 dir1# 把 file1，dir1 打包成 archive.tartar -tf archive.tar# 显示一个包中的内容tar -xvf archive.tar# 释放一个包tar -xvf archive.tar -C &#x2F;tmp# 把压缩包释放到 &#x2F;tmp目录下tar -xzf archive.tar.gz # 解压并释放tar -xjf archive.tar.bz2 # 解压并释放# zipzip file1.zip file1# 创建一个zip格式的压缩包zip -r file1.zip file1 dir1# 把文件和目录压缩成一个zip格式的压缩包unzip file1.zip# 解压一个zip格式的压缩包到当前目录unzip test.zip -d &#x2F;tmp&#x2F;# 解压一个zip格式的压缩包到 &#x2F;tmp 目录</code></pre><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># rpmrpm –i file.rpm# 安装软件包rpm –qrpm # 查询软件包rpm -e rpm # 移除软件包# yumyum --helpyum repolist all # 列出所有仓库yum info [packeage] # 显示软件包信息yum -y install [package]# 下载并安装一个rpm包yum localinstall [package.rpm]# 安装一个rpm包，使用你自己的软件仓库解决所有依赖关系yum -y update# 更新当前系统中安装的所有rpm包yum update [package]# 更新一个rpm包yum remove [package]# 删除一个rpm包yum list# 列出当前系统中安装的所有包yum search [package]# 在rpm仓库中搜寻软件包yum clean [package]# 清除缓存目录（&#x2F;var&#x2F;cache&#x2F;yum）下的软件包yum clean headers# 删除所有头文件yum clean all# 删除所有缓存的包和头文件</code></pre><h4 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># ifconfigifconfig eth0# 显示一个以太网卡的配置ifconfig eth0 192.168.1.1 netmask 255.255.255.0#配置网卡的IP地址# ifupifdown eth0# 禁用 eth0 网络设备ifup eth0# 启用 eth0 网络设备# iwconfigiwconfig eth1# 显示一个无线网卡的配置iwlist scan# 显示无线网络# ipip addr show# 显示网卡的IP地址# traceroute traceroute # 路由追踪# netstatnetstat -ap | grep ssh # 找出进程运行的端口netstat -an | grep &#39;:80&#39; # 找出运行在指定端口的进程netstat -i # 显示网络接口列表# wgetwget downloadurl # 下载文件# curlcurl www.baidu.com # 显示百度网页信息</code></pre><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># psps -e | grep sshd # 检查sshd服务是否启动# pidofpidof nginx# 查看nginx的进程号# killkill -9 pid # 强制杀死进程# pkillpkill java # 杀死java进程</code></pre><h4 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 使某服务自动启动chkconfig --level 3 httpd onsystemctl enable   httpd.service# 使某服务不自动启动chkconfig --level 3 httpd offsystemctl disable httpd.service# 检查服务状态service httpd statussystemctl status httpd.service （服务详细信息） systemctl is-active   httpd.service （仅显示是否   Active)# 显示所有已启动的服务chkconfig --listsystemctl list-units --type&#x3D;service  # 启动某服务service httpd startsystemctl start httpd.service# 停止某服务service httpd stopsystemctl stop httpd.service# 重启某服务service httpd restartsystemctl restart httpd.service# 防火墙systemctl start firewalldsystemctl stop firewalld</code></pre><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>firewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。</p><pre class="language-shell" data-language="shell"><code class="language-shell">firewall-cmd --version  # 查看版本firewall-cmd --help     # 查看帮助# 查看设置：firewall-cmd --state  # 显示状态firewall-cmd --get-active-zones  # 查看区域信息firewall-cmd --get-zone-of-interface&#x3D;eth0  # 查看指定接口所属区域firewall-cmd --panic-on  # 拒绝所有包firewall-cmd --panic-off  # 取消拒绝状态firewall-cmd --query-panic  # 查看是否拒绝firewall-cmd --reload # 更新防火墙规则firewall-cmd --complete-reload# 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务# 将接口添加到区域，默认接口都在publicfirewall-cmd --zone&#x3D;public --add-interface&#x3D;eth0# 永久生效再加上 --permanent 然后reload防火墙# 设置默认接口区域，立即生效无需重启firewall-cmd --set-default-zone&#x3D;public# 查看所有打开的端口：firewall-cmd --zone&#x3D;dmz --list-ports# 加入一个端口到区域：firewall-cmd --zone&#x3D;dmz --add-port&#x3D;8080&#x2F;tcp# 加入多个端口firewall-cmd --zone&#x3D;dmz --add-port&#x3D;8080-8081&#x2F;tcp# 若要永久生效方法同上# 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，&#x2F;etc&#x2F;firewalld 目录下有services文件夹，这个不详细说了，详情参考文档firewall-cmd --zone&#x3D;work --add-service&#x3D;smtp# 移除服务firewall-cmd --zone&#x3D;work --remove-service&#x3D;smtp# 显示支持的区域列表firewall-cmd --get-zones# 设置为家庭区域firewall-cmd --set-default-zone&#x3D;home# 查看当前区域firewall-cmd --get-active-zones# 设置当前区域的接口firewall-cmd --get-zone-of-interface&#x3D;enp03s# 显示所有公共区域（public）firewall-cmd --zone&#x3D;public --list-all# 临时修改网络接口（enp0s3）为内部区域（internal）firewall-cmd --zone&#x3D;internal --change-interface&#x3D;enp03s# 永久修改网络接口enp03s为内部区域（internal）firewall-cmd --permanent --zone&#x3D;internal --change-interface&#x3D;enp03s</code></pre><p>服务管理</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 显示服务列表  Amanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：firewall-cmd --get-services# 允许SSH服务通过firewall-cmd --new-service&#x3D;ssh# 禁止SSH服务通过firewall-cmd --delete-service&#x3D;ssh# 打开TCP的8080端口firewall-cmd --enable ports&#x3D;8080&#x2F;tcpfirewall-cmd --enable ports&#x3D;3306&#x2F;tcp# 临时允许Samba服务通过600秒firewall-cmd --enable service&#x3D;samba --timeout&#x3D;600# 显示当前服务firewall-cmd --list-services# 添加HTTP服务到内部区域（internal）firewall-cmd --permanent --zone&#x3D;internal --add-service&#x3D;httpfirewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙</code></pre><p>端口管理</p><pre class="language-shell" data-language="shell"><code class="language-shell"># 打开443&#x2F;TCP端口firewall-cmd --add-port&#x3D;443&#x2F;tcp# 永久打开3306&#x2F;TCP端口firewall-cmd --permanent --add-port&#x3D;3306&#x2F;tcp# 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了# 其它服务也可能是这样的，这个没有测试firewall-cmd --reload# 查看防火墙，添加的端口也可以看到firewall-cmd --list-all</code></pre><p>直接模式</p><pre class="language-shell" data-language="shell"><code class="language-shell"># FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口firewall-cmd --direct -add-rule ipv4 filter INPUT 0 -p tcp --dport 9000 -j ACCEPTfirewall-cmd --reload</code></pre><p><strong>控制端口 / 服务</strong></p><p>可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放 http 服务就是开放了 80 端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp 还是 udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。</p><pre class="language-shell" data-language="shell"><code class="language-shell">firewall-cmd --add-service&#x3D;mysql        # 开放mysql端口firewall-cmd --remove-service&#x3D;http      # 阻止http端口firewall-cmd --list-services            # 查看开放的服务firewall-cmd --add-port&#x3D;3306&#x2F;tcp        # 开放通过tcp访问3306firewall-cmd --remove-port&#x3D;80tcp        # 阻止通过tcp访问3306firewall-cmd --add-port&#x3D;233&#x2F;udp         # 开放通过udp访问233firewall-cmd --list-ports               # 查看开放的端口</code></pre><p>伪装 IP</p><pre class="language-shell" data-language="shell"><code class="language-shell">firewall-cmd --query-masquerade # 检查是否允许伪装IPfirewall-cmd --add-masquerade   # 允许防火墙伪装IPfirewall-cmd --remove-masquerade# 禁止防火墙伪装IP</code></pre><p><strong>端口转发</strong></p><p>端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定 ip 的话就默认为本机，如果指定了 ip 却没指定端口，则默认使用来源端口。 如果配置好端口转发之后不能用，可以检查下面两个问题：</p><ol><li>比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了</li><li>其次检查是否允许伪装 IP，没允许的话要开启伪装 IP</li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">firewall-cmd --add-forward-port&#x3D;port&#x3D;80:proto&#x3D;tcp:toport&#x3D;8080   # 将80端口的流量转发至8080firewall-cmd --add-forward-port&#x3D;port&#x3D;80:proto&#x3D;tcp:toaddr&#x3D;192.168.0.1 # 将80端口的流量转发至192.168.0.1firewall-cmd --add-forward-port&#x3D;port&#x3D;80:proto&#x3D;tcp:toaddr&#x3D;192.168.0.1:toport&#x3D;8080 # 将80端口的流量转发至192.168.0.1的8080端口</code></pre><ol><li>当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。</li><li>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。</li></ol><h3 id="安装应用软件"><a href="#安装应用软件" class="headerlink" title="安装应用软件"></a>安装应用软件</h3><h4 id="jdk1-8"><a href="#jdk1-8" class="headerlink" title="jdk1.8"></a>jdk1.8</h4><pre class="language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;code.aliyun.com&#x2F;kar&#x2F;oracle-jdk&#x2F;raw&#x2F;3c932f02aa11e79dc39e4a68f5b0483ec1d32abe&#x2F;jdk-8u251-linux-x64.tar.gztar -zxvf jdk-8u251-linux-x64.tar.gzvim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;root&#x2F;lang&#x2F;jdk1.8.0_251export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre   export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;libexport PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;binsource &#x2F;etc&#x2F;profile</code></pre><h4 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 添加Mysql5.7仓库sudo rpm -ivh https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-11.noarch.rpmorwget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-11.noarch.rpmyum localinstall mysql57-community-release-el7-11.noarch.rpm# 确认Mysql仓库成功添加sudo yum repolist all | grep mysql | grep enabled如果展示像下面,则表示成功添加仓库:mysql-connectors-community&#x2F;x86_64  MySQL Connectors Community    enabled:     51mysql-tools-community&#x2F;x86_64       MySQL Tools Community         enabled:     63mysql57-community&#x2F;x86_64           MySQL 5.7 Community Server    enabled:    267# 开始安装Mysql5.7sudo yum -y install mysql-community-server# 启动Mysqlsudo systemctl start mysqld# 设置系统启动时自动启动sudo systemctl enable mysqld# 查看启动状态sudo systemctl status mysqld# Mysql的安全设置CentOS上的root默认密码可以在文件&#x2F;var&#x2F;log&#x2F;mysqld.log找到，通过下面命令可以打印出来cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep -i &#39;temporary password&#39;执行下面命令进行安全设置，这个命令会进行设置root密码设置，移除匿名用户，禁止root用户远程连接等mysql_secure_installation# 设置数据库编码为utf8打开配置文件sudo vim &#x2F;etc&#x2F;my.cnf在[mysqld]，[client]，[mysql]节点下添加编码设置[client]default-character-set&#x3D;utf8[mysql]default-character-set&#x3D;utf8[mysqld]collation-server &#x3D; utf8_unicode_ciinit-connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server &#x3D; utf8max_allowed_packet &#x3D; 20M# 重启Mysql即可sudo systemctl restart mysqld# 免密登录# mysql5.7编辑 &#x2F;etc&#x2F;my.cnf，在 [mysqld] 小节下添加一行：skip-grant-tables&#x3D;1# mysql5.7.6以后版本默认不安装mysqld_safesystemctl stop mysqldsystemctl set-environment MYSQLD_OPTS&#x3D;&quot;--skip-grant-tables&quot;systemctl start mysqld# 修改密码SET PASSWORD &#x3D; PASSWORD(&#39;Wjc123456&#39;);ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;update user set authentication_string &#x3D; password(&#39;123456&#39;), password_expired &#x3D; &#39;N&#39;, password_last_changed &#x3D; now() where user &#x3D; &#39;root&#39;;# 去除密码校验SET GLOBAL validate_password_policy&#x3D;LOW;SET GLOBAL validate_password_length &#x3D; 6;SET GLOBAL validate_password_number_count &#x3D; 0;或者[mysqld]validate_password_policy&#x3D;LOWvalidate_password_special_char_count&#x3D;0validate_password_length&#x3D;0validate_password_mixed_case_count&#x3D;0validate_password_number_count&#x3D;0或者uninstall plugin validate_password;# 添加远程用户GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;flush privileges;use mysql;select host, user from user;</code></pre><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># add the EPEL repository, and update YUM to confirm your change:sudo yum install epel-releasesudo yum update# 安装sudo yum install redis# 启动sudo systemctl start redis.service# 开机启动sudo systemctl enable redis.service# 修改密码vim &#x2F;etc&#x2F;redis.conf# bind 127.0.0.1 &#x2F;&#x2F; 注释掉允许远程访问requirepass 123456# 启动cliredis-cliAUTH 123456 &#x2F;&#x2F; 验证密码INFO replication &#x2F;&#x2F; 配置信息</code></pre><h4 id="rabbitMQ"><a href="#rabbitMQ" class="headerlink" title="rabbitMQ"></a>rabbitMQ</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 安装erlangsudo yum install erlang# 安装rabbitMQwget  http:&#x2F;&#x2F;www.rabbitmq.com&#x2F;releases&#x2F;rabbitmq-server&#x2F;v3.6.15&#x2F;rabbitmq-server-3.6.15-1.el7.noarch.rpmsudo yum install socat &#x2F;&#x2F; 安装依赖sudo rpm -ivh rabbitmq-serve+r-3.6.17-1.el7.noarch.rpm# 开机启动chkconfig rabbitmq-server on# 启动service rabbitmq-server start# 安装web管理界面sudo rabbitmq-plugins enable rabbitmq_management# 创建用户sudo rabbitmqctl add_user admin 123456# 设置管理员角色sudo rabbitmqctl set_user_tags admin administrator# 授权sudo rabbitmqctl set_permissions -p &#x2F; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;# 访问http:&#x2F;&#x2F;127.0.0.1:15672&#x2F;</code></pre><h4 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h4><pre class="language-shell" data-language="shell"><code class="language-shell"># 服务端配置 192.168.1.200# 检查nfs是否安装rpm -qa | grep nfsyum install nfs-utils -y# 检查rpcbind是否安装rpm -qa | grep rpcbindyum install rpcbind  -y# 服务端配置vi &#x2F;etc&#x2F;exports# 这个配置表示开放本地存储目录&#x2F;tmp&#x2F;data只允许192.168.1.100这个主机有访问权限# rw表示允许读写# no_root_squash表示root用户具有完全的管理权限# no_all_squash表示保留共享文件的UID和GID，此项是默认不写也可以；# async表示数据可以先暂时在内存中，不是直接写入磁盘，可以提高性能，另外也可以配置sync表示数据直接同步到磁盘&#x2F;home&#x2F;data 192.168.1.100(rw,no_root_squash,no_all_squash,async)# 启动服务配置生效service rpcbind startservice nfs startexportfs -r# 配置防火墙规则# 111和2049端口，这是portmap和nfsd进程对应的端口。但是其他端口是系统开机时随机分配的，很难确定，所有需要修改配置文件&#x2F;etc&#x2F;sysconfig&#x2F;nfs,把这些端口固定下来，然后在防火墙上关闭。rpcinfo  -prpcinfo nfs_server_ip# 设置固定端口vim &#x2F;etc&#x2F;sysconfig&#x2F;nfsRQUOTAD_PORT&#x3D;30001LOCKD_TCPPORT&#x3D;30002LOCKD_UDPPORT&#x3D;30002MOUNTD_PORT&#x3D;30003STATD_PORT&#x3D;30004# 重启服务sysctl -psystemctl restart rpcbind systemctl restart nfs-server systemctl restart nfs-lock systemctl restart nfs-idmap# 开启防火墙端口# 开启端口访问firewall-cmd --permanent --zone&#x3D;public --add-port 111&#x2F;tcpfirewall-cmd --permanent --zone&#x3D;public --add-port 111&#x2F;udpfirewall-cmd --permanent --zone&#x3D;public --add-port 2049&#x2F;tcpfirewall-cmd --permanent --zone&#x3D;public --add-port 2049&#x2F;udpfirewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;30001-30004&#x2F;tcpfirewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;30001-30004&#x2F;udpfirewall-cmd --reload# 客户端配置 192.168.1.100# 安装nfs-utilsyum -y install nfs-utils# 关闭防火墙或者配置防火墙规则service iptables stop# 创建挂载点mkdir &#x2F;mnt&#x2F;data1# 挂载目录mount -t nfs 122.51.87.176:&#x2F;tmp&#x2F;data &#x2F;mnt&#x2F;data1 -o proto&#x3D;tcp -o nolockmount -t nfs 192.168.1.200:&#x2F;tmp&#x2F;data &#x2F;mnt&#x2F;data1 -o proto&#x3D;tcp -o nolock# 查看服务器共享目录信息showmount -e 192.168.1.200showmount -e 122.51.87.176# 查看挂载情况df -h# 卸载目录umount &#x2F;mnt&#x2F;data1</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> dist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canal</title>
      <link href="2020/10/27/java/middleware/canal/"/>
      <url>2020/10/27/java/middleware/canal/</url>
      
        <content type="html"><![CDATA[<p>**canal [kə’næl]**，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费</p><a id="more"></a><h2 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h2><p><a href="https://github.com/alibaba/canal/wiki/QuickStart">https://github.com/alibaba/canal/wiki/QuickStart</a></p><p>对于自建 MySQL , 需要先开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式，my.cnf 中配置如下</p><pre class="language-none"><code class="language-none">[mysqld]# open bin-loglog-bin&#x3D;mysql-bin # 开启 binlogbinlog-format&#x3D;ROW # 选择 ROW 模式server_id&#x3D;1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</code></pre><p>授权账户</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER canal IDENTIFIED BY &#39;canal&#39;;  GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;canal&#39;@&#39;%&#39;;-- GRANT ALL PRIVILEGES ON *.* TO &#39;canal&#39;@&#39;%&#39; ;FLUSH PRIVILEGES;</code></pre><p>启动服务</p><pre class="language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.4&#x2F;canal.deployer-1.1.4.tar.gzmkdir canaltar -zxvf canal.deployer-1.1.4.tar.gz -C &#x2F;root&#x2F;serve&#x2F;canalcd canalvim conf&#x2F;example&#x2F;instance.properties## mysql serverIdcanal.instance.mysql.slaveId &#x3D; 1234#position info，需要改成自己的数据库信息canal.instance.master.address &#x3D; 127.0.0.1:3306 canal.instance.master.journal.name &#x3D; canal.instance.master.position &#x3D; canal.instance.master.timestamp &#x3D; #canal.instance.standby.address &#x3D; #canal.instance.standby.journal.name &#x3D;#canal.instance.standby.position &#x3D; #canal.instance.standby.timestamp &#x3D; #username&#x2F;password，需要改成自己的数据库信息canal.instance.dbUsername &#x3D; canal  canal.instance.dbPassword &#x3D; canalcanal.instance.defaultDatabaseName &#x3D;canal.instance.connectionCharset &#x3D; UTF-8#table regexcanal.instance.filter.regex &#x3D; .\*\\\\..\*# 启动sh bin&#x2F;startup.sh# 防火墙允许接口访问firewall-cmd --permanent --zone&#x3D;public --add-port 11111&#x2F;tcpfirewall-cmd --reload</code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/alibaba/canal">github:canal</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos</title>
      <link href="2020/10/27/java/middleware/nacos/"/>
      <url>2020/10/27/java/middleware/nacos/</url>
      
        <content type="html"><![CDATA[<p>新公司使用 <code>nacos</code> 用于发现管理，配置微服务，所以这里做个文档备注下。</p><p>以下部分文字从网上扒下来的，最底下会列出相关链接，感兴趣的可以喵喵。</p><p>简单来说就是 <code>Nacos =  Eureka/Consule + Config </code></p><a id="more"></a><h3 id="启动nacos服务中心"><a href="#启动nacos服务中心" class="headerlink" title="启动nacos服务中心"></a>启动nacos服务中心</h3><p><strong>Nacos Server 有两种运行模式：</strong></p><ul><li>standalone</li><li>cluster</li></ul><p>不论哪种方式吧，都需要先去 <a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a> 下载最新的 release 包</p><pre class="language-shell" data-language="shell"><code class="language-shell">wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;nacos&#x2F;releases&#x2F;download&#x2F;1.1.0&#x2F;nacos-server-1.1.0.tar.gztar -zxvf nacos-server-1.1.0.tar.gz cd nacos&#x2F;binsh startup.sh -m standalone &amp;# 如果你替换了默认sh脚本，可能会报错，因为这个脚本有bash的特有符号&#39;[[&#39;bash -f .&#x2F;startup.sh -m standalone &amp;curl 127.0.0.1:8848&#x2F;nacos# 默认账号密码 nacos&#x2F;nacos</code></pre><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><h4 id="服务提供者-nacos-provider"><a href="#服务提供者-nacos-provider" class="headerlink" title="服务提供者  nacos-provider"></a>服务提供者  nacos-provider</h4><p><code>bootstrap.yml</code></p><p>设置 <code>nacos</code> 发现服务器地址</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">18080</span></code></pre><p>主要依赖，下面消费者类似，就不多做陈述。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><code>NacosProviderApplication</code></p><p>主要添加 <code>@EnableDiscoveryClient</code> 注解开启 <code>Spring Cloud</code>的服务注册与发现，由于这里引入了<code>spring-cloud-starter-alibaba-nacos-discovery</code>模块，所以<code>Spring Cloud Common</code>中定义的那些与服务治理相关的接口将使用<code>Nacos</code>的实现。这点不论我们使用<code>Eureka</code>、<code>Consul</code>还是其他<code>Spring Cloud</code>整合的注册中心都一样，这也是<code>Spring Cloud</code>做了封装的好处所在。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosProviderApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NacosProviderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>EchoController</code></p><p>简单Http接口，后面服务消费者可以调用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/echo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EchoController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/&#123;string&#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Hello Nacos Discovery "</span> <span class="token operator">+</span> string<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="服务消费者-nacos-consumer"><a href="#服务消费者-nacos-consumer" class="headerlink" title="服务消费者 nacos-consumer"></a>服务消费者 nacos-consumer</h4><p><code>bootstrap.yml</code></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">18081</span></code></pre><p><code>NacosConsumerApplication</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConsumerApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NacosConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h5><h6 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h6><p>这里注入 <code>RestTemplate</code> 作为服务的消费方式，调用服务提供者的接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/echo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EchoController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">LoadBalancerClient</span> loadBalancerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">EchoController</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/&#123;str&#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://nacos-provider/echo/"</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>        <span class="token comment">// 或者如果有负载可以通过spring cloud common中的负载均衡接口选取服务提供节点实现接口调用</span>        <span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"nacos-provider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/echo/"</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到，在定义<code>RestTemplate</code>的时候，增加了<code>@LoadBalanced</code>注解，在真正调用的时候，<code>Spring Cloud</code>会将请求拦截下来，然后通过负载均衡器选出节点，并替换服务名部分为具体的ip和端口，从而实现基于服务名的负载均衡调用。</p><h6 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h6><p>当然如果你使用 <code>reactive</code> 的话，可以使用 <code>WebClient</code>，跟 <code>RestTemplate</code> 差不多</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TestApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token annotation punctuation">@RestController</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> webClientBuilder<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/echo"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> webClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://nacos-provider/echo/helloworld"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> <span class="token function">loadBalancedWebClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="Feigon"><a href="#Feigon" class="headerlink" title="Feigon"></a>Feigon</h6><p>上面介绍的 <code>RestTemplate</code> 和 <code>WebClient</code>都是<code> Spring</code> 自己封装的工具，下面介绍一个 <code>Netflix OSS</code> 中的成员，通过它可以更方便的定义和使用服务消费客户端。</p><p>增加依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>代码示例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TestApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Slf4j</span>    <span class="token annotation punctuation">@RestController</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token class-name">Client</span> client<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"didi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"Return : "</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"nacos-provider"</span><span class="token punctuation">)</span>    <span class="token keyword">interface</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>        <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里主要先通过<code>@EnableFeignClients</code>注解开启扫描<code>Spring Cloud Feign</code>客户端的功能；然后又创建一个<code>Feign</code>的客户端接口定义。使用<code>@FeignClient</code>注解来指定这个接口所要调用的服务名称，接口中定义的各个函数使用<code>Spring MVC</code>的注解就可以来绑定服务提供方的<code>REST</code>接口，比如下面就是绑定<code>nacos-provider</code>服务的<code>/hello</code>接口的例子。最后，在<code>Controller</code>中，注入了<code>Client</code>接口的实现，并调用<code>hello</code>方法来触发对服务提供方的调用。</p><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p><code>Nacos</code>除了实现了服务的注册发现之外，还将配置中心功能整合在了一起。通过<code>Nacos</code>的配置管理功能，我们可以将整个架构体系内的所有配置都集中在<code>Nacos</code>中存储。</p><h4 id="nacos-config-properties"><a href="#nacos-config-properties" class="headerlink" title="nacos-config.properties"></a>nacos-config.properties</h4><p>到 <code>http://127.0.0.1:8848/nacos</code> 创建一个配置，</p><p>Group: <code>DEFAULT_GROUP</code></p><p>Data ID: <code>nacos-config.properties</code></p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">useLocalCache</span><span class="token punctuation">:</span><span class="token attr-value">true</span></code></pre><h4 id="构建应用"><a href="#构建应用" class="headerlink" title="构建应用"></a>构建应用</h4><p><code>bootstrap.yml</code></p><p>设置 <code>nacos</code> 发现服务器地址，注意这里的 <code>spring.application.name</code> 跟 <code>nacos config dataid</code>  前缀对应</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment">#        namespace: 871e0996-7eb8-474b-a446-2a79228e31d3</span><span class="token comment">#        prefix: nacos-config-diy</span><span class="token comment">#        file-extension: yaml</span><span class="token comment">#        group: DEV_GROUP</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">18090</span></code></pre><p>依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><code>ConfigController</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/config"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;useLocalCache:false&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useLocalCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> useLocalCache<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>启动项目，运行</p><pre class="language-shell" data-language="shell"><code class="language-shell">curl http:&#x2F;&#x2F;127.0.0.1:18090&#x2F;config&#x2F;gettrue</code></pre><p>可以发现返回 <code>true</code> </p><p>跟我们在<code>nacos</code>配置管理界面配置一样。</p><p>我们在<code>nacos</code>配置管理界面设置<code>useLocalCache:false</code></p><p>再请求一次，可以发现值已经变成 <code>false</code> 了，</p><p>可以动态刷新。</p><h4 id="加载规则"><a href="#加载规则" class="headerlink" title="加载规则"></a>加载规则</h4><p>Group: <code>DEFAULT_GROUP</code></p><p>Data ID: <code>nacos-config.properties</code></p><p>拆解一下，主要有三个元素，它们与具体应用的配置内容对应关系如下：</p><ul><li>Data ID中的<code>nacos-config</code>：对应客户端的配置<code>spring.cloud.nacos.config.prefix</code>，默认值为<code>$&#123;spring.application.name&#125;</code>，即：服务名</li><li>Data ID中的<code>properties</code>：对应客户端的配置<code>spring.cloud.nacos.config.file-extension</code>，默认值为<code>properties</code></li><li>Group的值<code>DEFAULT_GROUP</code>：对应客户端的配置<code>spring.cloud.nacos.config.group</code>，默认值为<code>DEFAULT_GROUP</code></li></ul><p>这些都可以进行配置，比如我要加载</p><p> Data ID: <code>nacos-config-diy.yaml</code></p><p>Group: <code>DEV_GROUP</code></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>diy        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml        <span class="token key atrule">group</span><span class="token punctuation">:</span> DEV_GROUP<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">18090</span></code></pre><h4 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h4><p>一般一套代码可能在不同环境上跑，比如开发环境，测试环境，生产环境等，不同环境可能配置文件都不一样。通过 <code>nacos</code> 我们可以很方便地对多环境进行配置，一般来说，有如下三种途径。</p><h5 id="spring-profile-active"><a href="#spring-profile-active" class="headerlink" title="spring.profile.active"></a>spring.profile.active</h5><p>最原始的配置规则为：<code>$&#123;spring.cloud.nacos.config.prefix&#125;</code>-<code>$&#123;spring.profile.active&#125;</code>.<code>$&#123;spring.cloud.nacos.config.file-extension&#125;</code></p><p>所以可以通过配置 <code>spring.profile.active</code> 来区分不同环境的配置文件</p><h5 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h5><p>因为有 <code>Group</code> 概念，所以也可以根据 <code>Group</code> 区分</p><h5 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h5><p>命名空间也可以很方便的区分不同环境，</p><p>官方建议的方式，通过<code>Namespace</code>来区分不同的环境，释放了<code>Group</code>的自由度，这样可以让<code>Group</code>的使用专注于做业务层面的分组管理。同时，<code>nacos</code>控制页面上对于<code>Namespace</code>也做了分组展示，不需要搜索，就可以隔离开不同的环境配置，非常易用。</p><p>在应用的配置文件中增加<code>Namespace</code>配置即可，注意这边配置的是<code>Namespace ID</code>，比如</p><pre class="language-yacas" data-language="yacas"><code class="language-yacas">spring:  application:    name: nacos-config  cloud:    nacos:      config:        server-addr: 127.0.0.1:8848namespace: 871e0996-7eb8-474b-a446-2a79228e31d3server:  port: 18090</code></pre><h4 id="加载多个配置"><a href="#加载多个配置" class="headerlink" title="加载多个配置"></a>加载多个配置</h4><p>在<code>Spring Cloud</code>应用中通过使用<code>spring.cloud.nacos.config.ext-config</code>参数来配置要加载的这两个配置内容</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].data-id</span><span class="token punctuation">=</span><span class="token attr-value">actuator.properties</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].group</span><span class="token punctuation">=</span><span class="token attr-value">DEFAULT_GROUP</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].data-id</span><span class="token punctuation">=</span><span class="token attr-value">log.properties</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].group</span><span class="token punctuation">=</span><span class="token attr-value">DEFAULT_GROUP</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[1].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h4 id="共享配置"><a href="#共享配置" class="headerlink" title="共享配置"></a>共享配置</h4><p>通过上面加载多个配置的实现，实际上我们已经可以实现不同应用共享配置了。但是<code>nacos</code>中还提供了另外一个便捷的配置方式，比如下面的设置与上面使用的配置内容是等价的：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.shared-dataids</span><span class="token punctuation">=</span><span class="token attr-value">actuator.properties,log.properties</span><span class="token attr-name">spring.cloud.nacos.config.refreshable-dataids</span><span class="token punctuation">=</span><span class="token attr-value">actuator.properties,log.properties</span></code></pre><ul><li><code>spring.cloud.nacos.config.shared-dataids</code>参数用来配置多个共享配置的<code>Data Id</code>，多个的时候用用逗号分隔</li><li><code>spring.cloud.nacos.config.refreshable-dataids</code>参数用来定义哪些共享配置的<code>Data Id</code>在配置变化时，应用中可以动态刷新，多个<code>Data Id</code>之间用逗号隔开。如果没有明确配置，默认情况下所有共享配置都不支持动态刷新</li></ul><h4 id="配置加载的优先级"><a href="#配置加载的优先级" class="headerlink" title="配置加载的优先级"></a>配置加载的优先级</h4><p>当我们加载多个配置的时候，如果存在相同的key时，我们需要深入了解配置加载的优先级关系。</p><p>在使用<code>nacos</code>配置的时候，主要有以下三类配置：</p><ul><li>A: 通过<code>spring.cloud.nacos.config.shared-dataids</code>定义的共享配置</li><li>B: 通过<code>spring.cloud.nacos.config.ext-config[n]</code>定义的加载配置</li><li>C: 通过内部规则（<code>spring.cloud.nacos.config.prefix</code>、<code>spring.cloud.nacos.config.file-extension</code>、<code>spring.cloud.nacos.config.group</code>这几个参数）拼接出来的配置</li></ul><p>要弄清楚这几个配置加载的顺序，我们从日志中也可以很清晰的看到，我们可以做一个简单的实验：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].data-id</span><span class="token punctuation">=</span><span class="token attr-value">actuator.properties</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].group</span><span class="token punctuation">=</span><span class="token attr-value">DEFAULT_GROUP</span><span class="token attr-name">spring.cloud.nacos.config.ext-config[0].refresh</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.cloud.nacos.config.shared-dataids</span><span class="token punctuation">=</span><span class="token attr-value">log.properties</span><span class="token attr-name">spring.cloud.nacos.config.refreshable-dataids</span><span class="token punctuation">=</span><span class="token attr-value">log.properties</span></code></pre><p>根据上面的配置，应用分别会去加载三类不同的配置文件，</p><p>启动应用，我们发现后面加载的配置会覆盖之前加载的配置，所以优先级关系是：<code>A &lt; B &lt; C</code></p><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><h4 id="数据改为mysql"><a href="#数据改为mysql" class="headerlink" title="数据改为mysql"></a>数据改为mysql</h4><p><code>nacos</code> 默认单机运行模式，是用内嵌数据库<code>derby</code>，如想搞集群方式，那么就要将数据库改成<code>mysql</code>存储了，</p><p>配置<code>nacos</code>的<code>mysql</code>存储只需要下面三步：</p><p><strong>第一步</strong>：安装数据库，版本要求：5.6.5+</p><p><strong>第二步</strong>：初始化<code>mysql</code>数据库，数据库初始化文件：<code>nacos-mysql.sql</code>，该文件可以在<code>nacos</code>程序包下的<code>conf</code>目录下获得。</p><p><strong>第三步</strong>：修改<code>conf/application.properties</code>文件，增加支持<code>mysql</code>数据源配置，添加（目前只支持<code>mysql</code>）数据源的地址、用户名和密码。配置样例如下：</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.password</span><span class="token punctuation">=</span></code></pre><p>关于<code>nacos</code>数据的持久化实现，与其他的中间件相比，在实现上并没有采用分布式算法来解决一致性问题，而是采用了比较常规的集中化存储来实现。由于采用单一数据源的方式，直接解决了分布式一致性问题，所以从学习成本的角度上来说，<code>nacos</code>的实现原理会更容易被理解和接受。但是，从部署的负责度和硬件投入成本上来说，与<code>etcd</code>、<code>consul</code>、<code>zookeeper</code>这些通过算法方式解决一致性问题的中间件相比，就显得不足了。</p><p>同时，在引入<code>mysql</code>的存储时，由于多了一个中间件的存在，整个<code>nacos</code>系统的整体可用性一定是会所有下降的。所以为了弥补可用性的下降，在生产上<code>mysql</code>的高可用部署也是必须的，成本再次提高。不论如何提高，可用性都难以达到100%，所以这种方式，不论如何提升存储的可用性，理论上都会对<code>nacos</code>集群的自身可用性造成微小的下降。</p><p>以上思考主要从理论上，粗略讨论的，并没有经过详细的成本评估与可用性计算。所以，对于实际应用场景下，可能这些成本的增加和可用性的降低并没有那么多大的影响。同时，<code>Spring Cloud Alibaba</code>下使用的各开源组件都有对应的商业产品，在没有足够运维人力的团队下，使用对应的商业产品可能从各方面都会更加划算。</p><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>在<code>nacos</code>的<code>conf</code>目录下有一个<code>cluster.conf.example</code>，可以直接把<code>example</code>扩展名去掉来使用，也可以单独创建一个<code>cluster.conf</code>文件，然后打开将后续要部署的<code>nacos</code>实例地址配置在这里。</p><p>本文以在本地不同端点启动3个<code>nacos</code>服务端为例，可以如下配置：</p><pre class="language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8841</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8842</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8843</span></code></pre><p>注意：这里的例子仅用于本地学习测试使用，实际生产环境必须部署在不同的节点上，才能起到高可用的效果。另外，<code>nacos</code>的集群需要3个或3个以上的节点，并且确保这三个节点之间是可以互相访问的。</p><p>然后用 <code>nginx</code> 或是其他服务器做一个负载均衡的代理入口</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">upstream</span> nacoserver <span class="token punctuation">&#123;</span>    <span class="token keyword">server</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8841</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8842</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8843</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span> <span class="token number">8840</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> localhost<span class="token punctuation">;</span>        <span class="token comment"># access_log</span>        <span class="token comment"># 定义nacos代理</span>    <span class="token keyword">location</span> <span class="token operator">/</span>nacos<span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 对应上面配置upstream配置，实现负载均衡</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>nacoserver<span class="token operator">/</span>nacos<span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Sdk"><a href="#Sdk" class="headerlink" title="Sdk"></a>Sdk</h3><p>如果需要自动化部署，或是配置改变的时候有监听事件啥的，如果是<code>java</code> 开发，引入依赖即可</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里官方有详细的代码示例，这里不多做介绍。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://nacos.io/zh-cn/">nacos官网</a></p><p><a href="https://windmt.com/2018/11/09/intro-to-spring-cloud-alibaba-nacos/">Alibaba之Nacos</a></p><p><a href="http://blog.didispace.com/spring-cloud-learning/">Springcloud 入门到精通/nacos系列博客</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8</title>
      <link href="2020/10/27/java/javase/java8/"/>
      <url>2020/10/27/java/javase/java8/</url>
      
        <content type="html"><![CDATA[<p><strong>Java8</strong> 从2014年发行到现在已经有五个年头了，之前公司的项目都还是基于Java7，所以对 <strong>Java8</strong> 不甚了解。于是乎，花一两个礼拜学习下，做个记录，以下部分文字复制于其他文章，最底下会列出相关链接，感兴趣的可以去了解下。</p><a id="more"></a><h2 id="JAVA8-的发展"><a href="#JAVA8-的发展" class="headerlink" title="JAVA8 的发展"></a>JAVA8 的发展</h2><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK 5"></a>JDK 5</h3><h4 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h4><p>JDK1.5为每一个基本数据类型定义了一个封装类。使java中的基本数据类型也有自己的对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token operator">--</span><span class="token operator">></span><span class="token class-name">Integer</span><span class="token keyword">double</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Double</span><span class="token keyword">long</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Long</span><span class="token keyword">char</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Character</span><span class="token keyword">float</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Float</span><span class="token keyword">boolean</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Boolean</span><span class="token keyword">short</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">Short</span><span class="token keyword">byte</span> <span class="token operator">--</span> <span class="token operator">></span> <span class="token class-name">Byte</span></code></pre><ul><li>自动装箱：将基本类型转换成为对象，例如：<code>int --&gt; Integer</code></li><li>自动拆箱：将对象转换成为基本数据类型，例如：<code>Integer --&gt; int</code></li></ul><p>对于 JDK1.5 之前集合总不能存放基本数据类型的问题，现在也能够解决。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举是 JDK1.5 推出的一个比较重要的特性。其关键字为 <code>enum</code> 例如：定义代表交通灯的枚举</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MyEnum</span><span class="token punctuation">&#123;</span>    RED<span class="token punctuation">,</span>GREEN<span class="token punctuation">,</span>YELLOW<span class="token punctuation">&#125;</span></code></pre><h4 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h4><ul><li>优点：使用静态导入可以使被导入类的所有静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名。</li><li>缺点：过度使用会降低代码的可读性</li></ul><h4 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h4><p>在JDK1.5以前，当我们要为一个方法传递多个类型相同的参数时， 我们有两种方法解决</p><ol><li>直接传递一个数组过去</li><li>有多少个参数就传递多少个参数。</li></ol><p>例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> red<span class="token punctuation">,</span><span class="token class-name">String</span> green<span class="token punctuation">,</span><span class="token class-name">String</span> yellow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><p>或者</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printColor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>这样编写方法参数虽然能够实现我们想要的效果，但是，这样是不是有点麻烦呢？ 再者，如果参数个数不确定，我们怎么办呢？Java JDK1.5为我们提供的可变参数就能够完美的解决这个问题.</p><p>例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printColor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> colors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>如果参数的类型相同，那么可以使用 <code>类型+三个点</code> ，后面跟一个参数名称的形式。 这样的好处就是，只要参数类型相同，无论传递几个参数都没有限制 注意：可变参数必须是参数列表的最后一项（该特性对对象和基本数据类型都适用）</p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//给集合指定存入类型，上面这个集合在存入数据的时候必须存入String类型的数据，否则编译器会报错</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>泛型</strong> 意味着编写的代码可以被不同类型的对象所重用。 可见泛型的提出是为了编写重用性更好的代码。 泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>比如常见的集合类 <code>LinkedList</code>，其实现的接口名后有个特殊的部分 <code>&lt;&gt;</code>，而且它的成员的类型 Link 也包含一个 <code>&lt;&gt;</code>，这个符号的就是类型参数， 它使得在运行中，创建一个 LinkedList 时可以传入不同的类型，比如 <code>new LinkedList</code>，这样它的成员存放的类型也是 <code>String</code>。</p><h4 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h4><p>例如上面这个集合我们可以通过for-each遍历，这样更加简单清晰</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><blockquote><p>注意：使用for-each遍历集合时，要遍历的集合必须实现了Iterator接口</p></blockquote><h4 id="线程并发库-JUC"><a href="#线程并发库-JUC" class="headerlink" title="线程并发库 JUC"></a>线程并发库 JUC</h4><p>线程并发库是 Java1.5 提出的关于多线程处理的高级功能，所在包：<code>java.util.concurrent</code> 包括</p><ol><li>线程互斥工具类：Lock，ReadWriteLock</li><li>线程通信：Condition</li><li>线程池：ExecutorService</li><li>同步队列：ArrayBlockingQueue</li><li>同步集合：ConcurrentHashMap，CopyOnWriteArrayList</li><li>线程同步工具：Semaphore</li></ol><h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h3><h4 id="Desktop类和SystemTray类"><a href="#Desktop类和SystemTray类" class="headerlink" title="Desktop类和SystemTray类"></a>Desktop类和SystemTray类</h4><p>前者可以用来打开系统默认浏览器浏览指定的URL，打开系统默认邮件客户端给指定的邮箱发邮件， 用默认应用程序打开或编辑文件(比如，用记事本打开以 txt 为后缀名的文件)，<br>用系统默认的打印机打印文档；后者可以用来在系统托盘区创建一个托盘程序。</p><h4 id="使用Compiler-API"><a href="#使用Compiler-API" class="headerlink" title="使用Compiler API"></a>使用Compiler API</h4><p>现在我们可以用JDK1.6 的Compiler API(JSR 199)去动态编译Java源文件， Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。</p><p>这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后， 是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。 当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码， 这种方式需要我们产生另一个进程去做编译工作，不够优雅而且容易使代码依赖与特定的操作系统； Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译，而且是跨平台的。</p><h4 id="轻量级Http-Server-API"><a href="#轻量级Http-Server-API" class="headerlink" title="轻量级Http Server API"></a>轻量级Http Server API</h4><p>JDK1.6 提供了一个简单的 Http Server API，据此我们可以构建自己的嵌入式 Http Server， 它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的 Http Server API来实现， 程序员必须自己实现 HttpHandler 接口，HttpServer 会调用 <code>HttpHandler</code> 实现类的回调方法来处理客户端请求， 在这里，我们把一个 Http 请求和它的响应称为一个交换，包装成 <code>HttpExchange</code> 类，<code>HttpServer</code> 负责将 <code>HttpExchange</code> 传给 <code>HttpHandler</code> 实现类的回调方法。</p><h4 id="用Console开发控制台程序"><a href="#用Console开发控制台程序" class="headerlink" title="用Console开发控制台程序"></a>用Console开发控制台程序</h4><p>JDK1.6 中提供了 <code>java.io.Console</code> 类专用来访问基于字符的控制台设备。 你的程序如果要与 Windows 下的 cmd 或者 Linux 下的 Terminal 交互，就可以用 <code>Console</code> 类代劳。 但我们不总是能得到可用的 Console，一个JVM是否有可用的 Console 依赖于底层平台和 JVM 如何被调用。 如果JVM是在交互式命令行(比如 Windows 的 cmd)中启动的，并且输入输出没有重定向到另外的地方，那么就可以得到一个可用的 Console 实例。</p><h4 id="对脚本语言的支持"><a href="#对脚本语言的支持" class="headerlink" title="对脚本语言的支持"></a>对脚本语言的支持</h4><p>如：ruby，groovy，javascript。</p><h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h3><h4 id="数字变量对下滑线的支持"><a href="#数字变量对下滑线的支持" class="headerlink" title="数字变量对下滑线的支持"></a>数字变量对下滑线的支持</h4><p>JDK1.7可以在数值类型的变量里添加下滑线，但是有几个地方是不能添加的</p><ol><li>数字的开头和结尾</li><li>小数点前后</li><li>F或者L前</li></ol><p>例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1234_5678_9</span><span class="token punctuation">;</span> <span class="token keyword">float</span> num2 <span class="token operator">=</span> <span class="token number">222_33F</span><span class="token punctuation">;</span> <span class="token keyword">long</span> num3 <span class="token operator">=</span> <span class="token number">123_000_111L</span><span class="token punctuation">;</span></code></pre><h4 id="switch对String的支持"><a href="#switch对String的支持" class="headerlink" title="switch对String的支持"></a>switch对String的支持</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> status <span class="token operator">=</span> <span class="token string">"orderState"</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">case</span> <span class="token string">"ordercancel"</span><span class="token operator">:</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">"orderSuccess"</span><span class="token operator">:</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"预订成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">default</span><span class="token operator">:</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"状态未知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </code></pre><h4 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h4><ul><li><code>try-with-resources</code> 是一个定义了一个或多个资源的 try 声明，这个资源是指程序处理完它之后需要关闭它的对象。</li><li><code>try-with-resources</code> 确保每一个资源在处理完成后都会被关闭。</li></ul><p>可以使用try-with-resources的资源有： 任何实现了 <code>java.lang.AutoCloseable</code> 接口 <code>java.io.Closeable</code> 接口的对象。</p><p>例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readFirstLineFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   </code></pre><p>在 java 7 以及以后的版本里，<code>BufferedReader</code> 实现了 <code>java.lang.AutoCloseable</code> 接口。 由于 <code>BufferedReader</code> 定义在 <code>try-with-resources</code> 声明里，无论 <code>try</code> 语句正常还是异常的结束， 它都会自动的关掉。而在 java7 以前，你需要使用 <code>finally</code> 块来关掉这个对象。</p><h4 id="捕获多种异常并用改进后的类型检查来重新抛出异常"><a href="#捕获多种异常并用改进后的类型检查来重新抛出异常" class="headerlink" title="捕获多种异常并用改进后的类型检查来重新抛出异常"></a>捕获多种异常并用改进后的类型检查来重新抛出异常</h4><pre class="language-none"><code class="language-none">public static void first()&#123;       try &#123;           BufferedReader reader &#x3D; new BufferedReader(new FileReader(&quot;&quot;));           Connection con &#x3D; null;           Statement stmt &#x3D; con.createStatement();       &#125; catch (IOException | SQLException e) &#123;           &#x2F;&#x2F;捕获多个异常，e就是final类型的           e.printStackTrace();       &#125;   &#125; </code></pre><p>优点：用一个 <code>catch</code> 处理多个异常，比用多个 <code>catch</code> 每个处理一个异常生成的字节码要更小更高效。</p><h4 id="创建泛型时类型推断"><a href="#创建泛型时类型推断" class="headerlink" title="创建泛型时类型推断"></a>创建泛型时类型推断</h4><p>只要编译器可以从上下文中推断出类型参数，你就可以用一对空着的尖括号 <code>&lt;&gt;</code> 来代替泛型参数。 这对括号私下被称为菱形(diamond)。 在Java SE 7之前，你声明泛型对象时要这样</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而在Java SE7以后，你可以这样</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为编译器可以从前面(List)推断出推断出类型参数，所以后面的 <code>ArrayList</code> 之后可以不用写泛型参数了，只用一对空着的尖括号就行。 当然，你必须带着菱形 <code>&lt;&gt;</code>，否则会有警告的。 Java SE7 只支持有限的类型推断：只有构造器的参数化类型在上下文中被显著的声明了，你才可以使用类型推断，否则不行。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>llist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个不行 </span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个可以 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK 8"></a>JDK 8</h3><h4 id="Lambda表达式和函数式接口"><a href="#Lambda表达式和函数式接口" class="headerlink" title="Lambda表达式和函数式接口"></a>Lambda表达式和函数式接口</h4><p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法， 或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。 Lambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成。</p><p>Lambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了），举个简单的函数式接口的定义</p><h4 id="接口的默认方法和静态方法"><a href="#接口的默认方法和静态方法" class="headerlink" title="接口的默认方法和静态方法"></a>接口的默认方法和静态方法</h4><p>Java 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。 默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写 由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。 尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果你想了解更多细节，可以参考官方文档。</p><h4 id="更好的类型推断"><a href="#更好的类型推断" class="headerlink" title="更好的类型推断"></a>更好的类型推断</h4><p>Java 8 编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。</p><p>参数 <code>Value.defaultValue()</code> 的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用 <code>Value.&lt;String&gt;defaultValue()</code>。</p><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><p>Java应用中最常见的bug就是空值异常。在Java 8之前，Google Guava引入了 <code>Optionals</code> 类来解决 <code>NullPointerException</code>， 从而避免源码被各种 <code>null</code> 检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。 <code>Optional</code> 仅仅是一个容易存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考Java 8官方文档了解更多细节。</p><p>如果Optional实例持有一个非空值，则 <code>isPresent()</code> 方法返回true，否则返回false；<code>orElseGet()</code> 方法，Optional实例持有null， 则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的 <code>Optional</code> 实例的值转换成新的值；orElse()方法与orElseGet()方法类似， 但是在持有null的时候返回传入的默认值。</p><h4 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h4><p>新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。 这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。</p><p>Task 类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN 或者 CLOSED。现在假设有一个task集合， 首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合； 但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">></span></span> tasks <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>CLOSED<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Calculate total points of all active tasks using sum()</span><span class="token keyword">final</span> <span class="token keyword">long</span> totalPointsOfOpenTasks <span class="token operator">=</span> tasks        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>task <span class="token operator">-></span> task<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Task</span><span class="token operator">::</span><span class="token function">getPoints</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total points: "</span> <span class="token operator">+</span> totalPointsOfOpenTasks<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里有很多知识点值得说。首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task； 第三，mapToInt操作基于每个task实例的Task::getPoints方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。</p><h4 id="新的日期时间-API"><a href="#新的日期时间-API" class="headerlink" title="新的日期时间 API"></a>新的日期时间 API</h4><p>Java 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。 java.util.Date 和后来的 java.util.Calendar 一直没有解决这个问题（甚至令开发者更加迷茫）。</p><p>因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。 Java 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。 新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。 新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。</p><p>第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。 LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子： 如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。</p><h4 id="Nashorn-JavaScript引擎"><a href="#Nashorn-JavaScript引擎" class="headerlink" title="Nashorn JavaScript引擎"></a>Nashorn JavaScript引擎</h4><p>Java 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。 Nashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用，例子代码如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">fun1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Hi there from Javascript, '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"greetings from javascript"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">fun2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"JS Class Definition: "</span> <span class="token operator">+</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ScriptEngine</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"java8-nashorn/src/main/resources/nashorn1.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Invocable</span> invocable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Invocable</span><span class="token punctuation">)</span> engine<span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun1"</span><span class="token punctuation">,</span> <span class="token string">"Peter Parker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4><p>对 Base64 编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码，例子代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"Lets Learn Java 8!"</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> encoded <span class="token operator">=</span> <span class="token class-name">Base64</span>        <span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> decoded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>        <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新的Base64API也支持URL和MINE的编码解码。</p><h2 id="Default-Methods-for-Interface"><a href="#Default-Methods-for-Interface" class="headerlink" title="Default Methods for Interface"></a>Default Methods for Interface</h2><p>Java 8 允许我们为接口添加非抽象的方法通过 <strong>default</strong>  关键字。当然静态方法的实现也是允许的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Formula</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 默认方法实现</span>    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 静态方法实现</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>所以我们实现接口的时候只需要实现抽象方法就可以了，默认方法可以直接使用。下面例子 The formula is implemented as an anonymous object.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Formula</span> formula <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Formula</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>formula<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 100.0</span>formula<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 4.0</span></code></pre><h2 id="Lambda-expression"><a href="#Lambda-expression" class="headerlink" title="Lambda expression"></a>Lambda expression</h2><p><strong>λ演算</strong>（英语：lambda calculus，λ-calculus）是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数</a>如何抽象化定义、函数如何被应用以及<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的<a href="https://zh.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E7%B3%BB%E7%B5%B1">形式系统</a>。它由数学家<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87">阿隆佐·邱奇</a>在20世纪30年代首次发表。lambda演算作为一种广泛用途的计算模型，可以清晰地定义什么是一个可计算函数，而任何可计算函数都能以这种形式表达和求值，它能模拟单一磁带<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA">图灵机</a>的计算过程；尽管如此，lambda演算强调的是变换规则的运用，而非实现它们的具体机器。</p><p>更多介绍请教wiki爸爸，虽然我看的一脸懵逼 <a href="https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97"><strong>wiki</strong></a></p><p>简单的说 lambda expression就是一个匿名的函数，通常作为其他函数的参数。</p><p>下面通过一个例子简单介绍下</p><p>之前版本的我们写</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"anna"</span><span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token string">"xenia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>取代之前创建匿名内部类的方法，通过 Java8 我们可以用更少的代码来实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果方法只有一行语句，那么花括号 <strong>{}</strong> 是可选的，并且假如这一行语句有返回值，那么 <strong>return</strong> 关键字也是可选的。所以我们的代码更精简了：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Lambda 的参数类型可以由上下文推算而出，所以，参数类型也是可选的，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面我们就看看 lambda的相关特性和实现</p><h3 id="Diff-with-Anonymous-Classes"><a href="#Diff-with-Anonymous-Classes" class="headerlink" title="Diff with Anonymous Classes"></a>Diff with Anonymous Classes</h3><p>在JVM层面，Lambda表达式和匿名内部类有着明显的差别。</p><p><strong>匿名内部类仍然是一个类，只是不需要程序员显示指定类名，编译器会自动为该类取名</strong>。因此如果有如下形式的代码，编译之后将会产生两个class文件：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAnonymousClass</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Anonymous Class Thread run()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>编译之后文件分布如下，两个class文件分别是主类和匿名内部类产生的：</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/2-AnonymousClass.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/2-AnonymousClass.png" alt="2-AnonymousClass.png" loading="lazy"></a></p><p>进一步分析主类MainAnonymousClass.class的字节码，可发现其创建了匿名内部类的对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// javap -c MainAnonymousClass.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAnonymousClass</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class java/lang/Thread</span>       <span class="token number">3</span><span class="token operator">:</span> dup       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">3</span>                  <span class="token comment">// class MainAnonymousClass$1 /*创建内部类对象*/</span>       <span class="token number">7</span><span class="token operator">:</span> dup       <span class="token number">8</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment">// Method MainAnonymousClass$1."&lt;init>":()V</span>      <span class="token number">11</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/Thread."&lt;init>":(Ljava/lang/Runnable;)V</span>      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/Thread.start:()V</span>      <span class="token number">17</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Lambda表达式通过invokedynamic指令实现，书写Lambda表达式不会产生新的类</strong>。如果有如下代码，编译之后只有一个class文件：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainLambda</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda Thread run()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>编译之后的结果：</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/2-Lambda.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/2-Lambda.png" alt="2-Lambda" loading="lazy"></a></p><p>通过javap反编译命名，我们更能看出Lambda表达式内部表示的不同：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// javap -c -p MainLambda.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainLambda</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class java/lang/Thread</span>       <span class="token number">3</span><span class="token operator">:</span> dup       <span class="token number">4</span><span class="token operator">:</span> invokedynamic #<span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">0</span>              <span class="token comment">// InvokeDynamic #0:run:()Ljava/lang/Runnable; /*使用invokedynamic指令调用*/</span>       <span class="token number">9</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment">// Method java/lang/Thread."&lt;init>":(Ljava/lang/Runnable;)V</span>      <span class="token number">12</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/Thread.start:()V</span>      <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*Lambda表达式被封装成主类的私有方法*/</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">6</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>       <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">7</span>                  <span class="token comment">// String Lambda Thread run()</span>       <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>       <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span></code></pre><p>反编译之后我们发现Lambda表达式被封装成了主类的一个私有方法，并通过<em>invokedynamic</em>指令进行调用。</p><p>既然Lambda表达式不是内部类的简写，那么Lambda内部的<code>this</code>引用也就跟内部类对象没什么关系了。在Lambda表达式中<code>this</code>的意义跟在表达式外部完全一样。因此下列代码将输出两遍<code>Hello Hoolee</code>，而不是两个引用地址。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span><span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Runnable</span> r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>r2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"Hello Hoolee"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="lambda-Scope"><a href="#lambda-Scope" class="headerlink" title="lambda Scope"></a>lambda Scope</h3><p>lambda Scope实际上跟匿名内部类差不多，只不过 <strong>local variables</strong> 可以不声明未final，但是实际上是一个隐final。因为java8 中 lambda 代码块相当于闭包，闭包中被引用的局部变量是不能进行更改的。这也是为什么函数式编程可以很容易做到线程安全，很适合并发编程的原因。</p><p>下面通过几个小例子说明一下 lambda 的作用域</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>stringConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// Variable used in lambda expression should be final or effectively final</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter <span class="token operator">=</span>        <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法编译</span>num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>在lambda表达式中更改局部变量 num 的值同样是不允许的。</p><p>如果是 <strong>static variables</strong> 或是 <strong>fields</strong> 就跟匿名内部类一样了，无论在lambda 表达式内部还是外部都是进行修改</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Lambda4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> outerStaticNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> outerNum<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter1 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            outerNum <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> stringConverter2 <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            outerStaticNum <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>还记得前面我们定义的函数接口 <strong>Formula</strong> 吗，接口公式定义了一个默认方法sqrt，可以从包括匿名对象在内的每个公式实例访问该方法。这不适用于lambda表达式。</p><p>不能从lambda表达式中访问 <strong>default interface method</strong>，以下代码无法编译</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Formula</span> formula <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">sqrt</span><span class="token punctuation">(</span> a <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h3><p><strong>lambda</strong> 表达式如何适应Java的类型系统呢？转换lambda表达式的类型总是函数接口类型。所以，一个函数接口必须<strong>有且只有一个抽象方法声明</strong>。该类型的每个lambda表达式都将匹配到这个抽象方法。</p><p>下面有个小例子，Runnable是一个函数接口，它只有一个方法run()。因此，当您将lambda表达式传递给Thread类的构造函数时，编译器会尝试将该表达式转换为等价的可运行代码，如第一个代码示例所示。如果编译器成功，则一切正常运行，如果编译器无法将表达式转换为等效的实现代码，则会产生错误。在上面的例子中，lambda表达式被转换为Runnable类型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"howtodoinjava"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>   <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My Runnable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>         <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了确保接口满足需求，您应该添加 <strong>@FunctionalInterface</strong> 注解，编译器知道这个注释，并在您试图向接口添加第二个抽象方法声明时抛出编译器错误。当然，注解省略也是可以的。</p><p>因为默认方法有一个实现，所以它们不是抽象的。因为默认方法不是抽象的，所以您可以随意将默认方法添加到您的函数接口中。当然静态方法也同理。</p><p>如果接口声明一个抽象方法覆盖 <strong>java.lang.Object</strong> 的一个公共方法，这也不计入接口的抽象方法计数，因为该接口的任何实现都有一个来自 java.lang.Object 的实现。Comparator是一个函数接口，尽管它声明了两个抽象方法。为什么?因为其中一个抽象方法equals()它的签名等于Object类中的public方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">F</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">haha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译错误</span>    <span class="token comment">// 默认方法</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 静态方法也是允许的，可以少写工具类</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fourWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"today is a nice day"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//Overridden from Object class</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Overridden from Object class</span><span class="token punctuation">&#125;</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> converter <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> converted <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 123</span></code></pre><p>功能接口只显示一个功能。例如，使用具有单个方法 compareTo 的可比较接口进行比较。</p><h3 id="Method-References"><a href="#Method-References" class="headerlink" title="Method References"></a>Method References</h3><p>简单的说就是对于 lambda 表达式中只有一个参数，并且箭头右边的逻辑是对入参执行一个函数：</p><p>即 <code>x =&gt; f(x)</code><br>则可以简写为<code>f</code></p><p>Java8 用 <strong>class::methodName</strong> 来表示 <strong>eta-conversion</strong></p><p>Method references help to point to methods by their names. A method reference is described using <code>::</code> symbol. A method reference can be used to point the following types of methods −</p><ul><li>Static methods</li><li>Instance methods</li><li>Constructors using new operator (TreeSet::new)</li></ul><p>下面看一些简单例子</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// static method -> Math::max = Math.max(x,y)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">433</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">max</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>max<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>value <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// instance method from instance -> System.out::println = System.out.println(x)</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numberList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>numberList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// instance method from class type -> String::compareTo = s1.compareTo(s2)</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span>                <span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"how"</span><span class="token punctuation">,</span> <span class="token string">"to"</span><span class="token punctuation">,</span> <span class="token string">"do"</span><span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"dot"</span><span class="token punctuation">,</span> <span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sorted <span class="token operator">=</span> strings                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sortedAlt <span class="token operator">=</span> strings                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sortedAlt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// constructor -> ArrayList::new = new ArrayList</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers1 <span class="token operator">=</span> <span class="token class-name">IntStream</span>                <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span> <span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max1 <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">;</span>max<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Built-in-Functional-Interfaces"><a href="#Built-in-Functional-Interfaces" class="headerlink" title="Built-in Functional Interfaces"></a>Built-in Functional Interfaces</h3><p>Java 8 内置了许多函数接口，可在lambda表达式中广泛使用。</p><p>有一些是兼容旧版本的比如 <code>Comparator</code> 或者 <code>Runnable</code>，</p><p>还有一些是吸取了 <a href="https://code.google.com/p/guava-libraries/">Google Guava</a> library ，比如在  <strong>java.util.Function package</strong> 就定义了很多实用的函数接口。</p><p>不过一般我们不需要去死记它们，因为类型推导帮我们做了一切。</p><p>比如举个简单的例子，collection 的forEach方法，该方法的签名为<code>void forEach(Consumer&lt;? super E&gt; action)</code>，作用是对容器中的每个元素执行<code>action</code>指定的动作，其中<code>Consumer</code>是个函数接口，里面只有一个待实现方法<code>void accept(T t)</code>（后面我们会看到，这个方法叫什么根本不重要，你甚至不需要记忆它的名字）。</p><p>需求：<em>假设有一个字符串列表，需要打印出其中所有长度大于3的字符串.</em></p><p>Java7及以前我们可以用增强的for循环实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用增强for循环迭代</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>现在使用<code>forEach()</code>方法结合匿名内部类，可以这样实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用forEach()结合匿名内部类迭代</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码调用<code>forEach()</code>方法，并使用匿名内部类实现<code>Comsumer</code>接口。到目前为止我们没看到这种设计有什么好处，但是不要忘记Lambda表达式，使用Lambda表达式实现如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用forEach()结合Lambda表达式迭代</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码给<code>forEach()</code>方法传入一个Lambda表达式，我们不需要知道<code>accept()</code>方法，也不需要知道<code>Consumer</code>接口，类型推导帮我们做了一切。</p><p>这里，简单列几个常用的函数接口，</p><h4 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate<T></h4><p><code>Represents a predicate (Boolean-valued function) of one argument.The interface contains various default methods for composing predicates to complex logical terms (and, or, negate)</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Predicate&lt;Integer> predicate = n -> true</span>      <span class="token comment">// n is passed as parameter to test method of Predicate interface</span>      <span class="token comment">// test method will always return true no matter what value n has.</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Print all numbers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//pass n as parameter</span>      <span class="token function">eval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token operator">-></span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Predicate&lt;Integer> predicate1 = n -> n%2 == 0</span>      <span class="token comment">// n is passed as parameter to test method of Predicate interface</span>      <span class="token comment">// test method will return true if n%2 comes to be zero</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Print even numbers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">eval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token operator">-></span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Predicate&lt;Integer> predicate2 = n -> n > 3</span>      <span class="token comment">// n is passed as parameter to test method of Predicate interface</span>      <span class="token comment">// test method will return true if n is greater than 3.</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Print numbers greater than 3:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">eval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> n<span class="token operator">-></span> n <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> n<span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt;T,R&gt;"></a>Function&lt;T,R&gt;</h4><p><code>Represents a function that accepts one argument and produces a result.Default methods can be used to chain multiple functions together (compose, andThen).</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> toInteger <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> backToString <span class="token operator">=</span> toInteger<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>backToString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "123"</span></code></pre><h4 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier<T></h4><p><code>Suppliers produce a result of a given generic type. Unlike Functions, Suppliers don&#39;t accept arguments.</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personSupplier <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>personSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// new Person</span></code></pre><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer<T></h4><p><code>Consumers represents operations to be performed on a single input argument.</code></p><pre class="language-java" data-language="java"><code class="language-java">consumer<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> greeter <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>greeter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Luke"</span><span class="token punctuation">,</span> <span class="token string">"Skywalker"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h4><p><code>Comparators are well known from older versions of Java. Java 8 adds various default methods to the interface.</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-></span> p1<span class="token punctuation">.</span>firstName<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Wonderland"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// > 0</span>comparator<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &lt; 0</span></code></pre><h2 id="Streams-1"><a href="#Streams-1" class="headerlink" title="Streams"></a>Streams</h2><p>A <strong>Collection is an in-memory data structure</strong>, </p><p>A <strong>Stream is a conceptually fixed data structure, in which elements are computed on demand</strong>.</p><p>This is a form of a <strong>producer-consumer</strong> relationship.</p><p>In java, java.util.Stream represents a stream on which one or more operations can be performed. Stream <strong>operations are either intermediate or terminal</strong>. While <strong>terminal operations return a result of a certain type</strong>, <strong>intermediate operations return the stream itself</strong> so you can chain multiple method calls in a row. Streams are created on a source, e.g. a java.util.Collection like lists or sets (maps are not supported). Stream operations can either be executed sequential or parallel.</p><p>简单来说，流就相当于我们在线看电影一样，不需要下载整部电影，只关注我们感兴趣的地方。流只是数据源的一个视图，我们可以对这个视图进行过滤，映射，排序，统计等一系列操作，而不会影响到数据源，并且在流上的操作是按需执行的，执行后即失效，所以很适合于函数编程。</p><h3 id="Streams-processing-order"><a href="#Streams-processing-order" class="headerlink" title="Streams  processing order"></a>Streams  processing order</h3><p>衔接操作的一个重要特性就是延迟性。观察下面没有终止操作的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行这段代码时，不向控制台打印任何东西。这是因为衔接操作只在终止操作调用时被执行。</p><p>让我们通过添加终止操作<code>forEach</code>来扩展这个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forEach: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行这段代码会得到如下输出：</p><pre class="language-java" data-language="java"><code class="language-java">filter<span class="token operator">:</span>  d2forEach<span class="token operator">:</span> d2filter<span class="token operator">:</span>  a2forEach<span class="token operator">:</span> a2filter<span class="token operator">:</span>  b1forEach<span class="token operator">:</span> b1filter<span class="token operator">:</span>  b3forEach<span class="token operator">:</span> b3filter<span class="token operator">:</span>  cforEach<span class="token operator">:</span> c</code></pre><p>结果的顺序可能出人意料。原始的方法会在数据流的所有元素上，一个接一个地水平执行所有操作。但是每个元素在调用链上垂直移动。第一个字符串<code>&quot;d2&quot;</code>首先经过<code>filter</code>然后是<code>forEach</code>，执行完后才开始处理第二个字符串<code>&quot;a2&quot;</code>。</p><p>这种行为可以减少每个元素上所执行的实际操作数量，就像我们在下个例子中看到的那样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"anyMatch: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// map:      d2</span><span class="token comment">// anyMatch: D2</span><span class="token comment">// map:      a2</span><span class="token comment">// anyMatch: A2</span></code></pre><p>只要提供的数据元素满足了谓词，<code>anyMatch</code>操作就会返回<code>true</code>。对于第二个传递<code>&quot;A2&quot;</code>的元素，它的结果为真。由于数据流的链式调用是垂直执行的，<code>map</code>这里只需要执行两次。所以<code>map</code>会执行尽可能少的次数，而不是把所有元素都映射一遍。</p><h4 id="为什么顺序如此重要"><a href="#为什么顺序如此重要" class="headerlink" title="为什么顺序如此重要"></a>为什么顺序如此重要</h4><p>下面的例子由两个衔接操作<code>map</code>和<code>filter</code>，以及一个终止操作<code>forEach</code>组成。让我们再来看看这些操作如何执行：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forEach: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// map:     d2</span><span class="token comment">// filter:  D2</span><span class="token comment">// map:     a2</span><span class="token comment">// filter:  A2</span><span class="token comment">// forEach: A2</span><span class="token comment">// map:     b1</span><span class="token comment">// filter:  B1</span><span class="token comment">// map:     b3</span><span class="token comment">// filter:  B3</span><span class="token comment">// map:     c</span><span class="token comment">// filter:  C</span></code></pre><p>就像你可能猜到的那样，<code>map</code>和<code>filter</code>会对底层集合的每个字符串调用五次，而<code>forEach</code>只会调用一次。</p><p>如果我们调整操作顺序，将<code>filter</code>移动到调用链的顶端，就可以极大减少操作的执行次数:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forEach: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// filter:  d2</span><span class="token comment">// filter:  a2</span><span class="token comment">// map:     a2</span><span class="token comment">// forEach: A2</span><span class="token comment">// filter:  b1</span><span class="token comment">// filter:  b3</span><span class="token comment">// filter:  c</span></code></pre><p>现在，<code>map</code>只会调用一次，所以操作流水线对于更多的输入元素会执行更快。在整合复杂的方法链时，要记住这一点。</p><p>让我们通过添加额外的方法<code>sorted</code>来扩展上面的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sort: %s; %s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forEach: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>排序是一类特殊的衔接操作。它是有状态的操作，因为你需要在处理中保存状态来对集合中的元素排序。</p><p>执行这个例子会得到如下输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash">sort:    a2<span class="token punctuation">;</span> d2sort:    b1<span class="token punctuation">;</span> a2sort:    b1<span class="token punctuation">;</span> d2sort:    b1<span class="token punctuation">;</span> a2sort:    b3<span class="token punctuation">;</span> b1sort:    b3<span class="token punctuation">;</span> d2sort:    c<span class="token punctuation">;</span> b3sort:    c<span class="token punctuation">;</span> d2filter:  a2map:     a2forEach: A2filter:  b1filter:  b3filter:  cfilter:  d2</code></pre><p>首先，排序操作在整个输入集合上执行。也就是说，<code>sorted</code>以水平方式执行。所以这里<code>sorted</code>对输入集合中每个元素的多种组合调用了八次。</p><p>我们同样可以通过重排调用链来优化性能：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sort: %s; %s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forEach: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// filter:  d2</span><span class="token comment">// filter:  a2</span><span class="token comment">// filter:  b1</span><span class="token comment">// filter:  b3</span><span class="token comment">// filter:  c</span><span class="token comment">// map:     a2</span><span class="token comment">// forEach: A2</span></code></pre><p>这个例子中<code>sorted</code>永远不会调用，因为<code>filter</code>把输入集合减少至只有一个元素。所以对于更大的输入集合会极大提升性能。</p><h4 id="复用数据流"><a href="#复用数据流" class="headerlink" title="复用数据流"></a>复用数据流</h4><p>Java8的数据流不能被复用。一旦你调用了任何终止操作，数据流就关闭了：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>stream<span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exception</span></code></pre><p>在相同数据流上，在<code>anyMatch</code>之后调用<code>noneMatch</code>会产生下面的异常：</p><pre class="language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">IllegalStateException</span><span class="token operator">:</span> stream has already been operated upon or closed   at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">229</span><span class="token punctuation">)</span>   at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token class-name">ReferencePipeline</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token class-name">ReferencePipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">459</span><span class="token punctuation">)</span>   at com<span class="token punctuation">.</span>winterbe<span class="token punctuation">.</span>java8<span class="token punctuation">.</span><span class="token class-name">Streams5</span><span class="token punctuation">.</span><span class="token function">test7</span><span class="token punctuation">(</span><span class="token class-name">Streams5</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">38</span><span class="token punctuation">)</span>   at com<span class="token punctuation">.</span>winterbe<span class="token punctuation">.</span>java8<span class="token punctuation">.</span><span class="token class-name">Streams5</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Streams5</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span></code></pre><p>要克服这个限制，我们需要为每个我们想要执行的终止操作创建新的数据流调用链。例如，我们创建一个数据流供应器，来构建新的数据流，并且设置好所有衔接操作：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamSupplier <span class="token operator">=</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"b3"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>streamSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>streamSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok </span></code></pre><p>每次对<code>get()</code>的调用都构造了一个新的数据流，我们将其保存来调用终止操作。</p><h3 id="Create-Stream"><a href="#Create-Stream" class="headerlink" title="Create Stream"></a>Create Stream</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Stream.of(val1, val2, val3….)</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Stream.of(arrayOfElements)</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// List.stream()</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String chars or String tokens</span><span class="token class-name">IntStream</span> stream5 <span class="token operator">=</span> <span class="token string">"12345_abcdefg"</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream5<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//OR</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream6 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A$B$C"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream6<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// file</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"文件路径名"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//可对lines做一些操作</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// create iterator stream, 创建迭代或者无限流，大都数情况需要添加limit函数限制</span><span class="token comment">// Stream.generate() or Stream.iterate()</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">></span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream4<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-></span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Convert-streams-to-collections"><a href="#Convert-streams-to-collections" class="headerlink" title="Convert streams to collections"></a>Convert streams to collections</h3><p>It’s just collecting the elements from the stream into a collection or array.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Convert Stream to List – Stream.collect( Collectors.toList() )</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> evenNumbersList <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>evenNumbersList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Convert Stream to array – Stream.toArray( EntryType[]::new )</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evenNumbersArr <span class="token operator">=</span> stream2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>evenNumbersArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Core-stream-operations"><a href="#Core-stream-operations" class="headerlink" title="Core stream operations"></a>Core stream operations</h3><table><thead><tr><th></th><th></th><th>操作分类</th><th></th><th></th></tr></thead><tbody><tr><td>操作</td><td>类型</td><td>返回类型</td><td>使用的类型/函数式接口</td><td>函数描述符</td></tr><tr><td><code>filter</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>distinct</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td></td><td></td></tr><tr><td><code>skip</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td>long</td><td></td></tr><tr><td><code>map</code></td><td>中间</td><td><code>Stream&lt;R&gt;</code></td><td><code>Function&lt;T, R&gt;</code></td><td><code>T -&gt; R</code></td></tr><tr><td><code>flatMap</code></td><td>中间</td><td><code>Stream&lt;R&gt;</code></td><td><code>Function&lt;T, Stream&lt;R&gt;&gt;</code></td><td><code>T -&gt; Stream&lt;R&gt;</code></td></tr><tr><td><code>limit</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td>long</td><td></td></tr><tr><td><code>sorted</code></td><td>中间</td><td><code>Stream&lt;T&gt;</code></td><td><code>Comparator&lt;T&gt;</code></td><td><code>(T, T) -&gt; int</code></td></tr><tr><td><code>anyMatch</code></td><td>终端</td><td><code>boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>noneMatch</code></td><td>终端</td><td><code>boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>allMatch</code></td><td>终端</td><td><code>boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>T -&gt; boolean</code></td></tr><tr><td><code>findAny</code></td><td>终端</td><td><code>Optional&lt;T&gt;</code></td><td></td><td></td></tr><tr><td><code>findFirst</code></td><td>终端</td><td><code>Optional&lt;T&gt;</code></td><td></td><td></td></tr><tr><td><code>forEach</code></td><td>终端</td><td><code>void</code></td><td><code>Consumer&lt;T&gt;</code></td><td><code>T -&gt; void</code></td></tr><tr><td><code>collect</code></td><td>终端</td><td><code>R</code></td><td><code>Collector&lt;T, A, R&gt;</code></td><td></td></tr><tr><td><code>reduce</code></td><td>终端</td><td><code>Optional&lt;T&gt;</code></td><td><code>BinaryOperator&lt;T&gt;</code></td><td><code>(T, T) -&gt; T</code></td></tr><tr><td><code>count</code></td><td>终端</td><td><code>long</code></td><td></td><td></td></tr></tbody></table><h4 id="Intermediate-operations"><a href="#Intermediate-operations" class="headerlink" title="Intermediate operations"></a>Intermediate operations</h4><p><strong>Intermediate operations return the stream itself</strong>, so you can chain multiple method calls in a row.</p><p>中间流返回流本身。</p><p>这个简单的说就是<em>pipeline</em>操作了，类比linux的管道流，</p><p>比如我要统计一个目录下所有文件包含hello的字数并且统计出现的次数并且排序，然后筛选出前几个</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> -l <span class="token string">'hello'</span> /tmp/* <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">wc</span> -w <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">head</span> -3</code></pre><p>更多介绍请戳 <a href="https://martinfowler.com/articles/collection-pipeline/">collection-pipeline</a></p><p>下面我们先定义一个集合然后操作几种常用的流操作。</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> memberNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Amitabh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Shekhar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Aman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Rahul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Shahrukh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Salman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Yana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memberNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Lokesh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-filter"><a href="#Stream-filter" class="headerlink" title="Stream.filter()"></a>Stream.filter()</h5><p>Filter accepts a predicate to filter all elements of the stream. This operation is intermediate which enables us to call another stream operation (e.g. forEach) on the result.</p><p>过滤流获取我们需要的数据</p><pre class="language-java" data-language="java"><code class="language-java">memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-distinct"><a href="#Stream-distinct" class="headerlink" title="Stream.distinct()"></a>Stream.distinct()</h5><p>函数原型为<code>Stream&lt;T&gt; distinct()</code>，作用是返回一个去除重复元素之后的<code>Stream</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream<span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-map"><a href="#Stream-map" class="headerlink" title="Stream.map()"></a>Stream.map()</h5><p>The intermediate operation map converts each element into another object via the given function</p><p>映射流的每个元素进行转换等操作</p><pre class="language-java" data-language="java"><code class="language-java">memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-flatMap"><a href="#Stream-flatMap" class="headerlink" title="Stream.flatMap"></a>Stream.flatMap</h5><p>函数原型为<code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</code>，作用是对每个元素执行<code>mapper</code>指定的操作，并用所有<code>mapper</code>返回的<code>Stream</code>中的元素组成一个新的<code>Stream</code>作为最终返回结果。说起来太拗口，通俗的讲<code>flatMap()</code>的作用就相当于把原<em>stream</em>中的所有元素都”摊平”之后组成的<code>Stream</code>，转换前后元素的个数和类型都可能会改变。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>list <span class="token operator">-></span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-sorted"><a href="#Stream-sorted" class="headerlink" title="Stream.sorted()"></a>Stream.sorted()</h5><p>Sorted is an intermediate operation which returns a sorted view of the stream. The elements are sorted in natural order unless you pass a custom Comparator.</p><p>对流的元素进行排序，除非传递自定义比较器，否则元素按自然顺序排序。</p><p>注意，流排序只是创建已排序的流视图，不改变原本集合的顺序。</p><pre class="language-java" data-language="java"><code class="language-java">memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Terminal-operations"><a href="#Terminal-operations" class="headerlink" title="Terminal operations"></a>Terminal operations</h4><p><strong>Terminal operations return a result of a certain type</strong> instead of again a Stream.</p><p>终端流返回特定类型的结果，表示流操作完成。</p><h5 id="Stream-forEach"><a href="#Stream-forEach" class="headerlink" title="Stream.forEach()"></a>Stream.forEach()</h5><p>This method helps in iterating over all elements of a stream and perform some operation on each of them. The operation is passed as lambda expression parameter.</p><p>遍历流的所有元素并对每个元素执行某些操作。作为lambda表达式参数传递。</p><pre class="language-java" data-language="java"><code class="language-java">memberNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-match"><a href="#Stream-match" class="headerlink" title="Stream.match()"></a>Stream.match()</h5><p>Various matching operations can be used to check whether a certain predicate matches the stream. All of those operations are terminal and return a boolean result.</p><p>返回布尔值，流匹配</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> matchedResult <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchedResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  matchedResult <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchedResult<span class="token punctuation">)</span><span class="token punctuation">;</span>  matchedResult <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchedResult<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-count"><a href="#Stream-count" class="headerlink" title="Stream.count()"></a>Stream.count()</h5><p>Count is a terminal operation returning the number of elements in the stream as a long.</p><p>返回流元素的数量</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">long</span> totalMatched <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>totalMatched<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Stream-reduce"><a href="#Stream-reduce" class="headerlink" title="Stream.reduce()"></a>Stream.reduce()</h5><p>This terminal operation performs a reduction on the elements of the stream with the given function. The result is an Optional holding the reduced value.</p><p><em>reduce</em>操作可以实现从一组元素中生成一个值，<code>sum()</code>、<code>max()</code>、<code>min()</code>、<code>count()</code>等都是<em>reduce</em>操作，将他们单独设为函数只是因为常用。<code>reduce()</code>的方法定义有三种重写形式：</p><ul><li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></li><li><code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code></li></ul><p>虽然函数定义越来越长，但语义不曾改变，多的参数只是为了指明初始值（参数<em>identity</em>），或者是指定并行执行时多个部分结果的合并方式（参数<em>combiner</em>）。<code>reduce()</code>最常用的场景就是从一堆值中生成一个值。用这么复杂的函数去求一个最大或最小值，你是不是觉得设计者有病。其实不然，因为“大”和“小”或者“求和”有时会有不同的语义。</p><p>需求：<em>从一组单词中找出最长的单词</em>。这里“大”的含义就是“长”。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 找出最长的单词</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> longest <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s1 <span class="token operator">:</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Optional&lt;String> longest = stream.max((s1, s2) -> s1.length()-s2.length());</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>longest<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码会选出最长的单词<em>love</em>，其中<em>Optional</em>是（一个）值的容器，使用它可以避免<em>null</em>值的麻烦。当然可以使用<code>Stream.max(Comparator&lt;? super T&gt; comparator)</code>方法来达到同等效果，但<code>reduce()</code>自有其存在的理由。</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Stream.reduce_parameter.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Stream.reduce_parameter.png" alt="Stream.reduce_parameter" loading="lazy"></a></p><p>需求：<em>求出一组单词的长度之和</em>。这是个“求和”操作，操作对象输入类型是<em>String</em>，而结果类型是<em>Integer</em>。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 求单词长度之和Stream&lt;String&gt; stream &#x3D; Stream.of(&quot;I&quot;, &quot;love&quot;, &quot;you&quot;, &quot;too&quot;);Integer lengthSum &#x3D; stream.reduce(0,　&#x2F;&#x2F; 初始值　&#x2F;&#x2F; (1)        (sum, str) -&gt; sum+str.length(), &#x2F;&#x2F; 累加器 &#x2F;&#x2F; (2)        (a, b) -&gt; a+b);　&#x2F;&#x2F; 部分和拼接器，并行执行时才会用到 &#x2F;&#x2F; (3)&#x2F;&#x2F; int lengthSum &#x3D; stream.mapToInt(str -&gt; str.length()).sum();System.out.println(lengthSum);</code></pre><p>上述代码标号(2)处将i. 字符串映射成长度，ii. 并和当前累加和相加。这显然是两步操作，使用<code>reduce()</code>函数将这两步合二为一，更有助于提升性能。如果想要使用<code>map()</code>和<code>sum()</code>组合来达到上述目的，也是可以的。</p><h5 id="Boxed-Stream"><a href="#Boxed-Stream" class="headerlink" title="Boxed Stream"></a>Boxed Stream</h5><p>采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。 当流操作为纯数值操作时，使用<strong>数值流</strong>能获得较高的效率。</p><p><strong>将普通流转换成数值流</strong></p><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。 如，将Person中的age转换成数值流：</p><pre class="language-none"><code class="language-none">IntStream stream &#x3D; list.stream().mapToInt(Person::getAge);</code></pre><p><strong>数值计算</strong></p><p>每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：</p><pre class="language-none"><code class="language-none">OptionalInt maxAge &#x3D; list.stream()                                .mapToInt(Person::getAge)                                .max();</code></pre><p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong</p><p><code>reduce()</code>擅长的是生成一个值，如果想要从<em>Stream</em>生成一个集合或者<em>Map</em>等复杂的对象该怎么办呢？终极武器<code>collect()</code>横空出世！</p><h5 id="Stream-collect"><a href="#Stream-collect" class="headerlink" title="Stream.collect()"></a>Stream.collect()</h5><p><strong>Collectors 类的静态工厂方法</strong></p><table><thead><tr><th>工厂方法</th><th>返回类型</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>toList</code></td><td><code>List&lt;T&gt;</code></td><td>把流中所有项目收集到一个 List</td><td><code>List&lt;Project&gt; projects = projectStream.collect(toList());</code></td></tr><tr><td><code>toSet</code></td><td><code>Set&lt;T&gt;</code></td><td>把流中所有项目收集到一个 Set，删除重复项</td><td><code>Set&lt;Project&gt; projects = projectStream.collect(toSet());</code></td></tr><tr><td><code>toCollection</code></td><td><code>Collection&lt;T&gt;</code></td><td>把流中所有项目收集到给定的供应源创建的集合</td><td><code>Collection&lt;Project&gt; projects = projectStream.collect(toCollection(), ArrayList::new);</code></td></tr><tr><td><code>counting</code></td><td><code>Long</code></td><td>计算流中元素的个数</td><td><code>long howManyProjects = projectStream.collect(counting());</code></td></tr><tr><td><code>summingInt</code></td><td><code>Integer</code></td><td>对流中项目的一个整数属性求和</td><td><code>int totalStars = projectStream.collect(summingInt(Project::getStars));</code></td></tr><tr><td><code>averagingInt</code></td><td><code>Double</code></td><td>计算流中项目 Integer 属性的平均值</td><td><code>double avgStars = projectStream.collect(averagingInt(Project::getStars));</code></td></tr><tr><td><code>summarizingInt</code></td><td><code>IntSummaryStatistics</code></td><td>收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td><td><code>IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));</code></td></tr><tr><td><code>joining</code></td><td><code>String</code></td><td>连接对流中每个项目调用 toString 方法所生成的字符串</td><td><code>String shortProject = projectStream.map(Project::getName).collect(joining(&quot;, &quot;));</code></td></tr><tr><td><code>maxBy</code></td><td><code>Optional&lt;T&gt;</code></td><td>按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td><td><code>Optional&lt;Project&gt; fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));</code></td></tr><tr><td><code>minBy</code></td><td><code>Optional&lt;T&gt;</code></td><td>按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td><td><code>Optional&lt;Project&gt; fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));</code></td></tr><tr><td><code>reducing</code></td><td>归约操作产生的类型</td><td>从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值</td><td><code>int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));</code></td></tr><tr><td><code>collectingAndThen</code></td><td>转换函数返回的类型</td><td>包含另一个收集器，对其结果应用转换函数</td><td><code>int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));</code></td></tr><tr><td><code>groupingBy</code></td><td><code>Map&lt;K, List&lt;T&gt;&gt;</code></td><td>根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td><td><code>Map&lt;String,List&lt;Project&gt;&gt; projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));</code></td></tr><tr><td><code>partitioningBy</code></td><td><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td><td>根据对流中每个项目应用断言的结果来对项目进行分区</td><td><code>Map&lt;Boolean,List&lt;Project&gt;&gt; vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));</code></td></tr></tbody></table><p>collect() method used to recieve elements from a sream and store them in a collection and metioned in parameter funcion.</p><p>collect ( )方法，用于从Stream接收元素，并将它们存储在集合中，并在参数函数中进行赋值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> memNamesInUppercase <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>memNamesInUppercase<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不夸张的讲，如果你发现某个功能在<em>Stream</em>接口中没找到，十有八九可以通过<code>collect()</code>方法实现。<code>collect()</code>是<em>Stream</em>接口方法中最灵活的一个。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 将Stream转换成容器或Map</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (1)</span><span class="token comment">// Set&lt;String> set = stream.collect(Collectors.toSet()); // (2)</span><span class="token comment">// Map&lt;String, Integer> map = stream.collect(Collectors.toMap(Function.identity(), String::length)); // (3)</span></code></pre><p>上述代码分别列举了如何将<em>Stream</em>转换成<em>List</em>、<em>Set</em>和<em>Map</em>。</p><p><code>Collectors.toMap() internally uses Map.merge() to add mappings to the map. Map.merge() is spec&#39;d not to allow null values, regardless of whether the underlying Map supports null values. This could probably use some clarification in the Collectors.toMap() specifications.</code></p><p>前面已经说过<em>Stream</em>背后依赖于某种数据源，数据源可以是数组、容器等，但不能是<em>Map</em>。反过来从<em>Stream</em>生成<em>Map</em>是可以的，但我们要想清楚<em>Map</em>的<em>key</em>和<em>value</em>分别代表什么，根本原因是我们要想清楚要干什么。通常在三种情况下<code>collect()</code>的结果会是<em>Map</em>：</p><ol><li>使用<code>Collectors.toMap()</code>生成的收集器，用户需要指定如何生成<em>Map</em>的<em>key</em>和<em>value</em>。</li><li>使用<code>Collectors.partitioningBy()</code>生成的收集器，对元素进行二分区操作时用到。</li><li>使用<code>Collectors.groupingBy()</code>生成的收集器，对元素做<em>group</em>操作时用到。</li></ol><p>情况1：使用<code>toMap()</code>生成的收集器，这种情况是最直接的，前面例子中已提到，这是和<code>Collectors.toCollection()</code>并列的方法。如下代码展示将学生列表转换成由&lt;学生，GPA&gt;组成的<em>Map</em>。非常直观，无需多言。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用toMap()统计学生GPA</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span></span> studentToGPA <span class="token operator">=</span>     students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 如何生成key</span>   student <span class="token operator">-></span> <span class="token function">computeGPA</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如何生成value</span></code></pre><p>情况2：使用<code>partitioningBy()</code>生成的收集器，这种情况适用于将<code>Stream</code>中的元素依据某个二值逻辑（满足条件，或不满足）分成互补相交的两部分，比如男女性别、成绩及格与否等。下列代码展示将学生分成成绩及格或不及格的两部分。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Partition students into passing and failing</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span><span class="token punctuation">></span></span> passingFailing <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> PASS_THRESHOLD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>情况3：使用<code>groupingBy()</code>生成的收集器，这是比较灵活的一种情况。跟SQL中的<em>group by</em>语句类似，这里的<em>groupingBy()也是按照某个属性对数据进行分组，属性相同的元素会被对应到Map</em>的同一个<em>key</em>上。下列代码展示将员工按照部门进行分组：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Group employees by department</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> byDept <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getDepartment</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上只是分组的最基本用法，有些时候仅仅分组是不够的。在SQL中使用<em>group by</em>是为了协助其他查询，比如<em>1. 先将员工按照部门分组，2. 然后统计每个部门员工的人数</em>。Java类库设计者也考虑到了这种情况，增强版的<code>groupingBy()</code>能够满足这种需求。增强版的<code>groupingBy()</code>允许我们对元素分组之后再执行某种运算，比如求和、计数、平均值、类型转换等。这种先将元素分组的收集器叫做<strong>上游收集器</strong>，之后执行其他运算的收集器叫做<strong>下游收集器</strong>(<em>downstream Collector</em>)。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用下游收集器统计每个部门的人数</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> totalByDept <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getDepartment</span><span class="token punctuation">,</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下游收集器</span></code></pre><p>上面代码的逻辑是不是越看越像SQL？高度非结构化。还有更狠的，下游收集器还可以包含更下游的收集器，这绝不是为了炫技而增加的把戏，而是实际场景需要。考虑将员工按照部门分组的场景，如果<em>我们想得到每个员工的名字（字符串），而不是一个个</em>Employee<em>对象</em>，可通过如下方式做到：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 按照部门对员工分布组，并只保留员工的名字</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> byDept <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getDepartment</span><span class="token punctuation">,</span>    <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span><span class="token comment">// 下游收集器</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更下游的收集器</span></code></pre><p>字符串拼接时使用<code>Collectors.joining()</code>生成的收集器，从此告别<em>for</em>循环。<code>Collectors.joining()</code>方法有三种重写形式，分别对应三种不同的拼接方式。无需多言，代码过目难忘。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用Collectors.joining()拼接字符串</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"love"</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String joined = stream.collect(Collectors.joining());// "Iloveyou"</span><span class="token comment">//String joined = stream.collect(Collectors.joining(","));// "I,love,you"</span><span class="token class-name">String</span> joined <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "&#123;I,love,you&#125;"</span></code></pre><p>了可以使用<em>Collectors</em>工具类已经封装好的收集器，我们还可以自定义收集器，或者直接调用<code>collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</code>方法，<strong>收集任何形式你想要的信息</strong>。不过<em>Collectors</em>工具类应该能满足我们的绝大部分需求，手动实现之间请先看看文档。</p><h4 id="Stream-short-circuit-operations"><a href="#Stream-short-circuit-operations" class="headerlink" title="Stream short-circuit operations"></a>Stream short-circuit operations</h4><p>尽管流操作是在满足谓词的集合中的所有元素上执行的，但是在迭代过程中每当遇到匹配的元素时，通常都希望中断该操作。在外部迭代中，您将使用if-else块。在内部迭代中，有一些特定的方法可以用于此目的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// anyMatch() -> 一旦条件 满足 predicate ，则返回true。它将不再处理任何元素。</span><span class="token keyword">boolean</span> matched <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// findFirst() -> 它将从流返回第一个元素，然后不再处理任何元素。</span><span class="token class-name">String</span> firstMatchedName <span class="token operator">=</span> memberNames<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstMatchedName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Streams-pipeline"><a href="#Streams-pipeline" class="headerlink" title="Streams pipeline"></a>Streams pipeline</h4><p>这里我们来阐述一下，Streams 流水线工作原理。</p><h5 id="中间操作怎么保存跟记录"><a href="#中间操作怎么保存跟记录" class="headerlink" title="中间操作怎么保存跟记录"></a>中间操作怎么保存跟记录</h5><p>首先，我们上面介绍了Streams的很多中间操作，那么这些中间操作是如果保存跟记录呢，很多Stream操作会需要一个回调函数（Lambda表达式），因此一个完整的操作是&lt;*数据来源，操作，回调函数*&gt;构成的三元组。Stream中使用Stage的概念来描述一个完整的操作，并用某种实例化后的<em>PipelineHelper</em>来代表Stage，将具有先后顺序的各个Stage连到一起，就构成了整个流水线。跟Stream相关类和接口的继承关系图示。</p><p><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Java_stream_pipeline_classes.png" alt="Java_stream_pipeline_classes" loading="lazy"></p><p>还有<em>IntPipeline, LongPipeline, DoublePipeline</em>没在图中画出，这三个类专门为三种基本类型（不是包装类型）而定制的，跟<em>ReferencePipeline</em>是并列关系。图中<em>Head</em>用于表示第一个Stage，即调用调用诸如<em>Collection.stream()方法产生的Stage，很显然这个Stage里不包含任何操作；StatelessOp和StatefulOp</em>分别表示无状态和有状态的Stage，对应于无状态和有状态的中间操作。</p><p>Stream流水线组织结构示意图如下：</p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Stream_pipeline_example.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Stream_pipeline_example.png" alt="Stream_pipeline_example" loading="lazy"></a></p><p>图中通过<code>Collection.stream()</code>方法得到<em>Head</em>也就是stage0，紧接着调用一系列的中间操作，不断产生新的Stream。<strong>这些Stream对象以双向链表的形式组织在一起，构成整个流水线，由于每个Stage都记录了前一个Stage和本次的操作以及回调函数，依靠这种结构就能建立起对数据源的所有操作</strong>。这就是Stream记录操作的方式。</p><h5 id="中间操作怎么叠加"><a href="#中间操作怎么叠加" class="headerlink" title="中间操作怎么叠加"></a>中间操作怎么叠加</h5><p>以上只是解决了操作记录的问题，要想让流水线起到应有的作用我们需要一种将所有操作叠加到一起的方案。你可能会觉得这很简单，只需要从流水线的head开始依次执行每一步的操作（包括回调函数）就行了。这听起来似乎是可行的，但是你忽略了前面的Stage并不知道后面Stage到底执行了哪种操作，以及回调函数是哪种形式。换句话说，只有当前Stage本身才知道该如何执行自己包含的动作。这就需要有某种协议来协调相邻Stage之间的调用关系。</p><p>这种协议由<em>Sink</em>接口完成，<em>Sink</em>接口包含的方法如下表所示：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>void begin(long size)</td><td>开始遍历元素之前调用该方法，通知Sink做好准备。</td></tr><tr><td>void end()</td><td>所有元素遍历完成之后调用，通知Sink没有更多的元素了。</td></tr><tr><td>boolean cancellationRequested()</td><td>是否可以结束操作，可以让短路操作尽早结束。</td></tr><tr><td>void accept(T t)</td><td>遍历元素时调用，接受一个待处理元素，并对元素进行处理。Stage把自己包含的操作和回调方法封装到该方法里，前一个Stage只需要调用当前Stage.accept(T t)方法就行了。</td></tr></tbody></table><p>有了上面的协议，相邻Stage之间调用就很方便了，每个Stage都会将自己的操作封装到一个Sink里，前一个Stage只需调用后一个Stage的<code>accept()</code>方法即可，并不需要知道其内部是如何处理的。当然对于有状态的操作，Sink的<code>begin()</code>和<code>end()</code>方法也是必须实现的。比如Stream.sorted()是一个有状态的中间操作，其对应的Sink.begin()方法可能创建一个乘放结果的容器，而accept()方法负责将元素添加到该容器，最后end()负责对容器进行排序。对于短路操作，<code>Sink.cancellationRequested()</code>也是必须实现的，比如Stream.findFirst()是短路操作，只要找到一个元素，cancellationRequested()就应该返回<em>true</em>，以便调用者尽快结束查找。Sink的四个接口方法常常相互协作，共同完成计算任务。<strong>实际上Stream API内部实现的的本质，就是如何重载Sink的这四个接口方法</strong>。</p><p>有了Sink对操作的包装，Stage之间的调用问题就解决了，执行时只需要从流水线的head开始对数据源依次调用每个Stage对应的Sink.{begin(), accept(), cancellationRequested(), end()}方法就可以了。一种可能的Sink.accept()方法流程是这样的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token number">1.</span> 使用当前<span class="token class-name">Sink</span>包装的回调函数处理u    <span class="token number">2.</span> 将处理结果传递给流水线下游的<span class="token class-name">Sink</span><span class="token punctuation">&#125;</span></code></pre><p>Sink接口的其他几个方法也是按照这种[处理-&gt;转发]的模型实现。下面我们结合具体例子看看Stream的中间操作是如何将自身的操作包装成Sink以及Sink是如何将处理结果转发给下一个Sink的。先看Stream.map()方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Stream.map()，调用该方法将产生一个新的Stream</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> P_OUT<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StatelessOp</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">StreamShape</span><span class="token punctuation">.</span>REFERENCE<span class="token punctuation">,</span>                                 <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>NOT_SORTED <span class="token operator">|</span> <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>NOT_DISTINCT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span> <span class="token comment">/*opWripSink()方法返回由回调函数包装而成Sink*/</span>        <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">></span></span> <span class="token function">opWrapSink</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> downstream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sink</span><span class="token punctuation">.</span><span class="token class-name">ChainedReference</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>downstream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">P_OUT</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">R</span> r <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 使用当前Sink包装的回调函数mapper处理u</span>                    downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 将处理结果传递给流水线下游的Sink</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码看似复杂，其实逻辑很简单，就是将回调函数<em>mapper</em>包装到一个Sink当中。由于Stream.map()是一个无状态的中间操作，所以map()方法返回了一个StatelessOp内部类对象（一个新的Stream），调用这个新Stream的opWripSink()方法将得到一个包装了当前回调函数的Sink。</p><p>再来看一个复杂一点的例子。Stream.sorted()方法将对Stream中的元素进行排序，显然这是一个有状态的中间操作，因为读取所有元素之前是没法得到最终顺序的。抛开模板代码直接进入问题本质，sorted()方法是如何将操作封装成Sink的呢？sorted()一种可能封装的Sink代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Stream.sort()方法用到的Sink实现</span><span class="token keyword">class</span> <span class="token class-name">RefSortingSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRefSortingSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span><span class="token comment">// 存放用于排序的元素</span>    <span class="token class-name">RefSortingSink</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> downstream<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>downstream<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// 创建一个存放排序元素的列表</span>        list <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只有元素全部接收之后才能开始排序</span>        downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancellationWasRequested<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 下游Sink不包含短路操作</span>            list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>downstream<span class="token operator">::</span><span class="token function">accept</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 将处理结果传递给流水线下游的Sink</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 下游Sink包含短路操作</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 每次都调用cancellationRequested()询问是否可以结束处理。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>downstream<span class="token punctuation">.</span><span class="token function">cancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 将处理结果传递给流水线下游的Sink</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        downstream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 使用当前Sink包装动作处理t，只是简单的将元素添加到中间列表当中</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码完美的展现了Sink的四个接口方法是如何协同工作的：</p><ol><li>首先begin()方法告诉Sink参与排序的元素个数，方便确定中间结果容器的的大小；</li><li>之后通过accept()方法将元素添加到中间结果当中，最终执行时调用者会不断调用该方法，直到遍历所有元素；一个</li><li>最后end()方法告诉Sink所有元素遍历完毕，启动排序步骤，排序完成后将结果传递给下游的Sink；</li><li>如果下游的Sink是短路操作，将结果传递给下游时不断询问下游cancellationRequested()是否可以结束处理。</li></ol><h5 id="操作叠加后如何执行"><a href="#操作叠加后如何执行" class="headerlink" title="操作叠加后如何执行"></a>操作叠加后如何执行</h5><p>Sink完美封装了Stream每一步操作，并给出了[处理-&gt;转发]的模式来叠加操作。这一连串的齿轮已经咬合，就差最后一步拨动齿轮启动执行。是什么启动这一连串的操作呢？也许你已经想到了启动的原始动力就是结束操作(Terminal Operation)，一旦调用某个结束操作，就会触发整个流水线的执行。</p><p>结束操作之后不能再有别的操作，所以结束操作不会创建新的流水线阶段(Stage)，直观的说就是流水线的链表不会在往后延伸了。结束操作会创建一个包装了自己操作的Sink，这也是流水线中最后一个Sink，这个Sink只需要处理数据而不需要将结果传递给下游的Sink（因为没有下游）。对于Sink的[处理-&gt;转发]模型，结束操作的Sink就是调用链的出口。</p><p>我们再来考察一下上游的Sink是如何找到下游Sink的。一种可选的方案是在<em>PipelineHelper</em>中设置一个Sink字段，在流水线中找到下游Stage并访问Sink字段即可。但Stream类库的设计者没有这么做，而是设置了一个<code>Sink AbstractPipeline.opWrapSink(int flags, Sink downstream)</code>方法来得到Sink，该方法的作用是返回一个新的包含了当前Stage代表的操作以及能够将结果传递给downstream的Sink对象。为什么要产生一个新对象而不是返回一个Sink字段？这是因为使用opWrapSink()可以将当前操作与下游Sink（上文中的downstream参数）结合成新Sink。试想只要从流水线的最后一个Stage开始，不断调用上一个Stage的opWrapSink()方法直到最开始（不包括stage0，因为stage0代表数据源，不包含操作），就可以得到一个代表了流水线上所有操作的Sink，用代码表示就是这样：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; AbstractPipeline.wrapSink()&#x2F;&#x2F; 从下游向上游不断包装Sink。如果最初传入的sink代表结束操作，&#x2F;&#x2F; 函数返回时就可以得到一个代表了流水线上所有操作的Sink。final &lt;P_IN&gt; Sink&lt;P_IN&gt; wrapSink(Sink&lt;E_OUT&gt; sink) &#123;    ...    for (AbstractPipeline p&#x3D;AbstractPipeline.this; p.depth &gt; 0; p&#x3D;p.previousStage) &#123;        sink &#x3D; p.opWrapSink(p.previousStage.combinedFlags, sink);    &#125;    return (Sink&lt;P_IN&gt;) sink;&#125;</code></pre><p>现在流水线上从开始到结束的所有的操作都被包装到了一个Sink里，执行这个Sink就相当于执行整个流水线，执行Sink的代码如下：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; AbstractPipeline.copyInto(), 对spliterator代表的数据执行wrappedSink代表的操作。final &lt;P_IN&gt; void copyInto(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator) &#123;    ...    if (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) &#123;        wrappedSink.begin(spliterator.getExactSizeIfKnown());&#x2F;&#x2F; 通知开始遍历        spliterator.forEachRemaining(wrappedSink);&#x2F;&#x2F; 迭代        wrappedSink.end();&#x2F;&#x2F; 通知遍历结束    &#125;    ...&#125;</code></pre><p>上述代码首先调用wrappedSink.begin()方法告诉Sink数据即将到来，然后调用spliterator.forEachRemaining()方法对数据进行迭代（Spliterator是容器的一种迭代器，<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/3-Lambda%20and%20Collections.md#spliterator">参阅</a>），最后调用wrappedSink.end()方法通知Sink数据处理结束。逻辑如此清晰。</p><h5 id="执行后的结果怎么保存"><a href="#执行后的结果怎么保存" class="headerlink" title="执行后的结果怎么保存"></a>执行后的结果怎么保存</h5><p>最后一个问题是流水线上所有操作都执行后，用户所需要的结果（如果有）在哪里？首先要说明的是不是所有的Stream结束操作都需要返回结果，有些操作只是为了使用其副作用(<em>Side-effects</em>)，比如使用<code>Stream.forEach()</code>方法将结果打印出来就是常见的使用副作用的场景（事实上，除了打印之外其他场景都应避免使用副作用），对于真正需要返回结果的结束操作结果存在哪里呢？</p><blockquote><p>特别说明：副作用不应该被滥用，也许你会觉得在Stream.forEach()里进行元素收集是个不错的选择，就像下面代码中那样，但遗憾的是这样使用的正确性和效率都无法保证，因为Stream可能会并行执行。大多数使用副作用的地方都可以使用<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams%20API(II).md">归约操作</a>更安全和有效的完成。</p></blockquote><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 错误的收集方式ArrayList&lt;String&gt; results &#x3D; new ArrayList&lt;&gt;();stream.filter(s -&gt; pattern.matcher(s).matches())      .forEach(s -&gt; results.add(s));  &#x2F;&#x2F; Unnecessary use of side-effects!&#x2F;&#x2F; 正确的收集方式List&lt;String&gt;results &#x3D;     stream.filter(s -&gt; pattern.matcher(s).matches())             .collect(Collectors.toList());  &#x2F;&#x2F; No side-effects!</code></pre><p>回到流水线执行结果的问题上来，需要返回结果的流水线结果存在哪里呢？这要分不同的情况讨论，下表给出了各种有返回结果的Stream结束操作。</p><table><thead><tr><th>返回类型</th><th>对应的结束操作</th></tr></thead><tbody><tr><td>boolean</td><td>anyMatch() allMatch() noneMatch()</td></tr><tr><td>Optional</td><td>findFirst() findAny()</td></tr><tr><td>归约结果</td><td>reduce() collect()</td></tr><tr><td>数组</td><td>toArray()</td></tr></tbody></table><ol><li>对于表中返回boolean或者Optional的操作（Optional是存放 一个 值的容器）的操作，由于值返回一个值，只需要在对应的Sink中记录这个值，等到执行结束时返回就可以了。</li><li>对于归约操作，最终结果放在用户调用时指定的容器中（容器类型通过<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams%20API(II).md#%E6%94%B6%E9%9B%86%E5%99%A8">收集器</a>指定）。collect(), reduce(), max(), min()都是归约操作，虽然max()和min()也是返回一个Optional，但事实上底层是通过调用<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams%20API(II).md#%E5%A4%9A%E9%9D%A2%E6%89%8Breduce">reduce()</a>方法实现的。</li><li>对于返回是数组的情况，毫无疑问的结果会放在数组当中。这么说当然是对的，但在最终返回数组之前，结果其实是存储在一种叫做<em>Node</em>的数据结构中的。Node是一种多叉树结构，元素存储在树的叶子当中，并且一个叶子节点可以存放多个元素。这样做是为了并行执行方便。</li></ol><h3 id="Parallelism-in-Java-Steam"><a href="#Parallelism-in-Java-Steam" class="headerlink" title="Parallelism in Java Steam"></a>Parallelism in Java Steam</h3><p>并行流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Here creating a parallel stream</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evenNumbersArr <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>evenNumbersArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Concurrent"><a href="#Concurrent" class="headerlink" title="Concurrent"></a>Concurrent</h2><h3 id="Thread-和-Runnable"><a href="#Thread-和-Runnable" class="headerlink" title="Thread 和 Runnable"></a>Thread 和 Runnable</h3><p>所有的现代操作系统都通过进程和线程来支持并发。进程是通常彼此独立运行的程序的实例，比如，如果你启动了一个Java程序，操作系统产生一个新的进程，与其他程序一起并行执行。 在这些进程的内部，我们使用线程并发执行代码，因此，我们可以最大限度的利用CPU可用的核心（core）。</p><p>Java从JDK1.0开始执行线程。在开始一个新的线程之前，你必须指定由这个线程执行的代码，通常称为task。这可以通过实现Runnable——一个定义了一个无返回值无参数的 <code>run()</code> 方法的函数接口。</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>在执行一个异步任务或并发任务时，往往是通过直接 <code>new Thread()</code> 方法来创建新的线程，这样做弊端较多，更好的解决方案是合理地利用线程池，线程池的优势很明显，如下：</p><ol><li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</li><li>提高系统响应速度，当有任务到达时，无需等待新线程的创建便能立即执行；</li><li>方便线程并发数的管控，线程若是无限制的创建，不仅会额外消耗大量系统资源，更是占用过多资源而阻塞系统或oom等状况，从而降低系统的稳定性。线程池能有效管控线程，统一分配、调优，提供资源使用率；</li><li>更强大的功能，线程池提供了定时、定期以及可控线程数等功能的线程池，使用方便简单。</li></ol><h4 id="线程池用法"><a href="#线程池用法" class="headerlink" title="线程池用法"></a>线程池用法</h4><h5 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h5><p>创建一个可缓存的无界线程池，该方法无参数。当线程池中的线程空闲时间超过60s则会自动回收该线程，当任务超过线程池的线程数则创建新线程。线程池的大小上限为 <code>Integer.MAX_VALUE</code>，可看做是无限大。</p><pre class="language-none"><code class="language-none">public void cachedThreadPoolDemo()&#123;    ExecutorService cachedThreadPool &#x3D; Executors.newCachedThreadPool();    for (int i &#x3D; 0; i &lt; 5; i++) &#123;        final int index &#x3D; i;        cachedThreadPool.execute(new Runnable() &#123;            @Override            public void run() &#123;                System.out.println(Thread.currentThread().getName()+&quot;, index&#x3D;&quot;+index);            &#125;        &#125;);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">pool-1-thread-1, index&#x3D;0pool-1-thread-1, index&#x3D;1pool-1-thread-1, index&#x3D;2pool-1-thread-1, index&#x3D;3pool-1-thread-1, index&#x3D;4</code></pre><p>从运行结果可以看出，整个过程都在同一个线程pool-1-thread-1中运行，后面线程复用前面的线程。</p><h5 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h5><p>创建一个固定大小的线程池，该方法可指定线程池的固定大小，对于超出的线程会在 <code>LinkedBlockingQueue</code> 队列中等待。</p><pre class="language-none"><code class="language-none">public void fixedThreadPoolDemo()&#123;    ExecutorService fixedThreadPool &#x3D; Executors.newFixedThreadPool(3);    for (int i &#x3D; 0; i &lt; 6; i++) &#123;        final int index &#x3D; i;        fixedThreadPool.execute(new Runnable() &#123;            @Override            public void run() &#123;                System.out.println(Thread.currentThread().getName()+&quot;, index&#x3D;&quot;+index);            &#125;        &#125;);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">pool-1-thread-1, index&#x3D;0pool-1-thread-2, index&#x3D;1pool-1-thread-3, index&#x3D;2pool-1-thread-1, index&#x3D;3pool-1-thread-2, index&#x3D;4pool-1-thread-3, index&#x3D;5</code></pre><p>从运行结果可以看出，线程池大小为3，每休眠1s后将任务提交给线程池的各个线程轮番交错地执行。线程池的大小设置，可参数 <code>Runtime.getRuntime().availableProcessors()</code>。</p><h5 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h5><p>创建只有一个线程的线程池，该方法无参数，所有任务都保存队列LinkedBlockingQueue中，等待唯一的单线程来执行任务，并保证所有任务按照指定顺序(FIFO或优先级)执行。</p><pre class="language-none"><code class="language-none">public void singleThreadExecutorDemo()&#123;    ExecutorService singleThreadExecutor &#x3D; Executors.newSingleThreadExecutor();    for (int i &#x3D; 0; i &lt; 3; i++) &#123;        final int index &#x3D; i;        singleThreadExecutor.execute(new Runnable() &#123;            @Override            public void run() &#123;                System.out.println(Thread.currentThread().getName()+&quot;, index&#x3D;&quot;+index);            &#125;        &#125;);        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">pool-1-thread-1, index&#x3D;0pool-1-thread-1, index&#x3D;1pool-1-thread-1, index&#x3D;2</code></pre><p>从运行结果可以看出，所有任务都是在单一线程运行的。</p><h5 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h5><p>创建一个可定时执行或周期执行任务的线程池，该方法可指定线程池的核心线程个数。</p><pre class="language-none"><code class="language-none">public void scheduledThreadPoolDemo()&#123;    ScheduledExecutorService scheduledThreadPool &#x3D; Executors.newScheduledThreadPool(3);    &#x2F;&#x2F;定时执行一次的任务，延迟1s后执行    scheduledThreadPool.schedule(new Runnable() &#123;        @Override        public void run() &#123;            System.out.println(Thread.currentThread().getName()+&quot;, delay 1s&quot;);        &#125;    &#125;, 1, TimeUnit.SECONDS);    &#x2F;&#x2F;周期性地执行任务，延迟2s后，每3s一次地周期性执行任务    scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123;        @Override        public void run() &#123;            System.out.println(Thread.currentThread().getName()+&quot;, every 3s&quot;);        &#125;    &#125;, 2, 3, TimeUnit.SECONDS);&#125;</code></pre><p>运行结果：</p><pre class="language-none"><code class="language-none">pool-1-thread-1, delay 1spool-1-thread-1, every 3spool-1-thread-2, every 3spool-1-thread-2, every 3s...</code></pre><ul><li><code>schedule(Runnable command, long delay, TimeUnit unit)</code>: 延迟一定时间后执行 <code>Runnable</code> 任务；</li><li><code>schedule(Callable callable, long delay, TimeUnit unit)</code>: 延迟一定时间后执行 <code>Callable</code> 任务；</li><li><code>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</code>: 延迟一定时间后，以间隔period时间的频率周期性地执行任务；</li><li><code>scheduleWithFixedDelay(Runnable command, long initialDelay, long delay,TimeUnit unit)</code>: 与 <code>scheduleAtFixedRate()</code> 方法很类似， 但是不同的是scheduleWithFixedDelay()方法的周期时间间隔是以上一个任务执行结束到下一个任务开始执行的间隔， 而scheduleAtFixedRate()方法的周期时间间隔是以上一个任务开始执行到下一个任务开始执行的间隔，也就是这一些任务系列的触发时间都是可预知的。</li></ul><blockquote><p>ScheduledExecutorService 功能强大，对于定时执行的任务，建议多采用该方法。</p></blockquote><p><strong>方法对比</strong></p><table><thead><tr><th>工厂方法</th><th>corePoolSize</th><th>maximumPoolSize</th><th>keepAliveTime</th><th>workQueue</th></tr></thead><tbody><tr><td><code>newCachedThreadPool</code></td><td>0</td><td>Integer.MAX_VALUE</td><td>60s<code>SynchronousQueue</code></td><td></td></tr><tr><td><code>newFixedThreadPool</code></td><td>nThreads</td><td>nThreads</td><td>0</td><td><code>LinkedBlockingQueue</code></td></tr><tr><td><code>newSingleThreadExecutor</code></td><td>1</td><td>1</td><td>0</td><td><code>LinkedBlockingQueue</code></td></tr><tr><td><code>newScheduledThreadPool</code></td><td>corePoolSize</td><td>Integer.MAX_VALUE</td><td>0</td><td><code>DelayedWorkQueue</code></td></tr></tbody></table><p>其他参数都相同，其中线程工厂的默认类为 <code>DefaultThreadFactory</code>，线程饱和的默认策略为 <code>ThreadPoolExecutor.AbortPolicy</code>。</p><h3 id="简单使用-Lock-锁"><a href="#简单使用-Lock-锁" class="headerlink" title="简单使用 Lock 锁"></a>简单使用 Lock 锁</h3><p>Java 5 中引入了新的锁机制——java.util.concurrent.locks 中的显式的互斥锁：Lock 接口，它提供了比 <code>synchronized</code> 更加广泛的锁定操作。 Lock 接口有 3 个实现它的类：ReentrantLock、ReetrantReadWriteLock.ReadLock 和 ReetrantReadWriteLock.WriteLock，即重入锁、读锁和写锁。 lock 必须被显式地创建、锁定和释放，为了可以使用更多的功能，一般用 ReentrantLock 为其实例化。为了保证锁最终一定会被释放（可能会有异常发生），要把互斥区放在 try 语句块内，并在 finally 语句块中释放锁，尤其当有 return 语句时，return 语句必须放在 try 字句中，以确保 unlock()不会过早发生，从而将数据暴露给第二个任务。因此，采用 lock 加锁和释放锁的一般形式如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//默认使用非公平锁，如果要使用公平锁，需要传入参数true</span><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 更新对象的状态  </span>    <span class="token comment">// 捕获异常，必要时恢复到原来的不变约束  </span>    <span class="token comment">// 如果有return语句，放在这里  </span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//锁必须在finally块中释放</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>可重入锁，也叫做递归锁，指的是同一线程外层函数获得锁之后，内层递归函数仍然有获取该锁的代码，但不受影响。 在JAVA环境下 <code>ReentrantLock</code> 和 <code>synchronized</code> 都是可重入锁。</p><h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>读写锁：分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由jvm自己控制的，你只要上好相应的锁即可。 如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁；如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。 总之，读的时候上读锁，写的时候上写锁！</p><p><code>ReentrantReadWriteLock</code> 会使用两把锁来解决问题，一个读锁，一个写锁</p><ul><li>线程进入读锁的前提条件<ul><li>没有其他线程的写锁</li><li>没有写请求或者有写请求，但调用线程和持有锁的线程是同一个</li></ul></li><li>线程进入写锁的前提条件<ul><li>没有其他线程的读锁</li><li>没有其他线程的写锁</li></ul></li></ul><h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><p><code>StampedLock</code> 是 java 8 在 <code>java.util.concurrent.locks</code> 新增的一个API。</p><p><code>ReentrantReadWriteLock</code> 在沒有任何读锁和写锁时，才可以取得写入锁，这可用于实现了悲观读取。 然而，如果读取很多，写入很少的情况下，使用 <code>ReentrantReadWriteLock</code> 可能会使写入线程遭遇饥饿问题，也就是写入线程无法竞争到锁定而一直处于等待状态。 <code>StampedLock</code> 有三种模式的锁，用于控制读取/写入访问，StampedLock 的状态由版本和模式组成。 锁获取操作返回一个用于展示和访问锁状态的票据（stamp）变量，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。 在读锁上分为悲观锁和乐观锁，锁释放以及其他相关方法需要使用邮戳（stamps）变量作为参数，如果他们和当前锁状态不符则失败，这三种模式为：</p><ul><li>写入：方法writeLock可能为了获取独占访问而阻塞当前线程，返回一个stamp变量，能够在unlockWrite方法中使用从而释放锁。也提供了tryWriteLock。 当锁被写模式所占有，没有读或者乐观的读操作能够成功。</li><li>读取：方法readLock可能为了获取非独占访问而阻塞当前线程，返回一个stamp变量，能够在unlockRead方法中用于释放锁。也提供了tryReadLock。</li><li>乐观读取：方法 <code>tryOptimisticRead</code> 返回一个非 0 邮戳变量，仅在当前锁没有以写入模式被持有。如果在获得stamp变量之后没有被写模式持有，方法validate将返回true。 这种模式可以被看做一种弱版本的读锁，可以被一个写入者在任何时间打断。乐观读取模式仅用于短时间读取操作时经常能够降低竞争和提高吞吐量。</li></ul><blockquote><p>悲观锁（Pessimistic Lock），顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。 悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。 Java synchronized 就属于悲观锁的一种实现，每次线程要修改数据时都先获得锁，保证同一时刻只有一个线程能操作数据，其他线程则会被block。</p></blockquote><blockquote><p>乐观锁（Optimistic Lock），顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。 乐观锁适用于读多写少的应用场景，这样可以提高吞吐量。 乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p></blockquote><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>JDK1.5之后的java.util.concurrent.atomic包里，多了一批原子处理类。 AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference。 主要用于在高并发环境下的高效程序处理,来帮助我们简化同步处理.</p><p>AtomicInteger，一个提供原子操作的Integer的类。 在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。 而AtomicInteger则通过一种线程安全的加减操作接口。</p><pre class="language-none"><code class="language-none">public final int get()                  &#x2F;&#x2F;获取当前的值public final int getAndSet(int newValue)&#x2F;&#x2F;获取当前的值，并设置新的值public final int getAndIncrement()      &#x2F;&#x2F;获取当前的值，并自增public final int getAndDecrement()      &#x2F;&#x2F;获取当前的值，并自减public final int getAndAdd(int delta)   &#x2F;&#x2F;获取当前的值，并加上预期的值</code></pre><h3 id="LongAccumulator"><a href="#LongAccumulator" class="headerlink" title="LongAccumulator"></a>LongAccumulator</h3><p><code>LongAdder</code> 是jdk1.8提供的累加器，基于 <code>Striped64</code> 实现。 它常用于状态采集、统计等场景。 AtomicLong也可以用于这种场景，但在线程竞争激烈的情况下，LongAdder要比AtomicLong拥有更高的吞吐量，但会耗费更多的内存空间。</p><p><code>LongAccumulator</code> 和 <code>LongAdder</code> 类似，也基于Striped64实现。但要比LongAdder更加灵活(要传入一个函数接口)， LongAdder相当于是LongAccumulator的一种特例。</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。 很多年以来，我都觉得从字面上很难理解Semaphore所表达的含义，只能把它比作是控制流量的红绿灯，比如XX马路要限制流量，只允许同时有一百辆车在这条路上行使， 其他的都必须在路口等待，所以前一百辆车会看到绿灯，可以开进这条马路，后面的车会看到红灯，不能驶入XX马路， 但是如果前一百辆中有五辆车已经离开了XX马路，那么后面就允许有5辆车驶入马路，这个例子里说的车就是线程，驶入马路就表示线程在执行， 离开马路就表示线程执行完成，看见红灯就表示线程被阻塞，不能执行。</p><p><strong>应用场景</strong></p><p>Semaphore可以用于做流量控制，特别公用资源有限的应用场景，比如数据库连接。 假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发的读取， 但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个， 这时我们必须控制只有十个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。 这个时候，我们就可以使用Semaphore来做流控。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Time-API"><a href="#Time-API" class="headerlink" title="Time API"></a>Time API</h2><h3 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h3><p>Java 8中的时区操作被很大程度上简化了，新的时区类 <code>java.time.ZoneId</code> 是原有的 <code>java.util.TimeZone</code> 类的替代品。 ZoneId对象可以通过 <code>ZoneId.of()</code> 方法创建，也可以通过 <code>ZoneId.systemDefault()</code> 获取系统默认时区：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZoneId</span> shanghaiZoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZoneId</span> systemZoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>of()</code> 方法接收一个“区域/城市”的字符串作为参数，你可以通过 <code>getAvailableZoneIds()</code> 方法获取所有合法的“区域/城市”字符串：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> zoneIds <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于老的时区类 <code>TimeZone</code>，Java 8也提供了转化方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZoneId</span> oldToNewZoneId <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有了 <code>ZoneId</code>，我们就可以将一个 <code>LocalDate</code>、<code>LocalTime</code> 或 <code>LocalDateTime</code> 对象转化为 <code>ZonedDateTime</code> 对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> shanghaiZoneId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>ZonedDateTime</code> 对象由两部分构成，<code>LocalDateTime</code> 和 <code>ZoneId</code>，其中 <code>2018-03-03T15:26:56.147</code> 部分为 <code>LocalDateTime</code>，<code>+08:00[Asia/Shanghai]</code> 部分为ZoneId。</p><p>另一种表示时区的方式是使用 <code>ZoneOffset</code>，它是以当前时间和 <strong>世界标准时间（UTC）/格林威治时间（GMT）</strong> 的偏差来计算，例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZoneOffset</span> zoneOffset <span class="token operator">=</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+09:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OffsetDateTime</span> offsetDateTime <span class="token operator">=</span> <span class="token class-name">OffsetDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> zoneOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><p>Instant类在Java日期与时间功能中，表示了时间线上一个确切的点，定义为距离初始时间的时间差（初始时间为GMT 1970年1月1日00:00）经测量一天有86400秒，从初始时间开始不断向前移动。</p><p><strong>创建一个Instant实例</strong></p><p>你可以通过Instant类的工厂方法创建一个Instant实例，例如你可以调用instant.now()来创建一个确切的表达当前时间的Instant对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> now <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另外也有一些其它方法能创建Instant，具体请查阅Java官方文档。</p><p><strong>访问Instant的时间</strong></p><p>一个Instant对象里有两个域：距离初始时间的秒钟数、在当前一秒内的第几纳秒，他们的组合表达了当前时间点。你可以通过以下两个方法得到它们的值：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> seconds <span class="token operator">=</span>  <span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">int</span> nanos   <span class="token operator">=</span>   <span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Instant的计算</strong></p><p>Instant类有一些方法，可以用于获得另一Instant的值，例如：</p><ul><li><code>plusSeconds()</code></li><li><code>plusMillis()</code></li><li><code>plusNanos()</code></li><li><code>minusSeconds()</code></li><li><code>minusMillis()</code></li><li><code>minusNanos()</code></li></ul><p>我下面将向你展示两个例子，来说明这些方法如何使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> now     <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Instant</span> later   <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Instant</span> earlier <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">minusSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一行获得了一个Instant对象，表示当前时间。第二行创建了一个Instant表示三秒后，第三行创建了一个Instant表示三秒前。</p><blockquote><p>seconds 表示从 <code>1970-01-01 00:00:00</code> 开始到现在的秒数，nanos 表示纳秒部分（nanos的值不会超过999,999,999）</p></blockquote><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。 某一个特定的时间点也可以使用Instant类来表示，Instant 类也可以用来创建老的 <code>java.util.Date</code> 对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Clock</span> clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> millis <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Instant</span> instant <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Date</span> legacyDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// legacy java.util.Date  </span></code></pre><h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。 可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间（如java.util.Date中的2000.01.01表示的实际是这一天的00:00这个瞬间）。</p><p>LocalDate类位于java.time包下，名叫java.time.LocalDate，创建出来的实例也是不可变对象，所以涉及它的计算方法将返回一个新的LocalDate。</p><p><strong>创建一个LocalDate实例</strong></p><p>我们有多种方式可以创建出 <code>LocalDate</code> 实例。第一种方法是使用 <code>now()</code> 方法获得值为今天当日的 <code>LocalDate</code> 对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另一种方法是使用年月日信息构造出LocalDate对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> localDate2 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>LocalDate 的 <code>of()</code> 方法创建出一个指定年月日的日期，并且没有时区信息。</p><p><strong>访问日期信息</strong></p><p>可以用如下方法访问LocalDate中的日期信息：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span>   year       <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Month</span> month      <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>   dayOfMonth <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>   dayOfYear  <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以注意到getMonth()与getDayOfWeek()方法返回了一个枚举类型代替一个int。你可以通过枚举类型中的getValue()来获得信息。</p><p><strong>LocalDate计算</strong></p><p>你可以进行一堆简单的日期计算，只要使用如下的方法：</p><ul><li><code>plusDays()</code></li><li><code>plusWeeks()</code></li><li><code>plusMonths()</code></li><li><code>plusYears()</code></li><li><code>minusDays()</code></li><li><code>minusWeeks()</code></li><li><code>minusMonths()</code></li><li><code>minusYears()</code></li></ul><p>以下举几个使用的例子来帮助理解使用：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> d  <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> d1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span> d2 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>第一行创建出一个新的LocalDate对象d，表示2018.3.5。</li><li>第二行创建了值等于d日期3年后的LocalDate对象，第三行也是一样，只是值改为d日期的三年前。</li></ol><h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。 LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p><p><strong>创建一个LocatTime实例</strong></p><p>有多种方式可以新建LocalTime实例。比如使用当前时间作为值新建对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另一种方式是使用指定的时分秒和纳秒来新建对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> localTime2 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">11001</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也有另一种版本的 <code>of()</code> 方法只需要小时分钟两项，或时分秒三项值作为参数。</p><p><strong>访问LocalTime对象的时间</strong></p><p>你可以通过这些方法访问其时、分、秒、纳秒：</p><ul><li><code>getHour()</code></li><li><code>getMinute()</code></li><li><code>getSecond()</code></li><li><code>getNano()</code></li></ul><p><strong>LocalTime的计算</strong></p><p>LocalTime类包含一系列方法，能帮你完成时间计算：</p><ul><li><code>plusHours()</code></li><li><code>plusMinutes()</code></li><li><code>plusSeconds()</code></li><li><code>plusNanos()</code></li><li><code>minusHours()</code></li><li><code>minusMinutes()</code></li><li><code>minusSeconds()</code></li><li><code>minusNanos()</code></li></ul><p>以下举一个例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalTime</span> localTime2 <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">11001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> localTimeLater   <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">plusHours</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> localTimeEarlier <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">minusHours</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>第一行新建一个LocalTime实例，表示21:30:50的第11001纳秒。</li><li>第二行新建了一个LocalTime实例表示这个时间的三小时后，第三行表示三小时前。</li><li>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。</li></ol><p>LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。</p><p>LocalDateTime类的值是不可变的，所以其计算方法会返回一个新的LocalDateTime实例。</p><p><strong>创建一个LocatDateTime实例</strong></p><p>可以通过LocalDateTime的静态工厂方法来创建LocalDateTime实例。以下举例使用 <code>now()</code> 方法创建：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另一种方式是使用指定的年月日、时分秒、纳秒来新建对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>访问LocalDateTime对象的时间</strong></p><p>你可以通过这些方法访问其日期时间：</p><ul><li><code>getYear()</code></li><li><code>getMonth()</code></li><li><code>getDayOfMonth()</code></li><li><code>getDayOfWeek()</code></li><li><code>getDayOfYear()</code></li><li><code>getHour()</code></li><li><code>getMinute()</code></li><li><code>getSecond()</code></li><li><code>getNano()</code></li></ul><p>这些方法中有一些返回int有一些返回枚举类型，你可以通过枚举类型中的 <code>getValue()</code> 方法来获得int值。</p><p><strong>LocalDateTime的计算</strong></p><p>LocalDateTime 类包含一系列方法，能帮你完成时间计算：</p><ul><li><code>plusYears()</code></li><li><code>plusMonths()</code></li><li><code>plusDays()</code></li><li><code>plusHours()</code></li><li><code>plusMinutes()</code></li><li><code>plusSeconds()</code></li><li><code>plusNanos()</code></li><li><code>minusYears()</code></li><li><code>minusMonths()</code></li><li><code>minusDays()</code></li><li><code>minusHours()</code></li><li><code>minusMinutes()</code></li><li><code>minusSeconds()</code></li><li><code>minusNanos()</code></li></ul><p>以下举一个例子：</p><pre class="language-none"><code class="language-none">LocalDateTime localDateTime  &#x3D; LocalDateTime.now();LocalDateTime localDateTime1 &#x3D; localDateTime.plusYears(3);LocalDateTime localDateTime2 &#x3D; localDateTime.minusYears(3);</code></pre><ol><li>第一行新建一个LocalDateTime实例表示当前这个时间。</li><li>第二行新建了一个LocalDateTime实例表示三年后。</li><li>第三行也新建了一个LocalDateTime实例表示三小时前。</li></ol><h3 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h3><p>ZonedDateTime类是Java 8中日期时间功能里，用于表示带时区的日期与时间信息的类。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。</p><p>ZonedDateTime 类的值是不可变的，所以其计算方法会返回一个新的ZonedDateTime 实例。</p><p><strong>创建一个ZonedDateTime实例</strong></p><p>有多种方式可以新建ZonedDateTime实例。比如使用当前时间作为值新建对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZonedDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另一种方式是使用指定的年月日、时分秒、纳秒以及时区ID来新建对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"UTC+1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZonedDateTime</span> dateTime2 <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">,</span> zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>访问ZonedDateTime对象的时间</strong></p><p>你可以通过这些方法访问其日期时间：</p><ul><li><code>getYear()</code></li><li><code>getMonth()</code></li><li><code>getDayOfMonth()</code></li><li><code>getDayOfWeek()</code></li><li><code>getDayOfYear()</code></li><li><code>getHour()</code></li><li><code>getMinute()</code></li><li><code>getSecond()</code></li><li><code>getNano()</code></li></ul><p>这些方法中有一些返回int有一些返回枚举类型，但可以通过枚举类型中的getValue()方法来获得int值。</p><p><strong>ZonedDateTime的计算</strong></p><p>ZonedDateTime类包含一系列方法，能帮你完成时间计算：</p><ul><li><code>plusYears()</code></li><li><code>plusMonths()</code></li><li><code>plusDays()</code></li><li><code>plusHours()</code></li><li><code>plusMinutes()</code></li><li><code>plusSeconds()</code></li><li><code>plusNanos()</code></li><li><code>minusYears()</code></li><li><code>minusMonths()</code></li><li><code>minusDays()</code></li><li><code>minusHours()</code></li><li><code>minusMinutes()</code></li><li><code>minusSeconds()</code></li><li><code>minusNanos()</code></li></ul><p>但注意计算时，若不巧跨越了夏令时（会补一小时或减一小时），可能得不到希望的结果。一个替代的正确做法是使用Period：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZonedDateTime</span> zoneDateTime <span class="token operator">=</span> previousDateTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token class-name">Period</span><span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>时区</strong></p><p>时区是用ZoneId类表示的，你可以使用ZoneId.now()或ZoneId.of(“xxx”)来实例化：</p><pre class="language-none"><code class="language-none">ZoneId zoneId &#x3D; ZoneId.of(&quot;UTC+1&quot;);</code></pre><p>传给 <code>of()</code> 方法的参数是时区的ID，如“UTC+1”指距离UTC（格林威治时间）有一小时的时差，你可以使用你想要的时差来表示ZoneId（如+1与-5等等） 你也可以使用另一种方式表示zone id，即使用地区名字，也是可以的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ZoneId</span> zoneId2 <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Copenhagen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZoneId</span> zoneId3 <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Paris"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>DateTimeFormatter类是Java 8中日期时间功能里，用于解析和格式化日期时间的类，位于 <code>java.time.format</code> 包下。</p><p><strong>预定义的DateTimeFormatter实例</strong></p><p>DateTimeFormatter类包含一系列预定义（常量）的实例，可以解析和格式化一些标准时间格式。这将让你免除麻烦的时间格式定义，类中包含如下预定义的实例：</p><pre class="language-java" data-language="java"><code class="language-java">BASIC_ISO_DATEISO_LOCAL_DATEISO_LOCAL_TIMEISO_LOCAL_DATE_TIMEISO_OFFSET_DATEISO_OFFSET_TIMEISO_OFFSET_DATE_TIMEISO_ZONED_DATE_TIMEISO_INSTANTISO_DATEISO_TIMEISO_DATE_TIMEISO_ORDINAL_TIMEISO_WEEK_DATERFC_1123_DATE_TIME</code></pre><p>每个预定义的DateTimeFormatter实例都有不同的日期格式，我就不解释全部的了。具体的可以查阅Java官方文档，但我在这篇的后续中会解释其中几个，以方便理解。</p><p><strong>它的格式化日期</strong></p><p>当你获取一个DateTimeFormatter实例后，就可以用format()方便来将一个日期格式化为某种字符串，例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">;</span><span class="token class-name">String</span> formattedDate <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formattedDate<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个样例把LocalDate对象格式化了，并输出20150703，这个输出表示现在2018年，3月5日。 再举一个关于ZonedDateTime的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">;</span><span class="token class-name">String</span> formattedZonedDate <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"formattedZonedDate = "</span> <span class="token operator">+</span> formattedZonedDate<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个例子会输出：20180305+0800 表示今年2018年，3月5日，位于UTC+8时区。</p><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><p>一个Duration对象表示两个Instant间的一段时间，是在Java 8中加入的新功能。</p><p>一个Duration实例是不可变的，当创建出对象后就不能改变它的值了。你只能通过Duration的计算方法，来创建出一个新的Durtaion对象。你会在之后的教程中见到的。</p><p><strong>创建Duration实例</strong></p><p>使用 <code>Duration</code> 类的工厂方法来创建一个 <code>Duration</code> 对象，以下是一个使用 <code>between()</code> 的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> first <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// wait some time while something happens</span><span class="token class-name">Instant</span> second <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Duration</span> duration <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>访问Duration的时间</strong></p><p>一个Duration对象里有两个域：纳秒值（小于一秒的部分），秒钟值（一共有几秒），他们的组合表达了时间长度。注意屯使用System.getCurrentTimeMillis()时不同，Duration不包含毫秒这个属性。 你可以通过以下两个方法得到它们的值：</p><pre class="language-none"><code class="language-none">long seconds &#x3D;  getSeconds()int nanos   &#x3D;   getNano()</code></pre><p>你也可以转换整个时间到其它单位如纳秒、分钟、小时、天：</p><ul><li><code>toNanos()</code></li><li><code>toMillis()</code></li><li><code>toMinutes()</code></li><li><code>toHours()</code></li><li><code>toDays()</code></li></ul><p>举例而言：<code>toNanos()</code> 与 <code>getNano()</code> 不同，<code>toNanos()</code> 获得的是 <code>Duration</code> 整个时间共有多少纳秒， 而 <code>getNano()</code> 只是获得这段时间中小于一秒的部分。</p><p>你也许会问，为什么没有 <code>toSeconds()</code> 方法，因为已经有 <code>getSeconds()</code> 这个方法能达到同样的功能了。</p><p><strong>Duration计算</strong></p><p>Duration类包含一系列的计算方法：</p><ul><li><code>plusNanos()</code></li><li><code>plusMillis()</code></li><li><code>plusSeconds()</code></li><li><code>plusMinutes()</code></li><li><code>plusHours()</code></li><li><code>plusDays()</code></li><li><code>minusNanos()</code></li><li><code>minusMillis()</code></li><li><code>minusSeconds()</code></li><li><code>minusMinutes()</code></li><li><code>minusHours()</code></li><li><code>minusDays()</code></li></ul><p>这些方法所做的事都是相似的，我在这儿也不展示内部实现细节了，就展示一个加减的例子吧：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Duration</span> start <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//obtain a start duration</span><span class="token class-name">Duration</span> added      <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Duration</span> subtracted <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>第一行创建了一个Duration对象叫start，具体怎么创建可以参考前面的代码。</li><li>第二三行样例创建了两个新的Duration，通过调用start的加减操作，使得added对象表示的时间比start多三天，而substracted则少三天。</li></ol><p>所有的计算方法都会返回一个新的Duration，以保证Duration的不可变属性。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> days <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 这段时间的总天数</span><span class="token keyword">long</span> hours <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这段时间的小时数</span><span class="token keyword">long</span> minutes <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这段时间的分钟数</span><span class="token keyword">long</span> seconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 这段时间的秒数</span><span class="token keyword">long</span> milliSeconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这段时间的毫秒数</span><span class="token keyword">long</span> nanoSeconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这段时间的纳秒数</span></code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p><strong>增加和减少日期</strong></p><p>Java 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 2017-01-05</span><span class="token class-name">LocalDate</span> date1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 修改为 2016-01-05</span><span class="token class-name">LocalDate</span> date2 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 修改为 2017-02-05</span><span class="token class-name">LocalDate</span> date3 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 修改为 2017-01-01</span><span class="token class-name">LocalDate</span> date4 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 增加一年 2018-01-05</span><span class="token class-name">LocalDate</span> date5 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 减少两个月 2016-11-05</span><span class="token class-name">LocalDate</span> date6 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 增加5天 2017-01-10</span></code></pre><p>上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日， 或者是下个月的最后一天，这时候我们可以使用 <code>with()</code> 方法的另一个重载方法，它接收一个TemporalAdjuster参数， 可以使我们更加灵活的调整日期：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date7 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token function">nextOrSame</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回下一个距离当前时间最近的星期日</span><span class="token class-name">LocalDate</span> date9 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token function">lastInMonth</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回本月最后一个星期六</span></code></pre><p>要使上面的代码正确编译，你需要使用静态导入 <code>TemporalAdjusters</code> 对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span></code></pre><p><code>TemporalAdjusters</code> 类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>dayOfWeekInMonth</code></td><td>返回同一个月中每周的第几天</td></tr><tr><td><code>firstDayOfMonth</code></td><td>返回当月的第一天</td></tr><tr><td><code>firstDayOfNextMonth</code></td><td>返回下月的第一天</td></tr><tr><td><code>firstDayOfNextYear</code></td><td>返回下一年的第一天</td></tr><tr><td><code>firstDayOfYear</code></td><td>返回本年的第一天</td></tr><tr><td><code>firstInMonth</code></td><td>返回同一个月中第一个星期几</td></tr><tr><td><code>lastDayOfMonth</code></td><td>返回当月的最后一天</td></tr><tr><td><code>lastDayOfNextMonth</code></td><td>返回下月的最后一天</td></tr><tr><td><code>lastDayOfNextYear</code></td><td>返回下一年的最后一天</td></tr><tr><td><code>lastDayOfYear</code></td><td>返回本年的最后一天</td></tr><tr><td><code>lastInMonth</code></td><td>返回同一个月中最后一个星期几</td></tr><tr><td><code>next / previous</code></td><td>返回后一个/前一个给定的星期几</td></tr><tr><td><code>nextOrSame / previousOrSame</code></td><td>返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td></tr></tbody></table><p>如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的 <code>TemporalAdjuster</code> 接口的实现，<code>TemporalAdjuster</code> 也是一个函数式接口，所以我们可以使用Lambda表达式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TemporalAdjuster</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Temporal</span> <span class="token function">adjustInto</span><span class="token punctuation">(</span><span class="token class-name">Temporal</span> temporal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>date<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>temporal <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当前日期</span>    <span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> <span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>temporal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ChronoField</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 正常情况下，每次增加一天</span>    <span class="token keyword">int</span> dayToAdd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是星期五，增加三天</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayOfWeek <span class="token operator">==</span> <span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dayToAdd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果是星期六，增加两天</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayOfWeek <span class="token operator">==</span> <span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dayToAdd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> temporal<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>dayToAdd<span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="其他历法"><a href="#其他历法" class="headerlink" title="其他历法"></a>其他历法</h3><p>Java中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。</p><p>此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：</p><ul><li><code>ThaiBuddhistDate</code>：泰国佛教历</li><li><code>MinguoDate</code>：中华民国历</li><li><code>JapaneseDate</code>：日本历</li><li><code>HijrahDate</code>：伊斯兰历</li></ul><p>每个日期类都继承 <code>ChronoLocalDate</code> 类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。</p><p>这些不同的历法也可以用于向公历转换：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JapaneseDate</span> jpDate <span class="token operator">=</span> <span class="token class-name">JapaneseDate</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Chronology</span> jpChronology <span class="token operator">=</span> <span class="token class-name">Chronology</span><span class="token punctuation">.</span><span class="token function">ofLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span>JAPANESE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChronoLocalDate</span> jpChronoLocalDate <span class="token operator">=</span> jpChronology<span class="token punctuation">.</span><span class="token function">dateNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们在开发过程中应该尽量避免使用 <code>ChronoLocalDate</code>，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样， 比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月， 但开发者认为是12个月，多出来的一个月属于明年的。 再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。</p><p>在实际开发过程中建议使用 <code>LocalDate</code>，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化， 这时可以使用 <code>ChronoLocalDate</code> 类。</p><h2 id="Nashorn"><a href="#Nashorn" class="headerlink" title="Nashorn"></a>Nashorn</h2><p>个人感觉用的不是很多，不感兴趣的可以直接略过。</p><p><a href="https://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/">原文地址</a></p><h3 id="使用-Nashron"><a href="#使用-Nashron" class="headerlink" title="使用 Nashron"></a>使用 Nashron</h3><p>Nashorn JavaScript引擎可以在Java代码中编程调用，也可以通过命令行工具<code>jjs</code>使用，它在<code>$JAVA_HOME/bin</code>中。如果打算使用<code>jjs</code>，你可能希望设置符号链接来简化访问：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /usr/bin$ <span class="token function">ln</span> -s <span class="token variable">$JAVA_HOME</span>/bin/jjs jjs$ jjsjjs<span class="token operator">></span> print<span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个教程专注于在Java代码中调用Nashron，所以让我们先跳过<code>jjs</code>。Java代码中简单的<strong>HelloWorld</strong> 如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ScriptEngine</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"print('Hello World!');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了在Java中执行JavaScript，你首先要通过<code>javax.script</code>包创建脚本引擎。这个包已经在<a href="http://link.zhihu.com/?target=https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino">Rhino</a>（来源于Mozilla、Java中的遗留JS引擎）中使用了。</p><p>JavaScript代码既可以通过传递JavaScript代码字符串，也可以传递指向你的JS脚本文件的<code>FileReader</code>来执行：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ScriptEngine</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"script.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Nashorn JavaScript基于<a href="http://link.zhihu.com/?target=http://es5.github.io/">ECMAScript 5.1</a>，但是它的后续版本会对ES6提供支持：</p><blockquote><p><em>Nashorn的当前策略遵循ECMAScript规范。当我们在JDK8中发布它时，它将基于ECMAScript 5.1。Nashorn未来的主要发布基于ECMAScript 6。</em></p></blockquote><p>Nashorn定义了大量对<strong>ECMAScript</strong>标准的语言和API扩展。但是首先让我们看一看Java和JavaScript代码如何交互。</p><h3 id="在Java中调用JavaScript函数"><a href="#在Java中调用JavaScript函数" class="headerlink" title="在Java中调用JavaScript函数"></a>在Java中调用JavaScript函数</h3><p>Nashorn 支持从Java代码中直接调用定义在脚本文件中的JavaScript函数。你可以将Java对象传递为函数参数，并且从函数返回数据来调用Java方法。</p><p>下面的JavaScript函数稍后会在Java端调用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">fun1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Hi there from Javascript, '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"greetings from javascript"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">fun2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"JS Class Definition: "</span> <span class="token operator">+</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>为了调用函数，你首先需要将脚本引擎转换为<code>Invocable</code>。<code>Invocable</code>接口由<code>NashornScriptEngine</code>实现，并且定义了<code>invokeFunction</code>方法来调用指定名称的JavaScript函数。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ScriptEngine</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"script.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Invocable</span> invocable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Invocable</span><span class="token punctuation">)</span> engine<span class="token punctuation">;</span><span class="token class-name">Object</span> result <span class="token operator">=</span> invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun1"</span><span class="token punctuation">,</span> <span class="token string">"Peter Parker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hi there from Javascript, Peter Parker</span><span class="token comment">// greetings from javascript</span><span class="token comment">// class java.lang.String</span></code></pre><p>执行这段代码会在控制台产生三行结果。调用函数<code>print</code>将结果输出到<code>System.out</code>，所以我们会首先看到JavaScript输出。</p><p>现在让我们通过传入任意Java对象来调用第二个函数：</p><pre class="language-java" data-language="java"><code class="language-java">invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [object java.util.Date]</span>invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [object java.time.LocalDateTime]</span>invocable<span class="token punctuation">.</span><span class="token function">invokeFunction</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [object com.winterbe.java8.Person]</span></code></pre><p>Java对象在传入时不会在JavaScript端损失任何类型信息。由于脚本在JVM上原生运行，我们可以在Nashron上使用Java API或外部库的全部功能。</p><h3 id="在JavaScript中调用Java方法"><a href="#在JavaScript中调用Java方法" class="headerlink" title="在JavaScript中调用Java方法"></a>在JavaScript中调用Java方法</h3><p>在JavaScript中调用Java方法十分容易。我们首先需要定义一个Java静态方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hi there from Java, %s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"greetings from java"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Java类可以通过<code>Java.type</code>API扩展在JavaScript中引用。它就和Java代码中的<code>import</code>类似。只要定义了Java类型，我们就可以自然地调用静态方法<code>fun1()</code>，然后像<code>sout</code>打印信息。由于方法是静态的，我们不需要首先创建实例。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> <span class="token class-name">MyJavaClass</span> <span class="token operator">=</span> <span class="token class-name">Java</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'my.package.MyJavaClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token string">'John Doe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hi there from Java, John Doe</span><span class="token comment">// greetings from java</span></code></pre><p>在使用JavaScript原生类型调用Java方法时，Nashorn 如何处理类型转换？让我们通过简单的例子来弄清楚。</p><p>下面的Java方法简单打印了方法参数的实际类型：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>为了理解背后如何处理类型转换，我们使用不同的JavaScript类型来调用这个方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class java.lang.Integer</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">49.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class java.lang.Double</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class java.lang.Boolean</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token string">"hi there"</span><span class="token punctuation">)</span><span class="token comment">// class java.lang.String</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class jdk.nashorn.internal.objects.NativeNumber</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class jdk.nashorn.internal.objects.NativeDate</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class jdk.nashorn.internal.objects.NativeRegExp</span><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// class jdk.nashorn.internal.scripts.JO4</span></code></pre><p>JavaScript原始类型转换为合适的Java包装类，而JavaScript原生对象会使用内部的适配器类来表示。要记住<code>jdk.nashorn.internal</code>中的类可能会有所变化，所以不应该在客户端面向这些类来编程。</p><blockquote><p><em>任何标记为“内部”的东西都可能会从你那里发生改变。</em></p></blockquote><h3 id="ScriptObjectMirror"><a href="#ScriptObjectMirror" class="headerlink" title="ScriptObjectMirror"></a>ScriptObjectMirror</h3><p>在向Java传递原生JavaScript对象时，你可以使用<code>ScriptObjectMirror</code>类，它实际上是底层JavaScript对象的Java表示。<code>ScriptObjectMirror</code>实现了<code>Map</code>接口，位于<code>jdk.nashorn.api</code>中。这个包中的类可以用于客户端代码。</p><p>下面的例子将参数类型从<code>Object</code>改为<code>ScriptObjectMirror</code>，所以我们可以从传入的JavaScript对象中获得一些信息。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token class-name">ScriptObjectMirror</span> mirror<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mirror<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mirror<span class="token punctuation">.</span><span class="token function">getOwnKeys</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当向这个方法传递对象（哈希表）时，在Java端可以访问其属性：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">MyJavaClass</span><span class="token punctuation">.</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>    bar<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object: [foo, bar]</span></code></pre><p>我们也可以在Java中调用JavaScript的成员函数。让我们首先定义JavaScript <code>Person</code>类型，带有属性<code>firstName</code> 和 <code>lastName</code>，以及方法<code>getFullName</code>。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getFullName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>JavaScript方法<code>getFullName</code>可以通过<code>callMember()</code>在<code>ScriptObjectMirror</code>上调用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token class-name">ScriptObjectMirror</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Full Name is: "</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">callMember</span><span class="token punctuation">(</span><span class="token string">"getFullName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当向Java方法传递新的<code>Person</code>时，我们会在控制台看到预期的结果：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Parker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyJavaClass<span class="token punctuation">.</span><span class="token function">fun4</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Full Name is: Peter Parker</span></code></pre><h3 id="语言扩展"><a href="#语言扩展" class="headerlink" title="语言扩展"></a>语言扩展</h3><p>Nashorn定义了多种对ECMAScript标准的语言和API扩展。让我们看一看最新的特性：</p><h4 id="类型数组"><a href="#类型数组" class="headerlink" title="类型数组"></a>类型数组</h4><p>JavaScript的原生数组是无类型的。Nashron允许你在JavaScript中使用Java的类型数组：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> IntArray <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"int[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Array index out of range: 5</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"17"</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 17</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wrong type"</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"17.3"</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 17</span></code></pre><p><code>int[]</code>数组就像真实的Java整数数组那样。但是此外，在我们试图向数组添加非整数时，Nashron在背后执行了一些隐式的转换。字符串会自动转换为整数，这十分便利。</p><h4 id="集合和范围遍历"><a href="#集合和范围遍历" class="headerlink" title="集合和范围遍历"></a>集合和范围遍历</h4><p>我们可以使用任何Java集合，而避免使用数组瞎折腾。首先需要通过<code>Java.type</code>定义Java类型，之后创建新的实例。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ArrayList <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'java.util.ArrayList'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">var</span> el <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a, b, c</span></code></pre><p>为了迭代集合和数组，Nashron引入了<code>for each</code>语句。它就像Java的范围遍历那样工作。</p><p>下面是另一个集合的范围遍历示例，使用<code>HashMap</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'val1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'val2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token keyword">in</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// foo, bar</span><span class="token keyword">for</span> <span class="token function">each</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token keyword">in</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// val1, val2</span></code></pre><h4 id="Lambda表达式和数据流"><a href="#Lambda表达式和数据流" class="headerlink" title="Lambda表达式和数据流"></a>Lambda表达式和数据流</h4><p>每个人都热爱lambda和数据流 — Nashron也一样！虽然ECMAScript 5.1没有Java8 lmbda表达式的简化箭头语法，我们可以在任何接受lambda表达式的地方使用函数字面值。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> el<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// aaa1, aaa2</span></code></pre><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>Java类型可以由<code>Java.extend</code>轻易扩展。就像你在下面的例子中看到的那样，你甚至可以在你的脚本中创建多线程的代码：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> Runnable <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'java.lang.Runnable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Printer <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Runnable<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'printed from a separate thread'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Thread <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'java.lang.Thread'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'printed from another thread'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// printed from a separate thread</span><span class="token comment">// printed from another thread</span></code></pre><h4 id="参数重载"><a href="#参数重载" class="headerlink" title="参数重载"></a>参数重载</h4><p>方法和函数可以通过点运算符或方括号运算符来调用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> System <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'java.lang.System'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 10</span>System<span class="token punctuation">.</span>out<span class="token punctuation">[</span><span class="token string">"println"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">11.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 11.0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">[</span><span class="token string">"println(double)"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 12.0</span></code></pre><p>当使用重载参数调用方法时，传递可选参数类型<code>println(double)</code>会指定所调用的具体方法。</p><h4 id="Java-Beans"><a href="#Java-Beans" class="headerlink" title="Java Beans"></a>Java Beans</h4><p>你可以简单地使用属性名称来向Java Beans获取或设置值，不需要显式调用读写器：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> Date <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'java.util.Date'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>date<span class="token punctuation">.</span>year <span class="token operator">+=</span> <span class="token number">1900</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2014</span></code></pre><h4 id="函数字面值"><a href="#函数字面值" class="headerlink" title="函数字面值"></a>函数字面值</h4><p>对于简单的单行函数，我们可以去掉花括号：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sqr</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">sqr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 9</span></code></pre><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><p>两个不同对象的属性可以绑定到一起：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">bindProperties</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bar</span>o1<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'BAM'</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// BAM</span></code></pre><h4 id="字符串去空白"><a href="#字符串去空白" class="headerlink" title="字符串去空白"></a>字符串去空白</h4><p>我喜欢去掉空白的字符串：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"   hehe"</span><span class="token punctuation">.</span><span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// hehe</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hehe    "</span><span class="token punctuation">.</span><span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"he"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// hehehe</span></code></pre><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>以防你忘了自己在哪里：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">print</span><span class="token punctuation">(</span>__FILE__<span class="token punctuation">,</span> __LINE__<span class="token punctuation">,</span> __DIR__<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="导入作用域"><a href="#导入作用域" class="headerlink" title="导入作用域"></a>导入作用域</h4><p>有时一次导入多个Java包会很方便。我们可以使用<code>JavaImporter</code>类，和<code>with</code>语句一起使用。所有被导入包的类文件都可以在<code>with</code>语句的局部域中访问到。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> imports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaImporter</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>imports<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// /path/to/my/script.js</span><span class="token punctuation">&#125;</span></code></pre><h4 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h4><p>一些类似<code>java.util</code>的包可以不使用<code>java.type</code>或<code>JavaImporter</code>直接访问：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"s3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面的代码将Java列表转换为JavaScript原生数组：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> jsArray <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>jsArray<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">// s1,s2,s3</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>jsArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [object Array]</span></code></pre><p>下面的代码执行相反操作：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> javaArray <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"int[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="访问超类"><a href="#访问超类" class="headerlink" title="访问超类"></a>访问超类</h4><p>在JavaScript中访问被覆盖的成员通常比较困难，因为Java的<code>super</code>关键字在ECMAScript中并不存在。幸运的是，Nashron有一套补救措施。</p><p>首先我们需要在Java代码中定义超类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SuperRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"super run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>下面我在JavaScript中覆盖了<code>SuperRunner</code>。要注意创建新的<code>Runner</code>实例时的Nashron语法：覆盖成员的语法取自Java的匿名对象。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> SuperRunner <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'com.winterbe.java8.SuperRunner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Runner <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>SuperRunner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Java<span class="token punctuation">.</span><span class="token function">super</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'on my run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>runner<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// super run</span><span class="token comment">// on my run</span></code></pre><p>我们通过<code>Java.super()</code>扩展调用了被覆盖的<code>SuperRunner.run()</code>方法。</p><h3 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h3><p>在JavaScript中加载额外的脚本文件非常方便。我们可以使用<code>load</code>函数加载本地或远程脚本。</p><p>我在我的Web前端中大量使用<a href="http://link.zhihu.com/?target=http://underscorejs.org/">Underscore.js</a>，所以让我们在Nashron中复用它：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> odds <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>odds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1, 3, 5</span></code></pre><p>外部脚本会在相同JavaScript上下文中被执行，所以我们可以直接访问underscore 的对象。要记住当变量名称互相冲突时，脚本的加载可能会使你的代码崩溃。</p><p>这一问题可以通过把脚本文件加载到新的全局上下文来绕过：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">loadWithNewGlobal</span><span class="token punctuation">(</span><span class="token string">'script.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="命令行脚本"><a href="#命令行脚本" class="headerlink" title="命令行脚本"></a>命令行脚本</h3><p>如果你对编写命令行（shell）脚本感兴趣，来试一试<a href="http://link.zhihu.com/?target=https://github.com/winterbe/nake">Nake</a>吧。Nake是一个Java 8 Nashron的简化构建工具。你只需要在项目特定的<code>Nakefile</code>中定义任务，之后通过在命令行键入<code>nake -- myTask</code>来执行这些任务。任务编写为JavaScript，并且在Nashron的脚本模式下运行，所以你可以使用你的终端、JDK8 API和任意Java库的全部功能。</p><p>对Java开发者来说，编写命令行脚本是前所未有的简单…</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Optional-1"><a href="#Optional-1" class="headerlink" title="Optional"></a>Optional</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>empty</code></td><td>返回一个空的 Optional 实例</td></tr><tr><td><code>filter</code></td><td>如果值存在并且满足提供的断言， 就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象</td></tr><tr><td><code>map</code></td><td>如果值存在，就对该值执行提供的 mapping 函数调用</td></tr><tr><td><code>flatMap</code></td><td>如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional 对象</td></tr><tr><td><code>get</code></td><td>如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</td></tr><tr><td><code>ifPresent</code></td><td>如果值存在，就执行使用该值的方法调用，否则什么也不做</td></tr><tr><td><code>isPresent</code></td><td>如果值存在就返回 true，否则返回 false</td></tr><tr><td><code>of</code></td><td>将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常</td></tr><tr><td><code>ofNullable</code></td><td>将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</td></tr><tr><td><code>orElse</code></td><td>如果有值则将其返回，否则返回一个默认值</td></tr><tr><td><code>orElseGet</code></td><td>如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</td></tr><tr><td><code>orElseThrow</code></td><td>如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</td></tr></tbody></table><p>Optional 可以很优雅地避免了 <code>NullPointerException</code> ，这里我们简单举个例子，</p><pre class="language-java" data-language="java"><code class="language-java">ptional<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"bam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "bam"</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "b"</span></code></pre><h3 id="Base64-1"><a href="#Base64-1" class="headerlink" title="Base64"></a>Base64</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Encoding a string to base 64</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token class-name">Encoder</span> encoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> normalString <span class="token operator">=</span> <span class="token string">"username:password"</span><span class="token punctuation">;</span><span class="token class-name">String</span> encodedString <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>        normalString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Decoding a base 64 encoded string</span><span class="token class-name">String</span> encodedString <span class="token operator">=</span> <span class="token string">"dXNlcm5hbWU6cGFzc3dvcmQ="</span><span class="token punctuation">;</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token class-name">Decoder</span> decoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedByteArray <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Verify the decoded string</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decodedByteArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Wrap to a base 64 encoded output stream</span><span class="token class-name">Path</span> originalPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c:/temp"</span><span class="token punctuation">,</span> <span class="token string">"mail.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> targetPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c:/temp"</span><span class="token punctuation">,</span> <span class="token string">"encoded.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token class-name">Encoder</span> mimeEncoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getMimeEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//Copy the encoded file content to target file</span>    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>originalPath<span class="token punctuation">,</span> mimeEncoder<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Or simply use the encoded output stream</span>    <span class="token class-name">OutputStream</span> encodedStrem <span class="token operator">=</span> mimeEncoder<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   </code></pre><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><p><a href="https://www.jianshu.com/p/1a46570920da">原文链接</a></p><p>Java 8在两个方面对注解机制进行了改进，分别为:</p><p>你现在可以定义重复注解</p><p>你可以为任何目标添加注解</p><p>Java中的注解是一种对程序元素进行配置，提供附加信息的机制。</p><h4 id="重复注解"><a href="#重复注解" class="headerlink" title="重复注解"></a>重复注解</h4><p>之前版本的Java禁止对同样的注解类型声明多次。由于这个原因，下面的第二句代码是无效的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@interface</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Raoul"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Mario"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Alan"</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><p>Java程序员经常通过一些惯用法绕过这一限制。例如可以声明一个新的注解，它包含了你希望重复的注解数组。这种方法的形式如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@interface</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Authors</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Author</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Authors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Raoul"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Mario"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Alan"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>Book类的嵌套注解相当难看。这就是Java 8想要从根本上移除这一限制的原因，去掉这一限制后，代码的可读性会好很多。</p><p>现在，如果你的配置允许重复注解，你可以毫无顾虑地一次声明 多个同一种类型的注解。它目前还不是默认行为，你需要显式地要求进行重复注解。</p><p>创建一个重复注解</p><p>如果一个注解在设计之初就是可重复的，你可以直接使用它。但是，如果你提供的注解是为用户提供的，那么就需要做一些工作，说明该注解可以重复。下面是你需要执行的两个步骤:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Authors</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">Authors</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Author</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>完成了这样的定义之后，Book类可以通过多个@Author注解进行注释，如下所示:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Raoul"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Mario"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Alan"</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><p>编译时，Book会被认为使用了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Authors</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Raoul"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name <span class="token operator">=</span>”<span class="token class-name">Mario</span>”<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Author</span><span class="token punctuation">(</span>name<span class="token operator">=</span>”<span class="token class-name">Alan</span>”<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>这样的形式进行了注解，所以，你可以把这种新的机 制看成是一种语法糖，它提供了Java程序员之前利用的惯用法类似的功能。为了确保与反射方法 在行为上的一致性，注解会被封装到一个容器中。Java API中的getAnnotation(Class<T> annotation-Class)方法会为注解元素返回类型为T的注解。如果实际情况有多个类型为T的注解，该方法的返回到底是哪一个呢?</p><p>类Class提供了一个新的getAnnotationsByType 方法，它可以帮助我们更好地使用重复注解。比如，你可以像下面这样打印输出Book类的所有Author注解:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Author</span><span class="token punctuation">[</span><span class="token punctuation">]</span> authors <span class="token operator">=</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span><span class="token class-name">Author</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//java8提供的循环及lambda表达式</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>authors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a <span class="token operator">-></span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><p>从Java 8开始，注解已经能应用于任何目标。这其中包括new操作符、类型转换、instanceof检查、泛型类型参数，以及implements和throws子句。</p><p>这里，我们举了一个例子，这个例子中 类型为String的变量name不能为空，所以我们使用了@NonNull对其进行注解:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类似地，你可以对列表中的元素类型进行注解:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Car</span><span class="token operator">></span> cars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>利用好对类型的注解非常有利于我们对程序进行分析。这两个例子中，通过这一工具我们可以确保getName不返回空，cars列表中的元素总是非空值。这会 极大地帮助你减少代码中不期而至的错误。</p><p>Java 8并未提供官方的注解或者一种工具能以开箱即用的方式使用它们。它仅仅提供了一种功能，你使用它可以对不同的类型添加注解。</p><h4 id="泛型类型推断"><a href="#泛型类型推断" class="headerlink" title="泛型类型推断"></a>泛型类型推断</h4><p>Java 8对泛型参数的推断进行了增强。相信你对Java 8之前版本中的类型推断已经比较熟了。</p><p>比如，Java中的方法emptyList方法定义如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>emptyList方法使用了类型参数T进行参数化。你可以像下面这样为该类型参数提供一个显式的类型进行函数调用:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不过Java也可以推断泛型参数的类型。上面的代码和下面这段代码是等价的:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Java 8出现之前，这种推断机制依赖于程序的上下文(即目标类型)，具有一定的局限性。</p><p>Java 8中，目标类型包括向方法传递的参数，因此你不再需要提供显式的泛型参数</p><h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><h4 id="Convert-Regex-to-Predicate"><a href="#Convert-Regex-to-Predicate" class="headerlink" title="Convert Regex to Predicate"></a>Convert Regex to Predicate</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"bob@gmail.com"</span><span class="token punctuation">,</span> <span class="token string">"alice@hotmail.com"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">".*@gmail\\.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Using-Regex-using-Pattern-matcher"><a href="#Using-Regex-using-Pattern-matcher" class="headerlink" title="Using Regex using Pattern.matcher()"></a>Using Regex using Pattern.matcher()</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^(.+)@example.com$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Input list</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> emails <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"alex@example.com"</span><span class="token punctuation">,</span> <span class="token string">"bob@yahoo.com"</span><span class="token punctuation">,</span>                <span class="token string">"cat@google.com"</span><span class="token punctuation">,</span> <span class="token string">"david@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> email <span class="token operator">:</span> emails<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span></code></pre><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4><h5 id="Read-file-line-by-line-–-Java-8-Stream"><a href="#Read-file-line-by-line-–-Java-8-Stream" class="headerlink" title="Read file line by line – Java 8 Stream"></a>Read file line by line – Java 8 Stream</h5><pre class="language-java" data-language="java"><code class="language-java"> <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c:/temp"</span><span class="token punctuation">,</span> <span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//The stream hence file will also be closed here</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hasPassword <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hasPassword<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hasPassword<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// or</span> <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c:/temp"</span><span class="token punctuation">,</span> <span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// When filteredLines is closed, it closes underlying stream as well as underlying file.</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> filteredLines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hasPassword <span class="token operator">=</span> filteredLines<span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hasPassword<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hasPassword<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Read-file-line-by-line-–-FileReader"><a href="#Read-file-line-by-line-–-FileReader" class="headerlink" title="Read file line by line – FileReader"></a>Read file line by line – FileReader</h5><p>Till java 7, you could read a file using FileReader in various ways. There may be other effective and better variations of this code but that is not the man point of this post. I am giving just as reminder.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"c:/temp/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h4><h5 id="Java-8-write-to-file-using-BufferedWriter"><a href="#Java-8-write-to-file-using-BufferedWriter" class="headerlink" title="Java 8 write to file using BufferedWriter"></a>Java 8 write to file using BufferedWriter</h5><p><a href="https://docs.oracle.com/javase/8/docs/api/java/io/BufferedWriter.html">BufferedWriter</a> is used to write text to a character or byte stream. Before printing the characters, it stores the characters in buffer and print in bunches. Without buffering, each invocation of a print() method would cause characters to be converted into bytes that would then be written immediately to the file, which can be very inefficient.</p><p>Java program to <em>write content to file using Java 8</em> APIs is –</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//Get the file reference</span><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c:/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Use try-with-resource to get auto-closeable writer instance</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newBufferedWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Write-to-file-using-Files-write"><a href="#Write-to-file-using-Files-write" class="headerlink" title="Write to file using Files.write()"></a>Write to file using Files.write()</h5><p>Using <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#write-java.nio.file.Path-byte:A-java.nio.file.OpenOption...-">Files.write()</a> method is also pretty much clean code.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"Hello World !!"</span><span class="token punctuation">;</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c:/output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/winterbe/java8-tutorial">java8-tutorial</a></p><p><a href="https://howtodoinjava.com/java8/">howtodoinjava java8</a> </p><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals">JavaLambdaInternals</a></p><p><a href="https://martinfowler.com/articles/collection-pipeline/">collection-pipeline</a></p><p><a href="https://github.com/biezhi/learn-java8">learn-java8</a></p><p><a href="https://zq99299.github.io/java-tutorial/">java8官网笔记教程</a></p><p><a href="https://github.com/jianchengwang/todo-java/tree/master/java8">示例代码</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
